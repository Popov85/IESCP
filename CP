<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="25" zv="Cache for Windows (x86-32) 2013.1 (Build 446U)" ts="2013-09-19 11:03:52">
<Class name="%Library.Boolean">
<Description><![CDATA[
The <B>%Boolean</B> data type class represents a boolean value.
<p>The logical value of the <B>%Boolean</B> data type is an integer
with value of 0 (false) and 1 (true).]]></Description>
<ClientDataType>BOOLEAN</ClientDataType>
<OdbcType>BIT</OdbcType>
<SqlCategory>INTEGER</SqlCategory>
<Super>%DataType</Super>
<System>2</System>
<TimeChanged>62935,42621</TimeChanged>
<TimeCreated>59241,41414</TimeCreated>

<Parameter name="XSDTYPE">
<Description>
Declares the XSD type used when projecting XML Schemas.</Description>
<Default>boolean</Default>
</Parameter>

<Method name="XSDToLogical">
<Description>
Converts the SOAP encoded input value, which is true, false 1 or 0,
into a Cache %Boolean value.</Description>
<ClassMethod>1</ClassMethod>
<CodeMode>generator</CodeMode>
<FormalSpec>%val:%String</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<ServerOnly>1</ServerOnly>
<Implementation><![CDATA[
	If ($$$getClassType(%class)=$$$cCLASSCLASSTYPEDATATYPE) || $$$comMemberKeyGet(%class,$$$cCLASSparameter,"XMLENABLED",$$$cPARAMdefault) {
		$$$GENERATE("	Q $case(%val,""true"":1,""false"":0,1:1,0:0,:"""")")
	}
	Quit $$$OK
]]></Implementation>
</Method>

<Method name="LogicalToXSD">
<Description>
Converts the Cache %Boolean value to the canonical SOAP encoded value.</Description>
<ClassMethod>1</ClassMethod>
<CodeMode>generator</CodeMode>
<FormalSpec>%val:%Boolean</FormalSpec>
<ReturnType>%String</ReturnType>
<ServerOnly>1</ServerOnly>
<Implementation><![CDATA[
	If ($$$getClassType(%class)=$$$cCLASSCLASSTYPEDATATYPE) || $$$comMemberKeyGet(%class,$$$cCLASSparameter,"XMLENABLED",$$$cPARAMdefault) {
		$$$GENERATE("	Q $s(%val:""true"",1:""false"")")
	}
	Quit $$$OK
]]></Implementation>
</Method>

<Method name="DisplayToLogical">
<Description><![CDATA[
Converts the input value <var>%val</var>, which is a string representing
a boolean value, into a boolean value.
<p>Returns the boolean value of the input string <var>%val</var>.]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>%val:%String</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<ServerOnly>0</ServerOnly>
<Implementation><![CDATA[	Quit ''%val
]]></Implementation>
</Method>

<Method name="Normalize">
<Description><![CDATA[
Converts <var>%val</var> to a normalized value.]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>%val:%CacheString</FormalSpec>
<ReturnType>%Integer</ReturnType>
<ServerOnly>1</ServerOnly>
<Implementation><![CDATA[	Quit %val\1
]]></Implementation>
</Method>

<Method name="IsValid">
<Description><![CDATA[
Tests if the boolean value <var>%val</var> is valid.]]></Description>
<ClassMethod>1</ClassMethod>
<CodeMode>generator</CodeMode>
<FormalSpec>%val:%CacheString=""</FormalSpec>
<ReturnType>%Status</ReturnType>
<ServerOnly>0</ServerOnly>
<Implementation><![CDATA[
	#; If subclass has a IsValidDT then call this
	If %property'="",$$$comSubMemberDefined(%class,$$$cCLASSproperty,%property,$$$cPROPmethod,"IsValidDT") {
		$$$GENERATE("	Q $s(##class("_%class_")."_%property_"IsValidDT(%val):1,1:$$$ERROR($$$DTFailure,%val))")
		Quit $$$OK
	}
	$$$GENERATE("	Q $s($isvalidnum(%val,0,0,2)&&(+%val'=2):1,1:$$$ERROR($$$DTNotBoolean,%val))")
	Quit $$$OK
]]></Implementation>
</Method>

<Method name="LogicalToDisplay">
<Description><![CDATA[
Converts the value of <var>%val</var>, which is in boolean format, into a display string.
<p>Returns the formatted value of <var>%val</var>.]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>%val:%Boolean</FormalSpec>
<ReturnType>%String</ReturnType>
<ServerOnly>0</ServerOnly>
<Implementation><![CDATA[	Quit %val
]]></Implementation>
</Method>
</Class>


<Class name="%Library.Integer">
<Description><![CDATA[
The <b>%Integer</b> data type class represents an integer value.
<p>The logical value of the <b>%Integer</b> data type is an integer.
The %Integer datatype does not have built-in limits. 
It is a hybrid datatype the values of which is not exact outside of a certain range 
(currently it is the same range as  that of the 64-bit integer value). 
The current range for xDBC projections can be seen under Cache configuration/advanced.
Its default corresponds to the usual signed 32-bit integer limits.]]></Description>
<ClientDataType>INTEGER</ClientDataType>
<IncludeGenerator>%occUtility</IncludeGenerator>
<OdbcType>INTEGER</OdbcType>
<SqlCategory>INTEGER</SqlCategory>
<Super>%DataType</Super>
<System>2</System>
<TimeChanged>62935,42622</TimeChanged>
<TimeCreated>59241,41415</TimeCreated>

<Parameter name="FORMAT">
<Description><![CDATA[
The format specification for the data type's display value.
<p>The value of <var>FORMAT</var> corresponds to the formatting option
of the <code>$FNUMBER</code> function, which is used to perform the formatting.]]></Description>
</Parameter>

<Parameter name="MAXVAL">
<Description>
The maximum allowed logical value for the data type.</Description>
<Type>INTEGER</Type>
</Parameter>

<Parameter name="MINVAL">
<Description>
The minimum allowed logical value for the data type.</Description>
<Type>INTEGER</Type>
</Parameter>

<Parameter name="VALUELIST">
<Description><![CDATA[
Used for enumerated (multiple-choice) attributes.
<var>VALUELIST</var> is either a null string ("") or a delimiter
separated list (where the delimiter is the first character) of logical values.
If a non-null value is present, then the attribute is restricted to values
in the list, and the validation code simply checks to see if the value is in the list.]]></Description>
</Parameter>

<Parameter name="DISPLAYLIST">
<Description><![CDATA[
Used for enumerated (multiple-choice) attributes.
Used in conjunction with the <a href="#VALUELIST">VALUELIST</a> parameter for enumerated
(multiple-choice) attributes. <var>DISPLAYLIST</var>, if not null,
represents the display values for the attribute corresponding with
the logical values listed in <var>VALUELIST</var>.
<p>The display values are returned by the <a href="#LogicalToDisplay">LogicalToDisplay</a> method.]]></Description>
</Parameter>

<Parameter name="XSDTYPE">
<Description>
Declares the XSD type used when projecting XML Schemas.</Description>
<Default>long</Default>
</Parameter>

<Method name="XSDToLogical">
<Description>
Converts the SOAP encoded input decimal value into a Cache numeric value.
Returns "" for error.</Description>
<ClassMethod>1</ClassMethod>
<CodeMode>generator</CodeMode>
<FormalSpec>%val:%String</FormalSpec>
<ReturnType>%Integer</ReturnType>
<ServerOnly>1</ServerOnly>
<Implementation><![CDATA[
	If ($$$getClassType(%class)=$$$cCLASSCLASSTYPEDATATYPE) || $$$comMemberKeyGet(%class,$$$cCLASSparameter,"XMLENABLED",$$$cPARAMdefault) {
		Set min=%parameter("MINVAL")
		Set max=%parameter("MAXVAL")
		If max="" {
			Set mm=$select(min="":"",1:","_min)
		} Else {
			Set mm=","_min_","_max
		}
		$$$GENERATE("	Q $s($tr(%val,""Ee(),."")'=%val:"""",1:$number(%val,""I"""_mm_"))")
	}
	Quit $$$OK
]]></Implementation>
</Method>

<Method name="DisplayToLogical">
<Description><![CDATA[
Converts the input value <var>%val</var>, which is a string representing an integer,
into a logical integer value.
<p>Returns the logical integer value of the input string <var>%val</var>.]]></Description>
<ClassMethod>1</ClassMethod>
<CodeMode>generator</CodeMode>
<FormalSpec>%val:%String</FormalSpec>
<ReturnType>%Integer</ReturnType>
<ServerOnly>0</ServerOnly>
<Implementation><![CDATA[
	i %parameter("FORMAT")'="",'$$CheckNumericFormat^%occCheck(%parameter("FORMAT")) quit $$$ERROR($$$InorrectIntegerFormat,%class,%method)
	i %parameter("VALUELIST")'="",%parameter("DISPLAYLIST")'="" d  QUIT $$$OK
	. s sep=$e(%parameter("DISPLAYLIST"))
	. s len=$l(%parameter("DISPLAYLIST"),sep)
	. f i=2:1:$l(%parameter("DISPLAYLIST"),sep) $$$GENERATE(" Q:%val="_$$$quote($p(%parameter("DISPLAYLIST"),sep,i))_" "_$$$quote($p(%parameter("VALUELIST"),sep,i)))
	. $$$GENERATE(" Q """"")
	$$$GENERATE("	Q $s(%val="""":"""",$zu(115,13)&&(%val=$c(0)):"""",1:+$in(%val,"""_%parameter("FORMAT")_""",%val))")
	QUIT $$$OK
]]></Implementation>
</Method>

<Method name="Normalize">
<Description><![CDATA[
Converts <var>%val</var> to a normalized value.]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>%val:%CacheString</FormalSpec>
<ReturnType>%Integer</ReturnType>
<ServerOnly>1</ServerOnly>
<Implementation><![CDATA[	Quit $select($zu(115,13)&&(%val=$c(0)):"",1:%val\1)
]]></Implementation>
</Method>

<Method name="IsValid">
<Description><![CDATA[
Tests if the logical value <var>%val</var>, which is an integer value, is valid.
The validation is based on the class parameter settings used
for the class attribute this data type is associated with.
In this case, <a href="#MAXVAL">MAXVAL</a> and <a href="#MINVAL">MINVAL</a>.]]></Description>
<ClassMethod>1</ClassMethod>
<CodeMode>generator</CodeMode>
<FormalSpec>%val:%CacheString</FormalSpec>
<ReturnType>%Status</ReturnType>
<ServerOnly>0</ServerOnly>
<Implementation><![CDATA[
	#; If subclass has a IsValidDT then call this
	If %property'="",$$$comSubMemberDefined(%class,$$$cCLASSproperty,%property,$$$cPROPmethod,"IsValidDT") {
		$$$GENERATE("	Quit $s(##class("_%class_")."_%property_"IsValidDT(%val):1,1:$$$ERROR($$$DTFailure,%val))")
		Quit $$$OK
	}
	i %parameter("VALUELIST")'="" d   QUIT $$$OK
	. s sep=$e(%parameter("VALUELIST")) ;for now
	. $$$GENERATE("	Q $s(%val'["""_sep_"""&&("_$$$quote(%parameter("VALUELIST")_sep)_"[("""_sep_"""_%val_"""_sep_""")):$$$OK,1:$$$ERROR($$$DTValueList,%val,"_$$$quote(%parameter("VALUELIST"))_"))")
	s str="$isvalidnum(%val,0,"_%parameter("MINVAL")_","_%parameter("MAXVAL")_")"
	If %parameter("MAXVAL")="",%parameter("MINVAL")="" $$$GENERATE("	Quit $select($zu(115,13)&&(%val=$c(0)):1,"_str_":1,1:$$$ERROR($$$DTNotNum,%val))") Quit $$$OK
	s code="$select($zu(115,13)&&(%val=$c(0)):1,"_str_":1,'$isvalidnum(%val):$$$ERROR($$$DTNotNum,%val)"
	If %parameter("MINVAL")'="" {
		If %parameter("MAXVAL")="" {
			Set code=code_",1:$$$ERROR($$$DTMinVal,%val,"_%parameter("MINVAL")_"))"
		} Else {
			Set code=code_",%val<"_%parameter("MINVAL")_":$$$ERROR($$$DTMinVal,%val,"_%parameter("MINVAL")_"),1:$$$ERROR($$$DTMaxVal,%val,"_%parameter("MAXVAL")_"))"
		}
	} Else {
		Set code=code_",1:$$$ERROR($$$DTMaxVal,%val,"_%parameter("MAXVAL")_"))"
	}
	$$$GENERATE("	Quit "_code)
	QUIT $$$OK
]]></Implementation>
</Method>

<Method name="LogicalToDisplay">
<Description><![CDATA[
Converts the value of <var>%val</var>, which is in logical integer format, into a display string.
The formatting is based on the value of the FORMAT parameter.
<p>Returns the formatted value of <var>%val</var>.]]></Description>
<ClassMethod>1</ClassMethod>
<CodeMode>generator</CodeMode>
<FormalSpec>%val:%Integer</FormalSpec>
<ReturnType>%String</ReturnType>
<ServerOnly>0</ServerOnly>
<Implementation><![CDATA[
	i %parameter("FORMAT")'="",'$$CheckNumericFormat^%occCheck(%parameter("FORMAT")) quit $$$ERROR($$$InorrectIntegerFormat,%class,%property,%method)
	i %parameter("VALUELIST")'="",%parameter("DISPLAYLIST")'="" d  QUIT $$$OK
	. s sep=$e(%parameter("VALUELIST"))
	. s len=$l(%parameter("VALUELIST"),sep)
	. f i=2:1:$l(%parameter("VALUELIST"),sep) $$$GENERATE(" Q:%val="_$$$quote($p(%parameter("VALUELIST"),sep,i))_" "_$$$quote($p(%parameter("DISPLAYLIST"),sep,i)))
	. $$$GENERATE(" Q """"")
	i %parameter("FORMAT")="" $$$GENERATE("	Q %val") QUIT $$$OK
	$$$GENERATE("	Q $s(%val="""":"""",1:$fn(%val,"""_%parameter("FORMAT")_"""))")
	QUIT $$$OK
]]></Implementation>
</Method>
</Class>


<Class name="%Library.ListOfDataTypes">
<Description><![CDATA[
The <CLASS>%ListOfDataTypes</CLASS> class represents a list of literal (i.e., data type) values.
each of which is associated with a numeric position in the list. 
The first element in the list is stored at position 1. 

<p>Refer to <CLASS>%Collection.AbstractList</CLASS> for a description of 
the varous array methods.
These classes can be used 'stand alone' to store a collection.]]></Description>
<ClassType>serial</ClassType>
<Modified>1</Modified>
<OdbcType>VARCHAR</OdbcType>
<StorageStrategy>Custom</StorageStrategy>
<Super>%Collection.AbstractListOfDT,%SerialObject</Super>
<System>2</System>
<TimeChanged>62935,42623</TimeChanged>
<TimeCreated>59241,41415</TimeCreated>
<Inheritance>right</Inheritance>

<Parameter name="ELEMENTTYPE">
<Description>
The type (classname:propertyname) of the elements stored in the collection.</Description>
</Parameter>

<Property name="ElementType">
<Description>
The type (classname:propertyname) of the elements stored in the collection.</Description>
<Type>%CacheString</Type>
<InitialExpression>..#ELEMENTTYPE</InitialExpression>
</Property>

<Property name="Data">
<Description><![CDATA[
<var>Data</var> is a private property used to hold the contents of the list.]]></Description>
<Type>%CacheString</Type>
<MultiDimensional>1</MultiDimensional>
</Property>

<Property name="Size">
<Description><![CDATA[
<var>Size</var> is the number of elements contained in the list.]]></Description>
<Type>%Integer</Type>
<InitialExpression>0</InitialExpression>
</Property>

<Method name="SizeSet">
<FormalSpec>newvalue:%Integer</FormalSpec>
<Private>1</Private>
<ReturnType>%Status</ReturnType>
</Method>

<Method name="Clear">
<Description><![CDATA[
Clears the contents of the list.
<p>Returns a <CLASS>%Status</CLASS> value indicating success or failure.]]></Description>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Kill i%Data Set i%Size=0
	Quit $$$OK
]]></Implementation>
</Method>

<Method name="Count">
<Description>
Returns the number of elements contained in the list.</Description>
<Final>1</Final>
<CodeMode>expression</CodeMode>
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[i%Size
]]></Implementation>
</Method>

<Method name="Find">
<Description><![CDATA[
Starting from, and including, position <var>key</var>, <b>Find</b> finds 
the next element in the list with value equal to <var>element</var>. 
If <var>key</var> is a null string, <b>Find</b> starts at the beginning 
of the list.

<p><b>Find</b> returns the position of the found element or 
null string ("") if no element was found.]]></Description>
<FormalSpec>element:%String,key:%Integer</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	Set found="",k=$get(key,1)\1 Set:k<1 k=1
	For k=k:1:i%Size If i%Data(k)=element Set found=k Quit
	Quit found
]]></Implementation>
</Method>

<Method name="GetNext">
<Description><![CDATA[
Finds and returns the value of the element at the position after <var>key</var> 
in the list. If <var>key</var> is a null string (""), it returns 
the value of the first element in the list.

<p>The value of <var>key</var>, which is passed by reference, is updated to the position 
value of the returned element or null string ("") if <var>key</var> 
is at the end of the list.]]></Description>
<FormalSpec><![CDATA[&key:%Integer]]></FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	Set key=$select($get(key)+1>i%Size:"",1:$get(key)+1)
	Quit $select(key="":"",1:..GetAt(key))
]]></Implementation>
</Method>

<Method name="GetPrevious">
<Description><![CDATA[
Finds and returns the value of the element at the position before <var>key</var> 
in the list. If <var>key</var> is a null string (""), it returns 
the value of the last element in the list.

<p>The value of <var>key</var>, which is passed by reference, is updated to the position 
value of the returned element or null string ("") 
if <var>key</var> is at the beginning of the list.]]></Description>
<FormalSpec><![CDATA[&key:%Integer]]></FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	Set key=$select($get(key)="":i%Size,key-1<1:"",1:key-1)
	Quit $select(key="":"",1:..GetAt(key))
]]></Implementation>
</Method>

<Method name="Insert">
<Description><![CDATA[
Inserts an element with value <var>element</var> at the end of the list.

<p>Returns a <CLASS>%Status</CLASS> value indicating success or failure.]]></Description>
<FormalSpec>element:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set i%Size=i%Size+1,i%Data(i%Size)=element
	Quit $$$OK
]]></Implementation>
</Method>

<Method name="InsertAt">
<Description><![CDATA[
Inserts an element with value <var>element</var> at position <var>key</var>.

<p>To make room for the new element, the elements previously at or following position 
<var>key</var> are moved up by one position.
<p><var>key</var> must be in the following range: 
<blockquote><code>
1 &lt= key &lt= Count() + 1
</blockquote></code>

Returns a <CLASS>%Status</CLASS> value indicating success or failure.]]></Description>
<FormalSpec>element:%String,key:%Integer</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set key=+key
	If key<1||(key>(i%Size+1)) Quit $$$ERROR($$$CollectionKeyInvalid,key)
	For i=i%Size:-1:key Set i%Data(i+1)=i%Data(i)
	Set i%Data(key)=element,i%Size=i%Size+1
	Quit $$$OK
]]></Implementation>
</Method>

<Method name="InsertList">
<Description><![CDATA[
Inserts a list with value <var>inslist</var> at the end of the list.

<p>Returns a <CLASS>%Status</CLASS> value indicating success or failure.]]></Description>
<FormalSpec>inslist:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	For i=1:1:$listlength(inslist) Set i%Size=i%Size+1,i%Data(i%Size)=$listget(inslist,i)
	Quit $$$OK
]]></Implementation>
</Method>

<Method name="InsertOrdered">
<Description><![CDATA[
Inserts an element with value <var>element</var> into the list at the correct ordered 
position. The elements in the list are shifted to accommodate the new element as necessary.

<p>Returns a <CLASS>%Status</CLASS> value indicating success or failure.]]></Description>
<FormalSpec>element:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set count=i%Size+1
	For i=1:1:count Quit:(i=count)||(i%Data(i)]element)
	Quit ..InsertAt(element,i)
]]></Implementation>
</Method>

<Method name="Next">
<Description><![CDATA[
Finds and returns the index value of the element at the location following <var>key</var> in the list. 
If key is a null string (""), then <b>Next</b> returns the position of the first element in the list (1).]]></Description>
<Final>1</Final>
<CodeMode>expression</CodeMode>
<FormalSpec>key:%Integer=0</FormalSpec>
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[$select(key+1>i%Size:"",1:key+1)
]]></Implementation>
</Method>

<Method name="Previous">
<Description><![CDATA[
Finds and returns the index value of the element at the location preceding <var>key</var> in the list. 
If key is a null string (""), then <b>Next</b> returns the position of the last element in the list.]]></Description>
<Final>1</Final>
<CodeMode>expression</CodeMode>
<FormalSpec>key:%Integer=0</FormalSpec>
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[$select(key="":i%Size,key-1<1:"",1:key-1)
]]></Implementation>
</Method>

<Method name="RemoveAt">
<Description><![CDATA[
Removes the element at position <var>key</var> in the list. 
The elements following position <var>key</var> are moved to fill in the resulting gap.

<p><b>RemoveAt</b> returns the value of the removed element or null string ("") 
if no element was removed.]]></Description>
<FormalSpec>key:%Integer</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	If key=""||($data(i%Data(key))=0) Quit ""
	Set removed=i%Data(key)
	For i=key:1:i%Size-1 Set i%Data(i)=i%Data(i+1)
	Kill i%Data(i%Size) Set i%Size=i%Size-1
	Quit removed
]]></Implementation>
</Method>

<Method name="SetAt">
<Description><![CDATA[
Sets the value of the element at position <var>key</var> to <var>element</var>.
<p>Returns a <CLASS>%Status</CLASS> value indicating success or failure.]]></Description>
<FormalSpec>element:%String,key:%Integer</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	If key=""||($data(i%Data(key))=0) Quit $$$ERROR($$$CollectionKeyInvalid,key)
	Set i%Data(key)=element
	Quit $$$OK
]]></Implementation>
</Method>

<Method name="%ValidateObject">
<FormalSpec>force:%Integer</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 Set iv=$$$OK
 If i%ElementType="" Quit $$$OK
 Set class=$piece(i%ElementType,":",1),prop=$piece(i%ElementType,":",2)
 For i=1:1:i%Size Set iv=$classmethod(class,prop_"IsValid",i%Data(i)) Quit:$$$ISERR(iv)
 Quit iv
]]></Implementation>
</Method>

<Method name="BuildValueArray">
<Description><![CDATA[
Constructs array(key)=value for each element in the serialval value.
<p>Returns a <CLASS>%Status</CLASS> value indicating success or failure.]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>serialized:%Binary,array:%Binary</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set ptr=0,i=1
	While $listnext(serialized,ptr,item) {
		Set array(i)=item,i=i+1
	}
	Quit $$$OK
]]></Implementation>
</Method>

<Method name="%GetSerial">
<FormalSpec>force:%Integer=0</FormalSpec>
<Private>1</Private>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	Set list=""
	For i=1:1:i%Size Set list=list_$listbuild(i%Data(i))
	Quit list
]]></Implementation>
</Method>

<Method name="%SetSerial">
<FormalSpec>serialized:%String</FormalSpec>
<Private>1</Private>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Kill i%Data
	Set ptr=0,i=1
	While $listnext(serialized,ptr,item) {
		Set i%Data(i)=$get(item),i=i+1
	}
	Set i%ElementType="",i%Size=i-1
	Quit $$$OK
]]></Implementation>
</Method>

<Method name="LogicalToOdbc">
<Description><![CDATA[
Converts the serial state of this list object to a delimited string 
using the value of the <var>ODBCDELIMITER</var> parameter as a delimiter.]]></Description>
<ClassMethod>1</ClassMethod>
<CodeMode>generator</CodeMode>
<FormalSpec>val:%String=""</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	Set odbcdelim=%parameter("ODBCDELIMITER")
	#; Quote the delimiter. If odbcdelimiter was not specified, default to ","
	Set odbcdelim=""""_$select(odbcdelim'="":odbcdelim,1:",")_""""
	$$$GENERATE("	Quit ##class(%Collection.ListOfDT).LogicalToOdbc(val,"_odbcdelim_")")
	Quit $$$OK
]]></Implementation>
</Method>

<Method name="OdbcToLogical">
<Description><![CDATA[
Converts the value of an incoming delimited string to a serialized state 
using the value of the <var>ODBCDELIMITER</var> parameter as a delimiter.]]></Description>
<ClassMethod>1</ClassMethod>
<CodeMode>generator</CodeMode>
<FormalSpec>val:%String=""</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	Set odbcdelim=%parameter("ODBCDELIMITER")
	#; Quote the delimiter. If odbcdelimiter was not specified, default to ","
	Set odbcdelim=""""_$select(odbcdelim'="":odbcdelim,1:",")_""""
	$$$GENERATE("	Quit ##class(%Collection.ListOfDT).OdbcToLogical(val,"_odbcdelim_")")
	Quit $$$OK
]]></Implementation>
</Method>

<Method name="LogicalToDisplay">
<Description><![CDATA[
Converts the serial state of this list object to a delimited string 
using the value of the <var>%delim</var> argument as a delimiter.]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>val:%String="",delim:%String=$char(13,10)</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[	Quit $lts(val,delim)
]]></Implementation>
</Method>

<Method name="DisplayToLogical">
<Description><![CDATA[
Converts the value of an incoming delimited string to a serialized state 
using the value of the <var>delim</var> argument as a delimiter.]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>val:%String="",delim:%String=$char(13,10)</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[	Quit $lfs(val,delim)
]]></Implementation>
</Method>

<Method name="GetAt">
<Description><![CDATA[
Finds and returns the value of the element at position 
<var>key</var> in the list.

<p><b>GetAt</b> returns the value of the element at location <var>key</var> 
or null string ("") if no element is found.]]></Description>
<Final>1</Final>
<CodeMode>expression</CodeMode>
<FormalSpec>key:%Integer=0</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[$get(i%Data(key))
]]></Implementation>
</Method>

<Storage name="Custom">
<Type>%CompleteCustomStorage</Type>
<StreamLocation>^%Library.ListOfDataTypesS</StreamLocation>
</Storage>
</Class>


<Class name="%Library.String">
<Description><![CDATA[
The <b>%String</b> data type class represents a string.
<p>The logical value of the <b>%String</b> data type is a string.]]></Description>
<IncludeGenerator>%occUtility</IncludeGenerator>
<Super>%DataType</Super>
<System>1</System>
<TimeChanged>62935,42623</TimeChanged>
<TimeCreated>59241,41416</TimeCreated>

<Parameter name="COLLATION">
<Description>
The default collation value used for this data type.</Description>
<Constraint>,ALPHAUP,EXACT,MINUS,MVR,PLUS,SPACE,SQLSTRING,SQLUPPER,STRING,TRUNCATE,UPPER,</Constraint>
<Flags>ENUMEDIT</Flags>
</Parameter>

<Parameter name="MAXLEN">
<Description>
The maximum number of characters the string can contain.</Description>
<Type>INTEGER</Type>
<Default>50</Default>
</Parameter>

<Parameter name="MINLEN">
<Description>
The minimum number of characters the string can contain.</Description>
<Type>INTEGER</Type>
</Parameter>

<Parameter name="PATTERN">
<Description><![CDATA[
A pattern which the string should match.
<p>The value of <var>PATTERN</var> should be a valid
<i>Cach&eacute</i> pattern match expression.]]></Description>
</Parameter>

<Parameter name="TRUNCATE">
<Description>
Determines whether to truncate the string to MAXLEN characters.</Description>
<Type>BOOLEAN</Type>
<Default>0</Default>
</Parameter>

<Parameter name="VALUELIST">
<Description><![CDATA[
Used for enumerated (multiple-choice) attributes.
<var>VALUELIST</var> is either a null string ("") or a delimiter
separated list (where the delimiter is the first character) of logical values.
If a non-null value is present, then the attribute is restricted to values
in the list, and the validation code simply checks to see if the value is in the list.]]></Description>
</Parameter>

<Parameter name="DISPLAYLIST">
<Description><![CDATA[
Used for enumerated (multiple-choice) attributes.
Used in conjunction with the <a href="#VALUELIST">VALUELIST</a> parameter for enumerated
(multiple-choice) attributes. <var>DISPLAYLIST</var>, if not null,
represents the display values for the attribute corresponding with
the logical values listed in <var>VALUELIST</var>.
<p>The display values are returned by the <a href="#LogicalToDisplay">LogicalToDisplay</a> method.]]></Description>
</Parameter>

<Parameter name="XMLLISTPARAMETER">
<Description>
Used to specify the name of the parameter which contains the enumeration list for XML values.
The parameter which ocntains the list must be in the format used for VALUELIST and DISPLAYLIST.
The default is VALUELIST.</Description>
</Parameter>

<Parameter name="CONTENT">
<Description><![CDATA[
XML element content "MIXED" for mixed="true" and "STRING" or "ESCAPE" for mixed="false".
If CONTENT="STRING" (default) XML special characters are put in a CDATA section during XML export.
If CONTENT="ESCAPE" XML special characters are escaped during XML export.
If CONTENT="ESCAPE-C14N" XML special characters are escaped during XML export using 
the translate table, XMLC, specified for XML Canonicalizaton.
The main difference is that CR is escaped as &amp;#13; ]]></Description>
<Constraint>MIXED,STRING,ESCAPE,ESCAPE-C14N</Constraint>
<Default>STRING</Default>
<Flags>ENUM</Flags>
</Parameter>

<Parameter name="ESCAPE">
<Description>
Controls the translate table used to escape content when CONTENT="MIXED" is specified.</Description>
<Constraint>HTML,XML</Constraint>
<Default>XML</Default>
<Flags>ENUM</Flags>
</Parameter>

<Parameter name="XSDTYPE">
<Description>
Declares the XSD type used when projecting XML Schemas.</Description>
<Default>string</Default>
</Parameter>

<Method name="XSDToLogical">
<Description>
If XMLLISTPARAMETER is specified, XSDToLogical is generated which imports using the list specified by XMLLISTPARAMETER.</Description>
<ClassMethod>1</ClassMethod>
<CodeMode>generator</CodeMode>
<FormalSpec>%val:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<ServerOnly>1</ServerOnly>
<Implementation><![CDATA[
	Set %code=0
	Set xmllist=$get(%parameter("XMLLISTPARAMETER"))
	If $case(xmllist,"":0,"VALUELIST":0,:1),%parameter("VALUELIST")'="",$get(%parameter(xmllist))'="",($$$getClassType(%class)=$$$cCLASSCLASSTYPEDATATYPE) || $$$comMemberKeyGet(%class,$$$cCLASSparameter,"XMLENABLED",$$$cPARAMdefault) {
		s sep=$e(%parameter(xmllist))
		if $l(%parameter("VALUELIST"))+$l(%parameter(xmllist))<4000 {
			set line="$case($select(%val=$c(0):"""",1:%val)"
			f i=2:1:$l(%parameter(xmllist),sep) s line=line_","_$$$quote($p(%parameter(xmllist),sep,i))_":"_$$$quote($p(%parameter("VALUELIST"),sep,i))
			$$$GENERATE("	Q "_line_",:"""")")
		}
		else {
			$$$GENERATE("set v=$select(%val=$c(0):"""",1:%val)")
			set line=""
			f i=2:1:$l(%parameter(xmllist),sep) { s line=line_" q:v="_$$$quote($p(%parameter(xmllist),sep,i))_" "_$$$quote($p(%parameter("VALUELIST"),sep,i)) if $l(line)>4000 { $$$GENERATE(line) s line="" } }
			if line'="" { $$$GENERATE(line_"	Q v") } else { $$$GENERATE("	Q """"") }
		}
	}
	Quit $$$OK
]]></Implementation>
</Method>

<Method name="LogicalToXSD">
<Description>
If XMLLISTPARAMETER is specified, XSDToLogical is generated which exports using the list specified by XMLLISTPARAMETER.</Description>
<ClassMethod>1</ClassMethod>
<CodeMode>generator</CodeMode>
<FormalSpec>%val:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<ServerOnly>1</ServerOnly>
<Implementation><![CDATA[
	Set %code=0
	Set xmllist=$get(%parameter("XMLLISTPARAMETER"))
	If $case(xmllist,"":0,"VALUELIST":0,:1),%parameter("VALUELIST")'="",$get(%parameter(xmllist))'="",($$$getClassType(%class)=$$$cCLASSCLASSTYPEDATATYPE) || $$$comMemberKeyGet(%class,$$$cCLASSparameter,"XMLENABLED",$$$cPARAMdefault) {
		s sep=$e(%parameter("VALUELIST"))
		if $l(%parameter("VALUELIST"))+$l(%parameter(xmllist))<4000 {
			set line="$case(%val"
			f i=2:1:$l(%parameter("VALUELIST"),sep) s line=line_","_$$$quote($p(%parameter("VALUELIST"),sep,i))_":"_$$$quote($p(%parameter(xmllist),sep,i))
			$$$GENERATE("	Q "_line_",:"""")")
		}
		else {
			set line=""
			f i=2:1:$l(%parameter("VALUELIST"),sep) { s line=line_"	Q:%val="_$$$quote($p(%parameter("VALUELIST"),sep,i))_" "_$$$quote($p(%parameter(xmllist),sep,i)) if $l(line)>4000 { $$$GENERATE(line) s line="" } }
			if line'="" { $$$GENERATE(line_"	Q %val") } else { $$$GENERATE("	Q """"") }
		}
	}
	Quit $$$OK
]]></Implementation>
</Method>

<Method name="DisplayToLogical">
<Description><![CDATA[
Converts the input value <var>%val</var>, which is a string, into the logical string format.
Returns the logical value of the input string <var>%val</var>.]]></Description>
<ClassMethod>1</ClassMethod>
<CodeMode>generator</CodeMode>
<FormalSpec>%val:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<ServerOnly>0</ServerOnly>
<Implementation><![CDATA[
	s %code=0
	if %parameter("VALUELIST")'="",%parameter("DISPLAYLIST")'="" {
		s sep=$e(%parameter("DISPLAYLIST"))
		if $l(%parameter("VALUELIST"))+$l(%parameter("DISPLAYLIST"))<4000 {
			set line="$case(%val"
			f i=2:1:$l(%parameter("DISPLAYLIST"),sep) s line=line_","_$$$quote($p(%parameter("DISPLAYLIST"),sep,i))_":"_$$$quote($p(%parameter("VALUELIST"),sep,i))
			$$$GENERATE("	Q "_line_",:"""")")
		}
		else {
			set line=""
			f i=2:1:$l(%parameter("DISPLAYLIST"),sep) { s line=line_" q:%val="_$$$quote($p(%parameter("DISPLAYLIST"),sep,i))_" "_$$$quote($p(%parameter("VALUELIST"),sep,i)) if $l(line)>4000 { $$$GENERATE(line) s line="" } }
			if line'="" { $$$GENERATE(line_"	Q %val") } else { $$$GENERATE("	Q """"") }
		}
		QUIT $$$OK
	}
	$$$GENERATE("	Quit %val")
	QUIT $$$OK
]]></Implementation>
</Method>

<Method name="Normalize">
<Description><![CDATA[
Truncates value <var>%val</var> to <a href="#MAXLEN">MAXLEN</a>, characters.]]></Description>
<ClassMethod>1</ClassMethod>
<CodeMode>generator</CodeMode>
<FormalSpec>%val:%CacheString</FormalSpec>
<ReturnType>%String</ReturnType>
<ServerOnly>1</ServerOnly>
<Implementation><![CDATA[
	s str=""
	s code="%val"
	i %parameter("TRUNCATE"),%parameter("MAXLEN")'="" s code="$e(%val,1,"_(+%parameter("MAXLEN"))_")"
	$$$GENERATE("	Q "_code)
	QUIT $$$OK
]]></Implementation>
</Method>

<Method name="IsValid">
<Description><![CDATA[
Tests if the logical value <var>%val</var>, which is a string, is valid.
The validation is based on the class parameter settings used for the class attribute this data type is associated with.
In this case, <a href="#MINLEN">MINLEN</a>, <a href="#MAXLEN">MAXLEN</a>, <a href="#VALUELIST">VALUELIST</a>, and <a href="#PATTERN">PATTERN</a>.]]></Description>
<ClassMethod>1</ClassMethod>
<CodeMode>generator</CodeMode>
<FormalSpec>%val:%CacheString</FormalSpec>
<ReturnType>%Status</ReturnType>
<ServerOnly>0</ServerOnly>
<Implementation><![CDATA[
	#; If subclass has a IsValidDT then call this
	If %property'="",$$$comSubMemberDefined(%class,$$$cCLASSproperty,%property,$$$cPROPmethod,"IsValidDT") {
		$$$GENERATE("	Q $select(##class("_%class_")."_%property_"IsValidDT(%val):1,1:$$$ERROR($$$DTFailure,%val))")
		Quit $$$OK
	}
		#; Validate MAXLEN parameter - either NULL, "", or a positive integer
	If ($Get(%parameter("MAXLEN")) '= "") && (('$isvalidnum(%parameter("MAXLEN"),,1)) || (((+%parameter("MAXLEN")\1)) '= +%parameter("MAXLEN"))) { Quit $$$ERROR($$$DatatypeParameterIntegerNotPositive,%class_"::"_%property,"MAXLEN",%parameter("MAXLEN")) }
	s %code=0
	i %parameter("VALUELIST")'="" d   QUIT $$$OK
	. s sep=$e(%parameter("VALUELIST")) ;for now
	. $$$GENERATE("	Q $s(%val'["""_sep_"""&&("_$$$quote(%parameter("VALUELIST")_sep)_"[("""_sep_"""_$select(%val=$c(0):"""",1:%val)_"""_sep_""")):$$$OK,1:$$$ERROR($$$DTValueList,%val,"_$$$quote(%parameter("VALUELIST"))_"))")
	s str="",err=""
	If %parameter("MINLEN")'="" {
		Set str=str_"($s(%val'=$c(0):$l(%val),1:0)'<"_(+%parameter("MINLEN"))_")"
		If %parameter("PATTERN")="",%parameter("MAXLEN")=""||(%parameter("TRUNCATE")) {
			Set err="1"
		} Else {
			Set err="$s(%val'=$c(0):$l(%val),1:0)<"_(+%parameter("MINLEN"))
		}
		Set err=err_":$$$ERROR($$$DTMinLen,%val,"_(+%parameter("MINLEN"))_")"
	}
	If '%parameter("TRUNCATE"),%parameter("MAXLEN")'="" {
		Set str=str_"&&($l(%val)'>"_(+%parameter("MAXLEN"))_")"
		If %parameter("PATTERN")="" {
			Set err=err_$select(err="":"",1:",")_"1"
		} Else {
			Set err=err_$select(err="":"",1:",")_"$l(%val)>"_(+%parameter("MAXLEN"))
		}
		Set err=err_":$$$ERROR($$$DTMaxLen,%val,"_(+%parameter("MAXLEN"))_")"
	}
	If %parameter("PATTERN")'="" Set str=str_"&&(%val?"_%parameter("PATTERN")_")",err=err_$select(err="":"",1:",")_"1:$$$ERROR($$$DTPattern,%val,"_$$$quote(%parameter("PATTERN"))_")"
	i str="" $$$GENERATE("	Q 1") QUIT $$$OK
	i $e(str,1,2)="&&" s str=$e(str,3,*)
	$$$GENERATE("	Q $s("_str_":1,"_err_")")
	QUIT $$$OK
]]></Implementation>
</Method>

<Method name="LogicalToDisplay">
<Description><![CDATA[
Converts the value of <var>%val</var>, which is in logical format, into a display string. Removes all the null characters from the string.
<p>Returns the string value of <var>%val</var>.]]></Description>
<ClassMethod>1</ClassMethod>
<CodeMode>generator</CodeMode>
<FormalSpec>%val:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<ServerOnly>0</ServerOnly>
<Implementation><![CDATA[
	s %code=0
	if %parameter("VALUELIST")'="",%parameter("DISPLAYLIST")'="" {
		s sep=$e(%parameter("VALUELIST"))
		if $l(%parameter("VALUELIST"))+$l(%parameter("DISPLAYLIST"))<4000 {
			set line="$case(%val"
			f i=2:1:$l(%parameter("VALUELIST"),sep) s line=line_","_$$$quote($p(%parameter("VALUELIST"),sep,i))_":"_$$$quote($p(%parameter("DISPLAYLIST"),sep,i))
			$$$GENERATE(" Q "_line_",:"""")")
		}
		else {
			set line=""
			f i=2:1:$l(%parameter("VALUELIST"),sep) { s line=line_" Q:%val="_$$$quote($p(%parameter("VALUELIST"),sep,i))_" "_$$$quote($p(%parameter("DISPLAYLIST"),sep,i)) if $l(line)>4000 { $$$GENERATE(line) s line="" } }
			if line'="" { $$$GENERATE(line_" Q %val") } else { $$$GENERATE(" Q """"") }
		}
		QUIT $$$OK
	}
	$$$GENERATE("	Q $tr(%val,$c(0),"""")")
	QUIT $$$OK
]]></Implementation>
</Method>

<Method name="LogicalToOdbc">
<Description><![CDATA[
Converts the value of <var>%val</var>, which is in logical format, into a Odbc string. This only truncates a single field value to 32749 characters if MAXLEN is longer than 32749.
<p>Returns the string value of <var>%val</var>.]]></Description>
<ClassMethod>1</ClassMethod>
<CodeMode>generator</CodeMode>
<FormalSpec>%val:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<ServerOnly>1</ServerOnly>
<Implementation><![CDATA[
    set code="%val"
    if %parameter("MAXLEN")'="" { set len=%parameter("MAXLEN") set:len>16374 code="$s($d(%protocol)&&($g(%protocol)<47):$extract(%val,1,16374),1:%val)" }
    $$$GENERATE("	Q "_code)
    QUIT $$$OK
]]></Implementation>
</Method>
</Class>


<Class name="%ZEN.Component.vgroup">
<Description>
A group with a default vertical layout.</Description>
<Super>group</Super>
<System>3</System>
<TimeChanged>62935,42635</TimeChanged>
<TimeCreated>60128,66943.329735</TimeCreated>

<Parameter name="DEFAULTLAYOUT">
<Default>vertical</Default>
</Parameter>
</Class>


<Project name="CP" LastModified="2013-09-16 18:18:30.542576" Target="##class(User.IW).MixCSs($LB(55,56,57,58,59,60))" TargetType="2">
  <Items>
    <ProjectItem name="User.CP" type="CLS"></ProjectItem>
    <ProjectItem name="User.CPConcept" type="CLS"></ProjectItem>
    <ProjectItem name="User.CPCondition" type="CLS"></ProjectItem>
    <ProjectItem name="User.CPFeature" type="CLS"></ProjectItem>
    <ProjectItem name="User.CPFunction" type="CLS"></ProjectItem>
    <ProjectItem name="User.CPLexeme" type="CLS"></ProjectItem>
    <ProjectItem name="User.CPRelationships" type="CLS"></ProjectItem>
    <ProjectItem name="User.CPSemantics" type="CLS"></ProjectItem>
    <ProjectItem name="User.CPTest" type="CLS"></ProjectItem>
    <ProjectItem name="User.CS" type="CLS"></ProjectItem>
    <ProjectItem name="User.Completion" type="CLS"></ProjectItem>
    <ProjectItem name="User.ConSubject" type="CLS"></ProjectItem>
    <ProjectItem name="User.ConTheme" type="CLS"></ProjectItem>
    <ProjectItem name="User.ContextNew" type="CLS"></ProjectItem>
    <ProjectItem name="User.Curriculum" type="CLS"></ProjectItem>
    <ProjectItem name="User.Department" type="CLS"></ProjectItem>
    <ProjectItem name="User.IW" type="CLS"></ProjectItem>
    <ProjectItem name="User.Learner" type="CLS"></ProjectItem>
    <ProjectItem name="User.Person" type="CLS"></ProjectItem>
    <ProjectItem name="User.ReferenceModel" type="CLS"></ProjectItem>
    <ProjectItem name="User.StCategory" type="CLS"></ProjectItem>
    <ProjectItem name="User.Statistics" type="CLS"></ProjectItem>
    <ProjectItem name="User.Subject" type="CLS"></ProjectItem>
    <ProjectItem name="User.Teacher" type="CLS"></ProjectItem>
    <ProjectItem name="User.Tests" type="PKG"></ProjectItem>
    <ProjectItem name="User.Theme" type="CLS"></ProjectItem>
    <ProjectItem name="Web.Components.Basic" type="CLS"></ProjectItem>
    <ProjectItem name="Web.Components.Editable" type="CLS"></ProjectItem>
    <ProjectItem name="Web.Components.EditableNew" type="CLS"></ProjectItem>
    <ProjectItem name="Web.Components.Evaluable" type="CLS"></ProjectItem>
    <ProjectItem name="Web.Components.Simple" type="CLS"></ProjectItem>
    <ProjectItem name="Web.Curriculum" type="CLS"></ProjectItem>
    <ProjectItem name="Web.CurriculumTeacher" type="CLS"></ProjectItem>
    <ProjectItem name="Web.EditSubject" type="CLS"></ProjectItem>
    <ProjectItem name="Web.EditTheme" type="CLS"></ProjectItem>
    <ProjectItem name="Web.IndependentWork" type="CLS"></ProjectItem>
    <ProjectItem name="Web.Menu" type="CLS"></ProjectItem>
    <ProjectItem name="Web.Pages" type="CLS"></ProjectItem>
    <ProjectItem name="Web.RegistrationMVC" type="CLS"></ProjectItem>
    <ProjectItem name="Web.SupervisingWork" type="CLS"></ProjectItem>
    <ProjectItem name="Web.TeacherProfile" type="CLS"></ProjectItem>
    <ProjectItem name="Web.Tests.CPMVC" type="CLS"></ProjectItem>
    <ProjectItem name="Web.Tests.TComponent" type="CLS"></ProjectItem>
    <ProjectItem name="Web.Tests.TTemplate" type="CLS"></ProjectItem>
    <ProjectItem name="Web.Theme" type="CLS"></ProjectItem>
    <ProjectItem name="Web.Verification" type="CLS"></ProjectItem>
    <ProjectItem name="Web.Wizard" type="CLS"></ProjectItem>
  </Items>
  <WatchVariables>
    <WatchVariable Variable="tResult" Pane="1"></WatchVariable>
  </WatchVariables>
</Project>


<Class name="User.CP">
<Description><![CDATA[
Когнитивный прототип (Структура вида: Понятие<->Семантическая связь<->Список дочерних элементов)]]></Description>
<SqlTableName>CP</SqlTableName>
<Super>%Persistent,%Populate,%XML.Adaptor,%ZEN.DataModel.ObjectDataModel</Super>
<TimeChanged>63081,39161.229973</TimeChanged>
<TimeCreated>62794,46713.381783</TimeCreated>

<UDLText name="T">
<Content><![CDATA[
// ------------------СТРУКТУРА КП---------------------------

]]></Content>
</UDLText>

<Property name="Concept">
<Description>
Учебное понятие</Description>
<Type>CPConcept</Type>
<Required>1</Required>
</Property>

<Property name="Link">
<Description>
Тип семантических отношений</Description>
<Type>CPSemantics</Type>
<Required>1</Required>
</Property>

<Property name="Relations">
<Description>
Список дочерних элементов</Description>
<Type>CPRelationships</Type>
<Collection>list</Collection>
<Required>1</Required>
</Property>

<Property name="CPHash">
<Description>
Хешированная копия данного КП</Description>
<Type>%String</Type>
<Parameter name="MAXLEN" value="1000"/>
</Property>

<UDLText name="T">
<Content><![CDATA[
// ----------------------КОНЕЦ-------------------------------

]]></Content>
</UDLText>

<Property name="Author">
<Description>
Автор данного КП</Description>
<Type>Teacher</Type>
</Property>

<Property name="IfCSsExist">
<Description>
Получен ли уже набор CS (Case Studies) из этого КП</Description>
<Type>%Boolean</Type>
<InitialExpression>0</InitialExpression>
</Property>

<Property name="IfActive">
<Description>
КП может быть активным и пассивным. Пассивные (которые были усовершенствованы) КП не отображаются в текущей эталонной модели курса и не участвуют в СРС студента</Description>
<Type>%Boolean</Type>
<InitialExpression>1</InitialExpression>
</Property>

<Property name="CSs">
<Description>
Набор Case Studies которые следуют (генерируются) из этого КП</Description>
<Type>User.CS</Type>
<Cardinality>many</Cardinality>
<Inverse>CP</Inverse>
<Relationship>1</Relationship>
</Property>

<Property name="RM">
<Description>
Эталонная модель (ЭМ) которой принадлежит данный когнитивный прототип
КП может входить в состав только одной эталонной модели</Description>
<Type>User.ReferenceModel</Type>
<Cardinality>one</Cardinality>
<Inverse>CPItems</Inverse>
<Relationship>1</Relationship>
</Property>

<Method name="OnPopulate">
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    // Случайным образом выбираем понятие
    s con=5+$R(2000)
    s ..Concept=##class(User.CPConcept).%OpenId(con)
    // Случайным образом выбираем тип связи
    s link=1+$R(5)
    s ..Link=##class(User.CPSemantics).%OpenId(link)
    
    /* Генерируем списки дочерних элементов в соответствие с типом связи*/
    
    if (link=1)||(link=2) //Часть-целое или Род-вид
    {
	   //Сколько элементов будет в этом списке?
	   s num=3+$R(3)
	   d ..Relations.Clear()
	   f i=1:1:num
	   {
	   // Случайным образом выбираем понятие
	   s conS=6+$R(1999)
	   if conS'=con
	   {
		   d ..Relations.Insert(##class(User.CPConcept).%OpenId(conS))
	   }
	   }
    }
    ElseIf link=3 // Объект-функция
    {
	   //Сколько элементов будет в этом списке?
	   s num=3+$R(3)
	   d ..Relations.Clear()
	   f i=1:1:num
	   {
	   // Случайным образом выбираем функцию
	   s conF=2006+$R(999)

	   d ..Relations.Insert(##class(User.CPFunction).%OpenId(conF))
	   }
    }
    ElseIf link=4 // Объект-признак
    {
	   //Сколько элементов будет в этом списке?
	   s num=3+$R(3)
	   d ..Relations.Clear()
	   f i=1:1:num
	   {
	   // Случайным образом выбираем признак
	   s conFe=3006+$R(999)
	   d ..Relations.Insert(##class(User.CPFeature).%OpenId(conFe))
	   }
    }
    else // Объект-состояние
    {
	    //Сколько элементов будет в этом списке?
	   s num=3+$R(3)
	   d ..Relations.Clear()
	   f i=1:1:num
	   {
	   // Случайным образом выбираем признак
	   s conC=4006+$R(999)
	   d ..Relations.Insert(##class(User.CPCondition).%OpenId(conC))
	   }
    }
    
    QUIT $$$OK
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[
/*
/// Сеттер для хеширования КП
Method CPHashSet(Concept As CPConcept, Link As CPSemantics, Relations As %ListOfObjects) As %Status
{
	set i%CPHash = $system.Encryption.MD5Hash(Concept)_$system.Encryption.MD5Hash(Link)_$system.Encryption.MD5Hash(Relations)
	Quit $$$OK
}
*/
]]></Content>
</UDLText>

<Method name="IfExsist">
<Description>
Проверка существования узла в БД
Хешируем по 3-м полям (Concept, Link, Relations)
Проверяем хеш-свойство</Description>
<FormalSpec>Concept:CPConcept,Link:CPSemantics,Relations:%ListOfObjects</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
   if ..CPHash=$SYSTEM.Encryption.MD5Encode(Concept)_$SYSTEM.Encryption.MD5Encode(Link)_$SYSTEM.Encryption.MD5Encode(Relations)
     {
	     quit 1
     }
   else
     {
	     quit 0
     }
]]></Implementation>
</Method>

<Method name="GetCS">
<Description>
В момент создания нового КП (когда все составляющие КП уже получены), будем вызывать этот метод для генерации CSs
Сгенерировать набор Case Studies на основе конкретного CP и сохранить их в БД также как и сам КП
Перед вызовом метода проследить что текущий КП содержит все свои составные части (Понятие, связь и список ДЭ)</Description>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	// Генерируем все возможные задачи (Case Studies) на основе данного КП
	
    // Генерируем задачу 1-го типа
	s cs1OREF=##class(User.CS).CreateCS($THIS,1,"")
	  if cs1OREF'=$$$NULLOREF
	    { 
	      d ..CSs.Insert(cs1OREF)
	    }
	  else
	    {
		  q $$$ERROR($$$GeneralError,"Failure when generating a new CS of Type 1")
	    }
	
	// Генерируем задачу 2-го типа
	s cs2OREF=##class(User.CS).CreateCS($THIS,2,"")
	  if cs2OREF'=$$$NULLOREF
	    { 
	      d ..CSs.Insert(cs2OREF)
	    }
	  else
	    {
		  q $$$ERROR($$$GeneralError,"Failure when generating a new CS of Type 2")
	    }
	    
	  // Проходим по всем элементам когнитивной группы данного КП и генерируем Case Studies 3-го типа
	 s err=""
	   for Serial=1:1:..Relations.Count()
	     {
	      s cs3OREF=##class(User.CS).CreateCS($THIS,3,Serial)
	        if cs3OREF'=$$$NULLOREF
	          { 
	            d ..CSs.Insert(cs3OREF)
	          }
	        else
	          {
		        // Сохраняем индекс, на котором произошла ошибка
		        s err=Serial
		        q
	          }
	     }
	 if 'err
	   {  
	     // CSs сгенерированы, устанавливаем в свойстве данного КП что CSs сгенерированы
	     s ..IfCSsExist=1
	     // Сохраняем текущий КП.
	     s sc=..%Save()
	        If $$$ISERR(sc)
	          {
		        q $$$ERROR($$$GeneralError,"Failure when saving a new CP")
	          }
	   }
	 else
	   {
		 q $$$ERROR($$$GeneralError,"Failure when generating a new CS of Type3, Error at"_err)
	   }
  q $$$OK
]]></Implementation>
</Method>

<Method name="GetSetOfCP">
<Description>
Выбрать объект SQL.Statement, содержащий только все активные КП в данном контексте (ID контекста задан)
(Для редактора эталонной модели)</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>Context:%Integer,*tResult:%SQL.StatementResult</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
  s tStatement = ##class(%SQL.Statement).%New()
  s tSQL="select ID from CP where RM->Context=? and IfActive=1 order by ID"
  s tStatus = tStatement.%Prepare(.tSQL)
  s tResult = tStatement.%Execute(Context)
    if tResult.%SQLCODE<0
      {
	    q $$$ERROR() 
      }
    else
      {
	    q tResult
      }
]]></Implementation>
</Method>

<Method name="SaveCP">
<ClassMethod>1</ClassMethod>
<FormalSpec>conc:%Integer,link:%Integer,rels:%ListOfDataTypes,author:%Integer,context:%Integer,ifget:%Boolean,*id:%Integer</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
  s resultOfChecking=0
  if resultOfChecking=0
   {
	 s newConc=..%New()
	 s newConc.Concept=..GetObject(conc,"User.CPConcept")
	 s newConc.Link=..GetObject(link,"User.CPSemantics")
	 s newConc.Author=..GetObject(author,"User.Teacher")
	 s myCont=..GetObject(context,"User.Theme")
	 // Добавляем статистику использования для концепта 
	 d ##class(User.Statistics).SaveStat(newConc.Concept,myCont,"Conc")
	  f x=1:1:rels.Count()
	   {
		 s value=rels.GetAt(x)
		 s existRel=..GetObject(value,"User.CPRelationships")
		 d newConc.Relations.Insert(existRel)
		 // Добавляем статистику использования для связанных элементов
		 d ##class(User.Statistics).SaveStat(existRel,myCont,..NickName(existRel))
	   }
	 s rs=newConc.%Save()
      if $$$ISOK(rs) {
	     if ifget d newConc.GetCS()
	     s id=newConc.%Id()
	     q id
      }
      else {
		 q $$$ERROR($$$GeneralError,"Can't save the CP!")
      }
   }
  else
   {
	  q $$$ERROR($$$GeneralError,"Such the CP already exists!")
   }
  q $$$OK
]]></Implementation>
</Method>

<Method name="GetObject">
<ClassMethod>1</ClassMethod>
<FormalSpec>id:%Integer,classname:%String</FormalSpec>
<ReturnType>%Persistent</ReturnType>
<Implementation><![CDATA[  q $CLASSMETHOD(classname, "%OpenId",id)
]]></Implementation>
</Method>

<Method name="NickName">
<ClassMethod>1</ClassMethod>
<FormalSpec>rel:User.CPRelationships</FormalSpec>
<Private>1</Private>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
  if $IsObject(rel) {
    s classIs=rel.%ClassName()
    If classIs="CPConcept" {
	  q "Conc"
    }
    elseIf classIs="CPFunction" {
	  q "Func" 
    }
    elseIf classIs="CPFeature" {
	  q "Feat" 
    }
    elseIf classIs="CPCondition" {
	  q "Cond" 
    }
    else {
	  q "Error"
    }
  }
  else {
	 q $$$ERROR($$$GeneralError,"Wrong OREF at NickName Classmethod.") 
  }
]]></Implementation>
</Method>

<Method name="CheckIfAllGenerated">
<Description>
Проверка все ли КП в заданной теме были декомпонированы на учебные элементы.
Если да, разрешаем завершение темы (при её разработке) с последующей доступностью для студента</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>con:%Integer</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
  // Пройти по всем КП в данной теме и проверить имеется ли хотябы один из них, который имеет IfCSsExist=0
  // Если нет КП вообще возвращаем 0
  // Как только найден один, который имеет IfCSsExist=0 - возвращаем 0
  s rs=..GetSetOfCP(con)
  if $$$ISOK(rs) {
	// Успешно получен ResultSet
	s err=""
	while rs.%Next() {
	  s nextCP=..%OpenId(rs.ID)
	  if nextCP.IfCSsExist=0 {s err=1 q}
    }
    if rs.%ROWCOUNT=0 q 0
    if err {
	   q 0
    }
    else {
	   q 1
    }
  }
  else {
	q 0
  }
]]></Implementation>
</Method>

<Method name="CreateCSForEach">
<Description>
Сервисный метод генерации CS для всех КП имеющихся в базе
Используется на этапе отладке и генерации тестовых данных</Description>
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
  s tStatement = ##class(%SQL.Statement).%New()
  s tSQL="select ID from CP"
  s tStatus = tStatement.%Prepare(.tSQL)
  s tResult = tStatement.%Execute()
  if tResult.%SQLCODE<0 q $$$ERROR($$$GeneralError,"Failure when executing an SQL query")
    s counter=0
    while tResult.%Next()
    {
	    s nextCP=..%OpenId(tResult.ID)
	    d nextCP.GetCS()
	    s counter=counter+1
    }
  q "Completed! CPs processed= "_counter
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DataLocation>^User.CPD</DataLocation>
<DefaultData>CPDefaultData</DefaultData>
<IdLocation>^User.CPD</IdLocation>
<IndexLocation>^User.CPI</IndexLocation>
<StreamLocation>^User.CPS</StreamLocation>
<ExtentSize>700</ExtentSize>
<Data name="CPDefaultData">
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>Concept</Value>
</Value>
<Value name="3">
<Value>Link</Value>
</Value>
<Value name="4">
<Value>Relations</Value>
</Value>
<Value name="5">
<Value>Author</Value>
</Value>
<Value name="6">
<Value>RM</Value>
</Value>
<Value name="7">
<Value>CPHash</Value>
</Value>
<Value name="8">
<Value>IfCSsExist</Value>
</Value>
<Value name="9">
<Value>NumOfRel</Value>
</Value>
<Value name="10">
<Value>IfActive</Value>
</Value>
<Value name="11">
<Value>NowMany</Value>
</Value>
</Data>
<Property name="%%CLASSNAME">
<Selectivity>100.0000%</Selectivity>
</Property>
<Property name="Author">
<Selectivity>10.0000%</Selectivity>
</Property>
<Property name="CPHash">
<Selectivity>0.1431%</Selectivity>
</Property>
<Property name="Concept">
<Selectivity>0.1718%</Selectivity>
</Property>
<Property name="IfActive">
<Selectivity>100.0000%</Selectivity>
</Property>
<Property name="IfCSsExist">
<Selectivity>100.0000%</Selectivity>
</Property>
<Property name="Link">
<Selectivity>20.0000%</Selectivity>
</Property>
<Property name="NowMany">
<Selectivity>0.0834%</Selectivity>
</Property>
<Property name="NumOfRel">
<Selectivity>0.0834%</Selectivity>
</Property>
<Property name="RM">
<Selectivity>3.5714%</Selectivity>
</Property>
<Property name="Relations">
<Selectivity>0.1429%</Selectivity>
</Property>
<SQLMap name="IDKEY">
<BlockCount>-28</BlockCount>
</SQLMap>
<SQLMap name="RMIndex">
<BlockCount>-4</BlockCount>
</SQLMap>
</Storage>
</Class>


<Class name="User.CP">
<Description><![CDATA[
Когнитивный прототип (Структура вида: Понятие<->Семантическая связь<->Список дочерних элементов)]]></Description>
<SqlTableName>CP</SqlTableName>
<Super>%Persistent,%Populate,%XML.Adaptor,%ZEN.DataModel.ObjectDataModel</Super>
<TimeChanged>63081,39161.229973</TimeChanged>
<TimeCreated>62794,46713.381783</TimeCreated>

<UDLText name="T">
<Content><![CDATA[
// ------------------СТРУКТУРА КП---------------------------

]]></Content>
</UDLText>

<Property name="Concept">
<Description>
Учебное понятие</Description>
<Type>CPConcept</Type>
<Required>1</Required>
</Property>

<Property name="Link">
<Description>
Тип семантических отношений</Description>
<Type>CPSemantics</Type>
<Required>1</Required>
</Property>

<Property name="Relations">
<Description>
Список дочерних элементов</Description>
<Type>CPRelationships</Type>
<Collection>list</Collection>
<Required>1</Required>
</Property>

<Property name="CPHash">
<Description>
Хешированная копия данного КП</Description>
<Type>%String</Type>
<Parameter name="MAXLEN" value="1000"/>
</Property>

<UDLText name="T">
<Content><![CDATA[
// ----------------------КОНЕЦ-------------------------------

]]></Content>
</UDLText>

<Property name="Author">
<Description>
Автор данного КП</Description>
<Type>Teacher</Type>
</Property>

<Property name="IfCSsExist">
<Description>
Получен ли уже набор CS (Case Studies) из этого КП</Description>
<Type>%Boolean</Type>
<InitialExpression>0</InitialExpression>
</Property>

<Property name="IfActive">
<Description>
КП может быть активным и пассивным. Пассивные (которые были усовершенствованы) КП не отображаются в текущей эталонной модели курса и не участвуют в СРС студента</Description>
<Type>%Boolean</Type>
<InitialExpression>1</InitialExpression>
</Property>

<Property name="CSs">
<Description>
Набор Case Studies которые следуют (генерируются) из этого КП</Description>
<Type>User.CS</Type>
<Cardinality>many</Cardinality>
<Inverse>CP</Inverse>
<Relationship>1</Relationship>
</Property>

<Property name="RM">
<Description>
Эталонная модель (ЭМ) которой принадлежит данный когнитивный прототип
КП может входить в состав только одной эталонной модели</Description>
<Type>User.ReferenceModel</Type>
<Cardinality>one</Cardinality>
<Inverse>CPItems</Inverse>
<Relationship>1</Relationship>
</Property>

<Method name="OnPopulate">
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    // Случайным образом выбираем понятие
    s con=5+$R(2000)
    s ..Concept=##class(User.CPConcept).%OpenId(con)
    // Случайным образом выбираем тип связи
    s link=1+$R(5)
    s ..Link=##class(User.CPSemantics).%OpenId(link)
    
    /* Генерируем списки дочерних элементов в соответствие с типом связи*/
    
    if (link=1)||(link=2) //Часть-целое или Род-вид
    {
	   //Сколько элементов будет в этом списке?
	   s num=3+$R(3)
	   d ..Relations.Clear()
	   f i=1:1:num
	   {
	   // Случайным образом выбираем понятие
	   s conS=6+$R(1999)
	   if conS'=con
	   {
		   d ..Relations.Insert(##class(User.CPConcept).%OpenId(conS))
	   }
	   }
    }
    ElseIf link=3 // Объект-функция
    {
	   //Сколько элементов будет в этом списке?
	   s num=3+$R(3)
	   d ..Relations.Clear()
	   f i=1:1:num
	   {
	   // Случайным образом выбираем функцию
	   s conF=2006+$R(999)

	   d ..Relations.Insert(##class(User.CPFunction).%OpenId(conF))
	   }
    }
    ElseIf link=4 // Объект-признак
    {
	   //Сколько элементов будет в этом списке?
	   s num=3+$R(3)
	   d ..Relations.Clear()
	   f i=1:1:num
	   {
	   // Случайным образом выбираем признак
	   s conFe=3006+$R(999)
	   d ..Relations.Insert(##class(User.CPFeature).%OpenId(conFe))
	   }
    }
    else // Объект-состояние
    {
	    //Сколько элементов будет в этом списке?
	   s num=3+$R(3)
	   d ..Relations.Clear()
	   f i=1:1:num
	   {
	   // Случайным образом выбираем признак
	   s conC=4006+$R(999)
	   d ..Relations.Insert(##class(User.CPCondition).%OpenId(conC))
	   }
    }
    
    QUIT $$$OK
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[
/*
/// Сеттер для хеширования КП
Method CPHashSet(Concept As CPConcept, Link As CPSemantics, Relations As %ListOfObjects) As %Status
{
	set i%CPHash = $system.Encryption.MD5Hash(Concept)_$system.Encryption.MD5Hash(Link)_$system.Encryption.MD5Hash(Relations)
	Quit $$$OK
}
*/
]]></Content>
</UDLText>

<Method name="IfExsist">
<Description>
Проверка существования узла в БД
Хешируем по 3-м полям (Concept, Link, Relations)
Проверяем хеш-свойство</Description>
<FormalSpec>Concept:CPConcept,Link:CPSemantics,Relations:%ListOfObjects</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
   if ..CPHash=$SYSTEM.Encryption.MD5Encode(Concept)_$SYSTEM.Encryption.MD5Encode(Link)_$SYSTEM.Encryption.MD5Encode(Relations)
     {
	     quit 1
     }
   else
     {
	     quit 0
     }
]]></Implementation>
</Method>

<Method name="GetCS">
<Description>
В момент создания нового КП (когда все составляющие КП уже получены), будем вызывать этот метод для генерации CSs
Сгенерировать набор Case Studies на основе конкретного CP и сохранить их в БД также как и сам КП
Перед вызовом метода проследить что текущий КП содержит все свои составные части (Понятие, связь и список ДЭ)</Description>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	// Генерируем все возможные задачи (Case Studies) на основе данного КП
	
    // Генерируем задачу 1-го типа
	s cs1OREF=##class(User.CS).CreateCS($THIS,1,"")
	  if cs1OREF'=$$$NULLOREF
	    { 
	      d ..CSs.Insert(cs1OREF)
	    }
	  else
	    {
		  q $$$ERROR($$$GeneralError,"Failure when generating a new CS of Type 1")
	    }
	
	// Генерируем задачу 2-го типа
	s cs2OREF=##class(User.CS).CreateCS($THIS,2,"")
	  if cs2OREF'=$$$NULLOREF
	    { 
	      d ..CSs.Insert(cs2OREF)
	    }
	  else
	    {
		  q $$$ERROR($$$GeneralError,"Failure when generating a new CS of Type 2")
	    }
	    
	  // Проходим по всем элементам когнитивной группы данного КП и генерируем Case Studies 3-го типа
	 s err=""
	   for Serial=1:1:..Relations.Count()
	     {
	      s cs3OREF=##class(User.CS).CreateCS($THIS,3,Serial)
	        if cs3OREF'=$$$NULLOREF
	          { 
	            d ..CSs.Insert(cs3OREF)
	          }
	        else
	          {
		        // Сохраняем индекс, на котором произошла ошибка
		        s err=Serial
		        q
	          }
	     }
	 if 'err
	   {  
	     // CSs сгенерированы, устанавливаем в свойстве данного КП что CSs сгенерированы
	     s ..IfCSsExist=1
	     // Сохраняем текущий КП.
	     s sc=..%Save()
	        If $$$ISERR(sc)
	          {
		        q $$$ERROR($$$GeneralError,"Failure when saving a new CP")
	          }
	   }
	 else
	   {
		 q $$$ERROR($$$GeneralError,"Failure when generating a new CS of Type3, Error at"_err)
	   }
  q $$$OK
]]></Implementation>
</Method>

<Method name="GetSetOfCP">
<Description>
Выбрать объект SQL.Statement, содержащий только все активные КП в данном контексте (ID контекста задан)
(Для редактора эталонной модели)</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>Context:%Integer,*tResult:%SQL.StatementResult</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
  s tStatement = ##class(%SQL.Statement).%New()
  s tSQL="select ID from CP where RM->Context=? and IfActive=1 order by ID"
  s tStatus = tStatement.%Prepare(.tSQL)
  s tResult = tStatement.%Execute(Context)
    if tResult.%SQLCODE<0
      {
	    q $$$ERROR() 
      }
    else
      {
	    q tResult
      }
]]></Implementation>
</Method>

<Method name="SaveCP">
<ClassMethod>1</ClassMethod>
<FormalSpec>conc:%Integer,link:%Integer,rels:%ListOfDataTypes,author:%Integer,context:%Integer,ifget:%Boolean,*id:%Integer</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
  s resultOfChecking=0
  if resultOfChecking=0
   {
	 s newConc=..%New()
	 s newConc.Concept=..GetObject(conc,"User.CPConcept")
	 s newConc.Link=..GetObject(link,"User.CPSemantics")
	 s newConc.Author=..GetObject(author,"User.Teacher")
	 s myCont=..GetObject(context,"User.Theme")
	 // Добавляем статистику использования для концепта 
	 d ##class(User.Statistics).SaveStat(newConc.Concept,myCont,"Conc")
	  f x=1:1:rels.Count()
	   {
		 s value=rels.GetAt(x)
		 s existRel=..GetObject(value,"User.CPRelationships")
		 d newConc.Relations.Insert(existRel)
		 // Добавляем статистику использования для связанных элементов
		 d ##class(User.Statistics).SaveStat(existRel,myCont,..NickName(existRel))
	   }
	 s rs=newConc.%Save()
      if $$$ISOK(rs) {
	     if ifget d newConc.GetCS()
	     s id=newConc.%Id()
	     q id
      }
      else {
		 q $$$ERROR($$$GeneralError,"Can't save the CP!")
      }
   }
  else
   {
	  q $$$ERROR($$$GeneralError,"Such the CP already exists!")
   }
  q $$$OK
]]></Implementation>
</Method>

<Method name="GetObject">
<ClassMethod>1</ClassMethod>
<FormalSpec>id:%Integer,classname:%String</FormalSpec>
<ReturnType>%Persistent</ReturnType>
<Implementation><![CDATA[  q $CLASSMETHOD(classname, "%OpenId",id)
]]></Implementation>
</Method>

<Method name="NickName">
<ClassMethod>1</ClassMethod>
<FormalSpec>rel:User.CPRelationships</FormalSpec>
<Private>1</Private>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
  if $IsObject(rel) {
    s classIs=rel.%ClassName()
    If classIs="CPConcept" {
	  q "Conc"
    }
    elseIf classIs="CPFunction" {
	  q "Func" 
    }
    elseIf classIs="CPFeature" {
	  q "Feat" 
    }
    elseIf classIs="CPCondition" {
	  q "Cond" 
    }
    else {
	  q "Error"
    }
  }
  else {
	 q $$$ERROR($$$GeneralError,"Wrong OREF at NickName Classmethod.") 
  }
]]></Implementation>
</Method>

<Method name="CheckIfAllGenerated">
<Description>
Проверка все ли КП в заданной теме были декомпонированы на учебные элементы.
Если да, разрешаем завершение темы (при её разработке) с последующей доступностью для студента</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>con:%Integer</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
  // Пройти по всем КП в данной теме и проверить имеется ли хотябы один из них, который имеет IfCSsExist=0
  // Если нет КП вообще возвращаем 0
  // Как только найден один, который имеет IfCSsExist=0 - возвращаем 0
  s rs=..GetSetOfCP(con)
  if $$$ISOK(rs) {
	// Успешно получен ResultSet
	s err=""
	while rs.%Next() {
	  s nextCP=..%OpenId(rs.ID)
	  if nextCP.IfCSsExist=0 {s err=1 q}
    }
    if rs.%ROWCOUNT=0 q 0
    if err {
	   q 0
    }
    else {
	   q 1
    }
  }
  else {
	q 0
  }
]]></Implementation>
</Method>

<Method name="CreateCSForEach">
<Description>
Сервисный метод генерации CS для всех КП имеющихся в базе
Используется на этапе отладке и генерации тестовых данных</Description>
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
  s tStatement = ##class(%SQL.Statement).%New()
  s tSQL="select ID from CP"
  s tStatus = tStatement.%Prepare(.tSQL)
  s tResult = tStatement.%Execute()
  if tResult.%SQLCODE<0 q $$$ERROR($$$GeneralError,"Failure when executing an SQL query")
    s counter=0
    while tResult.%Next()
    {
	    s nextCP=..%OpenId(tResult.ID)
	    d nextCP.GetCS()
	    s counter=counter+1
    }
  q "Completed! CPs processed= "_counter
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DataLocation>^User.CPD</DataLocation>
<DefaultData>CPDefaultData</DefaultData>
<IdLocation>^User.CPD</IdLocation>
<IndexLocation>^User.CPI</IndexLocation>
<StreamLocation>^User.CPS</StreamLocation>
<ExtentSize>700</ExtentSize>
<Data name="CPDefaultData">
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>Concept</Value>
</Value>
<Value name="3">
<Value>Link</Value>
</Value>
<Value name="4">
<Value>Relations</Value>
</Value>
<Value name="5">
<Value>Author</Value>
</Value>
<Value name="6">
<Value>RM</Value>
</Value>
<Value name="7">
<Value>CPHash</Value>
</Value>
<Value name="8">
<Value>IfCSsExist</Value>
</Value>
<Value name="9">
<Value>NumOfRel</Value>
</Value>
<Value name="10">
<Value>IfActive</Value>
</Value>
<Value name="11">
<Value>NowMany</Value>
</Value>
</Data>
<Property name="%%CLASSNAME">
<Selectivity>100.0000%</Selectivity>
</Property>
<Property name="Author">
<Selectivity>10.0000%</Selectivity>
</Property>
<Property name="CPHash">
<Selectivity>0.1431%</Selectivity>
</Property>
<Property name="Concept">
<Selectivity>0.1718%</Selectivity>
</Property>
<Property name="IfActive">
<Selectivity>100.0000%</Selectivity>
</Property>
<Property name="IfCSsExist">
<Selectivity>100.0000%</Selectivity>
</Property>
<Property name="Link">
<Selectivity>20.0000%</Selectivity>
</Property>
<Property name="NowMany">
<Selectivity>0.0834%</Selectivity>
</Property>
<Property name="NumOfRel">
<Selectivity>0.0834%</Selectivity>
</Property>
<Property name="RM">
<Selectivity>3.5714%</Selectivity>
</Property>
<Property name="Relations">
<Selectivity>0.1429%</Selectivity>
</Property>
<SQLMap name="IDKEY">
<BlockCount>-28</BlockCount>
</SQLMap>
<SQLMap name="RMIndex">
<BlockCount>-4</BlockCount>
</SQLMap>
</Storage>
</Class>


<Class name="User.CPConcept">
<Description>
Учебное понятие</Description>
<SqlTableName>Concept</SqlTableName>
<Super>User.CPRelationships,%Populate,%ZEN.DataModel.ObjectDataModel</Super>
<TimeChanged>63071,36663.376788</TimeChanged>
<TimeCreated>62794,39266.784956</TimeCreated>

<Property name="Image">
<Description>
Графическое обозначение понятия</Description>
<Type>%Library.CacheFileStream</Type>
</Property>

<UDLText name="T">
<Content><![CDATA[/*------------------------MVC-------------------------*/
]]></Content>
</UDLText>

<Method name="%OnNewSource">
<Description>
Load an instance of a new (unsaved) source object for this DataModel.</Description>
<FormalSpec>*pSC:%Status=$$$OK</FormalSpec>
<ReturnType>%RegisteredObject</ReturnType>
<Implementation><![CDATA[  Quit ##class(User.CPConcept).%New()
]]></Implementation>
</Method>

<Method name="%OnSaveSource">
<Description>
Save instance of associated source object.</Description>
<FormalSpec>pSource:User.CPConcept</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
  Set tSC=pSource.%Save()
  If $$$ISOK(tSC)
   { 
     Set ..%id=pSource.%Id()
     // Обновить статистику использования понятий
     s context=##class(User.Theme).%OpenId($Get(%session.Data("Context")))
     s rs=##class(User.Statistics).SaveStat(pSource,context,"Conc")
   }
  Quit tSC
]]></Implementation>
</Method>

<Method name="%OnOpenSource">
<Description>
Load an instance of the source object for this DataModel.</Description>
<FormalSpec>pID:%String,pConcurrency:%Integer=-1,*pSC:%Status=$$$OK</FormalSpec>
<ReturnType>%RegisteredObject</ReturnType>
<Implementation><![CDATA[  Quit ##class(User.CPConcept).%OpenId(pID,pConcurrency,.pSC)
]]></Implementation>
</Method>

<Method name="%OnDeleteSource">
<Description>
Delete instance of associated source object.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pID:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[  Quit ##class(User.CPConcept).%DeleteId(pID)
]]></Implementation>
</Method>

<Method name="%OnLoadModel">
<Description>
Do the actual work of loading values from the source object.</Description>
<FormalSpec>pSource:User.CPConcept</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
  Set ..Name =pSource.Name
  Quit $$$OK
]]></Implementation>
</Method>

<Method name="%OnStoreModel">
<Description>
Do the actual work of storing values into the source object.</Description>
<FormalSpec>pSource:User.CPConcept</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
  Set pSource.Name = ..Name
  Quit $$$OK
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DefaultData>CPConceptDefaultData</DefaultData>
<ExtentSize>2000</ExtentSize>
<Data name="CPConceptDefaultData">
<Subscript>"CPConcept"</Subscript>
<Value name="1">
<Value>Description</Value>
</Value>
<Value name="2">
<Value>Image</Value>
</Value>
</Data>
<Property name="%%CLASSNAME">
<Selectivity>99.9992%</Selectivity>
</Property>
<Property name="Description">
<Selectivity>0.0500%</Selectivity>
</Property>
<Property name="Image">
<Selectivity>99.9992%</Selectivity>
</Property>
</Storage>
</Class>


<Class name="User.CPConcept">
<Description>
Учебное понятие</Description>
<SqlTableName>Concept</SqlTableName>
<Super>User.CPRelationships,%Populate,%ZEN.DataModel.ObjectDataModel</Super>
<TimeChanged>63071,36663.376788</TimeChanged>
<TimeCreated>62794,39266.784956</TimeCreated>

<Property name="Image">
<Description>
Графическое обозначение понятия</Description>
<Type>%Library.CacheFileStream</Type>
</Property>

<UDLText name="T">
<Content><![CDATA[/*------------------------MVC-------------------------*/
]]></Content>
</UDLText>

<Method name="%OnNewSource">
<Description>
Load an instance of a new (unsaved) source object for this DataModel.</Description>
<FormalSpec>*pSC:%Status=$$$OK</FormalSpec>
<ReturnType>%RegisteredObject</ReturnType>
<Implementation><![CDATA[  Quit ##class(User.CPConcept).%New()
]]></Implementation>
</Method>

<Method name="%OnSaveSource">
<Description>
Save instance of associated source object.</Description>
<FormalSpec>pSource:User.CPConcept</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
  Set tSC=pSource.%Save()
  If $$$ISOK(tSC)
   { 
     Set ..%id=pSource.%Id()
     // Обновить статистику использования понятий
     s context=##class(User.Theme).%OpenId($Get(%session.Data("Context")))
     s rs=##class(User.Statistics).SaveStat(pSource,context,"Conc")
   }
  Quit tSC
]]></Implementation>
</Method>

<Method name="%OnOpenSource">
<Description>
Load an instance of the source object for this DataModel.</Description>
<FormalSpec>pID:%String,pConcurrency:%Integer=-1,*pSC:%Status=$$$OK</FormalSpec>
<ReturnType>%RegisteredObject</ReturnType>
<Implementation><![CDATA[  Quit ##class(User.CPConcept).%OpenId(pID,pConcurrency,.pSC)
]]></Implementation>
</Method>

<Method name="%OnDeleteSource">
<Description>
Delete instance of associated source object.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pID:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[  Quit ##class(User.CPConcept).%DeleteId(pID)
]]></Implementation>
</Method>

<Method name="%OnLoadModel">
<Description>
Do the actual work of loading values from the source object.</Description>
<FormalSpec>pSource:User.CPConcept</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
  Set ..Name =pSource.Name
  Quit $$$OK
]]></Implementation>
</Method>

<Method name="%OnStoreModel">
<Description>
Do the actual work of storing values into the source object.</Description>
<FormalSpec>pSource:User.CPConcept</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
  Set pSource.Name = ..Name
  Quit $$$OK
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DefaultData>CPConceptDefaultData</DefaultData>
<ExtentSize>2000</ExtentSize>
<Data name="CPConceptDefaultData">
<Subscript>"CPConcept"</Subscript>
<Value name="1">
<Value>Description</Value>
</Value>
<Value name="2">
<Value>Image</Value>
</Value>
</Data>
<Property name="%%CLASSNAME">
<Selectivity>99.9992%</Selectivity>
</Property>
<Property name="Description">
<Selectivity>0.0500%</Selectivity>
</Property>
<Property name="Image">
<Selectivity>99.9992%</Selectivity>
</Property>
</Storage>
</Class>


<Class name="User.CPCondition">
<Description>
Состояние изучаемого объекта (например для воды (жидкое, газообразное или твёрдое))</Description>
<SqlTableName>Condition</SqlTableName>
<Super>User.CPRelationships,%Populate,%ZEN.DataModel.ObjectDataModel</Super>
<TimeChanged>63072,45332.010729</TimeChanged>
<TimeCreated>62794,46566.997064</TimeCreated>

<Property name="Features">
<Type>CPFeature</Type>
<Collection>list</Collection>
</Property>

<Property name="Functions">
<Type>CPFunction</Type>
<Collection>list</Collection>
</Property>

<UDLText name="T">
<Content><![CDATA[/*------------------------MVC-------------------------*/
]]></Content>
</UDLText>

<Method name="%OnNewSource">
<Description>
Load an instance of a new (unsaved) source object for this DataModel.</Description>
<FormalSpec>*pSC:%Status=$$$OK</FormalSpec>
<ReturnType>%RegisteredObject</ReturnType>
<Implementation><![CDATA[  Quit ##class(User.CPCondition).%New()
]]></Implementation>
</Method>

<Method name="%OnSaveSource">
<Description>
Save instance of associated source object.</Description>
<FormalSpec>pSource:User.CPCondition</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
  Set tSC=pSource.%Save()
  If $$$ISOK(tSC)
   { 
     Set ..%id=pSource.%Id()
     // Обновить статистику использования понятий
     s context=##class(User.Theme).%OpenId($Get(%session.Data("Context")))
     s rs=##class(User.Statistics).SaveStat(pSource,context,"Cond")
   }
  Quit tSC
]]></Implementation>
</Method>

<Method name="%OnOpenSource">
<Description>
Load an instance of the source object for this DataModel.</Description>
<FormalSpec>pID:%String,pConcurrency:%Integer=-1,*pSC:%Status=$$$OK</FormalSpec>
<ReturnType>%RegisteredObject</ReturnType>
<Implementation><![CDATA[  Quit ##class(User.CPCondition).%OpenId(pID,pConcurrency,.pSC)
]]></Implementation>
</Method>

<Method name="%OnDeleteSource">
<Description>
Delete instance of associated source object.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pID:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[  Quit ##class(User.CPCondition).%DeleteId(pID)
]]></Implementation>
</Method>

<Method name="%OnLoadModel">
<Description>
Do the actual work of loading values from the source object.</Description>
<FormalSpec>pSource:User.CPCondition</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
  Set ..Name =pSource.Name
  Quit $$$OK
]]></Implementation>
</Method>

<Method name="%OnStoreModel">
<Description>
Do the actual work of storing values into the source object.</Description>
<FormalSpec>pSource:User.CPCondition</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
  Set pSource.Name = ..Name
  Quit $$$OK
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DefaultData>CPConditionDefaultData</DefaultData>
<ExtentSize>1000</ExtentSize>
<Data name="CPConditionDefaultData">
<Subscript>"CPCondition"</Subscript>
<Value name="1">
<Value>Features</Value>
</Value>
<Value name="2">
<Value>FunctionsState</Value>
</Value>
<Value name="3">
<Value>Features1</Value>
</Value>
<Value name="4">
<Value>Functions</Value>
</Value>
</Data>
<Property name="%%CLASSNAME">
<Selectivity>99.9994%</Selectivity>
</Property>
<Property name="Description">
<Selectivity>0.1000%</Selectivity>
</Property>
<Property name="Features">
<Selectivity>0.2232%</Selectivity>
</Property>
<Property name="Functions">
<Selectivity>0.3102%</Selectivity>
</Property>
</Storage>
</Class>


<Class name="User.CPFeature">
<Description>
Признакми изучаемого объекта как триплет значений (свойство-значение свойства-размерность)</Description>
<SqlTableName>Feature</SqlTableName>
<Super>User.CPRelationships,%Populate,%ZEN.DataModel.ObjectDataModel</Super>
<TimeChanged>63072,45327.240914</TimeChanged>
<TimeCreated>62794,39526.859076</TimeCreated>

<Property name="Value">
<Description>
Значение свойства</Description>
<Type>%String</Type>
<Parameter name="MAXLEN" value="500"/>
</Property>

<Property name="Unit">
<Description>
Единица измерения</Description>
<Type>%String</Type>
</Property>

<UDLText name="T">
<Content><![CDATA[/*------------------------MVC-------------------------*/
]]></Content>
</UDLText>

<Method name="%OnNewSource">
<Description>
Load an instance of a new (unsaved) source object for this DataModel.</Description>
<FormalSpec>*pSC:%Status=$$$OK</FormalSpec>
<ReturnType>%RegisteredObject</ReturnType>
<Implementation><![CDATA[  Quit ##class(User.CPFeature).%New()
]]></Implementation>
</Method>

<Method name="%OnSaveSource">
<Description>
Save instance of associated source object.</Description>
<FormalSpec>pSource:User.CPFeature</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
  Set tSC=pSource.%Save()
  If $$$ISOK(tSC)
   { 
     Set ..%id=pSource.%Id()
     // Обновить статистику использования понятий
     s context=##class(User.Theme).%OpenId($Get(%session.Data("Context")))
     s rs=##class(User.Statistics).SaveStat(pSource,context,"Feat")
   }
  Quit tSC
]]></Implementation>
</Method>

<Method name="%OnOpenSource">
<Description>
Load an instance of the source object for this DataModel.</Description>
<FormalSpec>pID:%String,pConcurrency:%Integer=-1,*pSC:%Status=$$$OK</FormalSpec>
<ReturnType>%RegisteredObject</ReturnType>
<Implementation><![CDATA[  Quit ##class(User.CPFeature).%OpenId(pID,pConcurrency,.pSC)
]]></Implementation>
</Method>

<Method name="%OnDeleteSource">
<Description>
Delete instance of associated source object.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pID:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[  Quit ##class(User.CPFeature).%DeleteId(pID)
]]></Implementation>
</Method>

<Method name="%OnLoadModel">
<Description>
Do the actual work of loading values from the source object.</Description>
<FormalSpec>pSource:User.CPFeature</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
  Set ..Name =pSource.Name
  Quit $$$OK
]]></Implementation>
</Method>

<Method name="%OnStoreModel">
<Description>
Do the actual work of storing values into the source object.</Description>
<FormalSpec>pSource:User.CPFeature</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
  Set pSource.Name = ..Name
  Quit $$$OK
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DefaultData>CPFeatureDefaultData</DefaultData>
<ExtentSize>1000</ExtentSize>
<Data name="CPFeatureDefaultData">
<Subscript>"CPFeature"</Subscript>
<Value name="1">
<Value>Value</Value>
</Value>
<Value name="2">
<Value>Unit</Value>
</Value>
</Data>
<Property name="%%CLASSNAME">
<Selectivity>99.9994%</Selectivity>
</Property>
<Property name="Description">
<Selectivity>0.1000%</Selectivity>
</Property>
<Property name="Unit">
<Selectivity>0.1000%</Selectivity>
</Property>
<Property name="Value">
<Selectivity>0.1000%</Selectivity>
</Property>
</Storage>
</Class>


<Class name="User.CPFunction">
<Description>
Функция понятия (компонента целого, системы, подсистемы  пр.)</Description>
<SqlTableName>Function</SqlTableName>
<Super>User.CPRelationships,%Populate,%ZEN.DataModel.ObjectDataModel</Super>
<TimeChanged>63072,45311.305403</TimeChanged>
<TimeCreated>62794,46473.231583</TimeCreated>

<Property name="Algorithm">
<Description>
Концептуальное описание алгоритма реализации данной функции</Description>
<Type>%String</Type>
<Parameter name="MAXLEN" value="50000"/>
</Property>

<UDLText name="T">
<Content><![CDATA[/*------------------------MVC-------------------------*/
]]></Content>
</UDLText>

<Method name="%OnNewSource">
<Description>
Load an instance of a new (unsaved) source object for this DataModel.</Description>
<FormalSpec>*pSC:%Status=$$$OK</FormalSpec>
<ReturnType>%RegisteredObject</ReturnType>
<Implementation><![CDATA[  Quit ##class(User.CPFunction).%New()
]]></Implementation>
</Method>

<Method name="%OnSaveSource">
<Description>
Save instance of associated source object.</Description>
<FormalSpec>pSource:User.CPFunction</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
  Set tSC=pSource.%Save()
  If $$$ISOK(tSC)
   { 
     Set ..%id=pSource.%Id()
     // Обновить статистику использования понятий
     s context=##class(User.Theme).%OpenId($Get(%session.Data("Context")))
     s rs=##class(User.Statistics).SaveStat(pSource,context,"Func")
   }
  Quit tSC
]]></Implementation>
</Method>

<Method name="%OnOpenSource">
<Description>
Load an instance of the source object for this DataModel.</Description>
<FormalSpec>pID:%String,pConcurrency:%Integer=-1,*pSC:%Status=$$$OK</FormalSpec>
<ReturnType>%RegisteredObject</ReturnType>
<Implementation><![CDATA[  Quit ##class(User.CPFunction).%OpenId(pID,pConcurrency,.pSC)
]]></Implementation>
</Method>

<Method name="%OnDeleteSource">
<Description>
Delete instance of associated source object.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pID:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[  Quit ##class(User.CPFunction).%DeleteId(pID)
]]></Implementation>
</Method>

<Method name="%OnLoadModel">
<Description>
Do the actual work of loading values from the source object.</Description>
<FormalSpec>pSource:User.CPFunction</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
  Set ..Name =pSource.Name
  Quit $$$OK
]]></Implementation>
</Method>

<Method name="%OnStoreModel">
<Description>
Do the actual work of storing values into the source object.</Description>
<FormalSpec>pSource:User.CPFunction</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
  Set pSource.Name = ..Name
  Quit $$$OK
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DefaultData>CPFunctionDefaultData</DefaultData>
<ExtentSize>1000</ExtentSize>
<Data name="CPFunctionDefaultData">
<Subscript>"CPFunction"</Subscript>
<Value name="1">
<Value>Algorithm</Value>
</Value>
</Data>
<Property name="%%CLASSNAME">
<Selectivity>99.9994%</Selectivity>
</Property>
<Property name="Algorithm">
<Selectivity>0.1000%</Selectivity>
</Property>
<Property name="Description">
<Selectivity>0.1000%</Selectivity>
</Property>
</Storage>
</Class>


<Class name="User.CPLexeme">
<Description>
Базовый класс всех типов понятий.</Description>
<Abstract>1</Abstract>
<SqlTableName>Lexeme</SqlTableName>
<Super>%Persistent,%Populate,%XML.Adaptor</Super>
<TimeChanged>63014,38896.593059</TimeChanged>
<TimeCreated>62794,39093.569499</TimeCreated>

<UDLText name="T">
<Content><![CDATA[
// Имя лексемы

]]></Content>
</UDLText>

<Property name="Name">
<Type>%String</Type>
<Required>1</Required>
<Parameter name="MAXLEN" value="500"/>
<Parameter name="POPSPEC" value="##class(User.CPLexeme).GiveNames()"/>
</Property>

<Index name="IName">
<Properties>Name</Properties>
<Unique>1</Unique>
</Index>

<Method name="IfExist">
<Description>
Проверка существования лексемы (обёртка над встроенным методом Index_Name_Exists)</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>LexToCheck:%String</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[	q ..INameExists(LexToCheck)
]]></Implementation>
</Method>

<Method name="GiveNames">
<ClassMethod>1</ClassMethod>
<ReturnType>%Library.String</ReturnType>
<Implementation><![CDATA[	q "Condition "_##class(%PopulateUtils).Counter(1)
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DataLocation>^User.CPLexemeD</DataLocation>
<DefaultData>CPLexemeDefaultData</DefaultData>
<IdLocation>^User.CPLexemeD</IdLocation>
<IndexLocation>^User.CPLexemeI</IndexLocation>
<StreamLocation>^User.CPLexemeS</StreamLocation>
<ExtentSize>10</ExtentSize>
<Data name="CPLexemeDefaultData">
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>Name</Value>
</Value>
</Data>
<Property name="%%CLASSNAME">
<Selectivity>100.0000%</Selectivity>
</Property>
<SQLMap name="IDKEY">
<BlockCount>-4</BlockCount>
</SQLMap>
<SQLMap name="IName">
<BlockCount>-4</BlockCount>
</SQLMap>
</Storage>
</Class>


<Class name="User.CPLexeme">
<Description>
Базовый класс всех типов понятий.</Description>
<Abstract>1</Abstract>
<SqlTableName>Lexeme</SqlTableName>
<Super>%Persistent,%Populate,%XML.Adaptor</Super>
<TimeChanged>63014,38896.593059</TimeChanged>
<TimeCreated>62794,39093.569499</TimeCreated>

<UDLText name="T">
<Content><![CDATA[
// Имя лексемы

]]></Content>
</UDLText>

<Property name="Name">
<Type>%String</Type>
<Required>1</Required>
<Parameter name="MAXLEN" value="500"/>
<Parameter name="POPSPEC" value="##class(User.CPLexeme).GiveNames()"/>
</Property>

<Index name="IName">
<Properties>Name</Properties>
<Unique>1</Unique>
</Index>

<Method name="IfExist">
<Description>
Проверка существования лексемы (обёртка над встроенным методом Index_Name_Exists)</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>LexToCheck:%String</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[	q ..INameExists(LexToCheck)
]]></Implementation>
</Method>

<Method name="GiveNames">
<ClassMethod>1</ClassMethod>
<ReturnType>%Library.String</ReturnType>
<Implementation><![CDATA[	q "Condition "_##class(%PopulateUtils).Counter(1)
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DataLocation>^User.CPLexemeD</DataLocation>
<DefaultData>CPLexemeDefaultData</DefaultData>
<IdLocation>^User.CPLexemeD</IdLocation>
<IndexLocation>^User.CPLexemeI</IndexLocation>
<StreamLocation>^User.CPLexemeS</StreamLocation>
<ExtentSize>10</ExtentSize>
<Data name="CPLexemeDefaultData">
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>Name</Value>
</Value>
</Data>
<Property name="%%CLASSNAME">
<Selectivity>100.0000%</Selectivity>
</Property>
<SQLMap name="IDKEY">
<BlockCount>-4</BlockCount>
</SQLMap>
<SQLMap name="IName">
<BlockCount>-4</BlockCount>
</SQLMap>
</Storage>
</Class>


<Class name="User.CPRelationships">
<Description>
Класс-родитель всех типов связей (понятия, свойства, функции, состояния)</Description>
<SqlTableName>Relationships</SqlTableName>
<Super>User.CPLexeme</Super>
<TimeChanged>63070,60025.971674</TimeChanged>
<TimeCreated>62794,39375.619614</TimeCreated>

<Property name="Description">
<Type>%String</Type>
<Parameter name="MAXLEN" value="500"/>
</Property>

<Method name="SaveNew">
<Description>
Сохраняем новые понятия, функции, признаки и состояния</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>rel:%String,fullClass:%String,shortClass:%String,context:User.Theme</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
  if ..IfExist(rel)=0
	{
	  s x=$zobjclassmethod(fullClass,"%New")
	    If ($IsObject(x))&&($IsObject(context))
		  {
		    // Сохранить концепт
		    s x.Name=rel
		    s rs1=x.%Save()
		    // Скопировать в статистику
		    s rs2=##class(User.Statistics).SaveStat(x,context,shortClass)
		    if ($$$ISOK(rs1)) && ($$$ISOK(rs2)) {
			   q $$$OK
		    }
		    else {
			   q $$$ERROR()
		    }   
		  }
		else
		  { 
			// Ошибка: не могу открыть объект
			q $$$ERROR()
		  }
	}
  else
	{
	  // Уже существует такой
	  q $$$ERROR()
	}
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DataLocation>^User.CPLexemeD</DataLocation>
<DefaultData>CPRelationshipsDefaultData</DefaultData>
<IdLocation>^User.CPLexemeD</IdLocation>
<IndexLocation>^User.CPRelationshipsI</IndexLocation>
<StreamLocation>^User.CPRelationshipsS</StreamLocation>
<ExtentSize>20</ExtentSize>
<Data name="CPRelationshipsDefaultData">
<Subscript>"CPRelationships"</Subscript>
<Value name="1">
<Value>Description</Value>
</Value>
<Value name="2">
<Value>%%CLASSNAME</Value>
</Value>
</Data>
<Property name="%%CLASSNAME">
<Selectivity>100.0000%</Selectivity>
</Property>
<Property name="Description">
<Selectivity>9.0909%</Selectivity>
</Property>
</Storage>
</Class>


<Class name="User.CPRelationships">
<Description>
Класс-родитель всех типов связей (понятия, свойства, функции, состояния)</Description>
<SqlTableName>Relationships</SqlTableName>
<Super>User.CPLexeme</Super>
<TimeChanged>63070,60025.971674</TimeChanged>
<TimeCreated>62794,39375.619614</TimeCreated>

<Property name="Description">
<Type>%String</Type>
<Parameter name="MAXLEN" value="500"/>
</Property>

<Method name="SaveNew">
<Description>
Сохраняем новые понятия, функции, признаки и состояния</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>rel:%String,fullClass:%String,shortClass:%String,context:User.Theme</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
  if ..IfExist(rel)=0
	{
	  s x=$zobjclassmethod(fullClass,"%New")
	    If ($IsObject(x))&&($IsObject(context))
		  {
		    // Сохранить концепт
		    s x.Name=rel
		    s rs1=x.%Save()
		    // Скопировать в статистику
		    s rs2=##class(User.Statistics).SaveStat(x,context,shortClass)
		    if ($$$ISOK(rs1)) && ($$$ISOK(rs2)) {
			   q $$$OK
		    }
		    else {
			   q $$$ERROR()
		    }   
		  }
		else
		  { 
			// Ошибка: не могу открыть объект
			q $$$ERROR()
		  }
	}
  else
	{
	  // Уже существует такой
	  q $$$ERROR()
	}
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DataLocation>^User.CPLexemeD</DataLocation>
<DefaultData>CPRelationshipsDefaultData</DefaultData>
<IdLocation>^User.CPLexemeD</IdLocation>
<IndexLocation>^User.CPRelationshipsI</IndexLocation>
<StreamLocation>^User.CPRelationshipsS</StreamLocation>
<ExtentSize>20</ExtentSize>
<Data name="CPRelationshipsDefaultData">
<Subscript>"CPRelationships"</Subscript>
<Value name="1">
<Value>Description</Value>
</Value>
<Value name="2">
<Value>%%CLASSNAME</Value>
</Value>
</Data>
<Property name="%%CLASSNAME">
<Selectivity>100.0000%</Selectivity>
</Property>
<Property name="Description">
<Selectivity>9.0909%</Selectivity>
</Property>
</Storage>
</Class>


<Class name="User.CPSemantics">
<SqlTableName>Semantics</SqlTableName>
<Super>User.CPLexeme</Super>
<TimeChanged>63014,38256.99391</TimeChanged>
<TimeCreated>62794,39314.712051</TimeCreated>

<UDLText name="T">
<Content><![CDATA[
// Род-вид + критерий классификации

]]></Content>
</UDLText>

<Property name="Explanation">
<Type>%String</Type>
<Parameter name="MAXLEN" value="500"/>
</Property>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DefaultData>CPSemanticsDefaultData</DefaultData>
<Data name="CPSemanticsDefaultData">
<Structure>listnode</Structure>
<Subscript>"CPSemantics"</Subscript>
<Value name="1">
<Value>Explanation</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="User.CPSemantics">
<SqlTableName>Semantics</SqlTableName>
<Super>User.CPLexeme</Super>
<TimeChanged>63014,38256.99391</TimeChanged>
<TimeCreated>62794,39314.712051</TimeCreated>

<UDLText name="T">
<Content><![CDATA[
// Род-вид + критерий классификации

]]></Content>
</UDLText>

<Property name="Explanation">
<Type>%String</Type>
<Parameter name="MAXLEN" value="500"/>
</Property>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DefaultData>CPSemanticsDefaultData</DefaultData>
<Data name="CPSemanticsDefaultData">
<Structure>listnode</Structure>
<Subscript>"CPSemantics"</Subscript>
<Value name="1">
<Value>Explanation</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="User.CPTest">
<Description><![CDATA[
Когнитивный прототип (Структура вида: Понятие<->Семантическая связь<->Список дочерних элементов)]]></Description>
<SqlTableName>CPTest</SqlTableName>
<Super>%Persistent,%Populate,%XML.Adaptor,%ZEN.DataModel.ObjectDataModel</Super>
<TimeChanged>63053,53279.101195</TimeChanged>
<TimeCreated>62794,46713.381783</TimeCreated>

<UDLText name="T">
<Content><![CDATA[
// ------------------СТРУКТУРА КП---------------------------

]]></Content>
</UDLText>

<Property name="Concept">
<Description>
Учебное понятие</Description>
<Type>CPConcept</Type>
<Required>1</Required>
</Property>

<Property name="Link">
<Description>
Тип семантических отношений</Description>
<Type>CPSemantics</Type>
<Required>1</Required>
</Property>

<Property name="Relations">
<Description>
Список дочерних элементов</Description>
<Type>CPRelationships</Type>
<Collection>list</Collection>
</Property>

<UDLText name="T">
<Content><![CDATA[/*------------------------MVC-------------------------*/
]]></Content>
</UDLText>

<Method name="%OnNewSource">
<Description>
Load an instance of a new (unsaved) source object for this DataModel.</Description>
<FormalSpec>*pSC:%Status=$$$OK</FormalSpec>
<ReturnType>%RegisteredObject</ReturnType>
<Implementation><![CDATA[  Quit ##class(User.CPTest).%New()
]]></Implementation>
</Method>

<Method name="%OnSaveSource">
<Description>
Save instance of associated source object.</Description>
<FormalSpec>pSource:User.CPTest</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
  Set tSC=pSource.%Save()
  If $$$ISOK(tSC)
   { 
     Set ..%id=pSource.%Id()
   }
  Quit tSC
]]></Implementation>
</Method>

<Method name="%OnOpenSource">
<Description>
Load an instance of the source object for this DataModel.</Description>
<FormalSpec>pID:%String,pConcurrency:%Integer=-1,*pSC:%Status=$$$OK</FormalSpec>
<ReturnType>%RegisteredObject</ReturnType>
<Implementation><![CDATA[  Quit ##class(User.CPTest).%OpenId(pID,pConcurrency,.pSC)
]]></Implementation>
</Method>

<Method name="%OnDeleteSource">
<Description>
Delete instance of associated source object.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pID:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[  Quit ##class(User.CPTest).%DeleteId(pID)
]]></Implementation>
</Method>

<Method name="%OnLoadModel">
<Description>
Do the actual work of loading values from the source object.</Description>
<FormalSpec>pSource:User.CPTest</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
  Set ..Concept = pSource.Concept
  Set ..Link = pSource.Link
  Set ..Relations=pSource.Relations
  /*Set ..TypeOfSt.Spec=pSource.TypeOfSt.Spec
  Set ..TypeOfSt.TypeOfEducation=pSource.TypeOfSt.TypeOfEducation
  Set ..TypeOfSt.YearOfStudy=pSource.TypeOfSt.YearOfStudy
  Set ..TypeOfSt.Class=pSource.TypeOfSt.Class*/
  Quit $$$OK
]]></Implementation>
</Method>

<Method name="%OnStoreModel">
<Description>
Do the actual work of storing values into the source object.</Description>
<FormalSpec>pSource:User.CPTest</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
  Set pSource.Concept = ..Concept
  Set pSource.Link = ..Link
  /*Set pSource.TypeOfSt.Spec=..TypeOfSt.Spec
  Set pSource.TypeOfSt.TypeOfEducation=..TypeOfSt.TypeOfEducation
  Set pSource.TypeOfSt.YearOfStudy=..TypeOfSt.YearOfStudy
  Set pSource.TypeOfSt.Class=..TypeOfSt.Class*/
  Quit $$$OK
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DataLocation>^User.CPTestTestD</DataLocation>
<DefaultData>CPTestTestDefaultData</DefaultData>
<IdLocation>^User.CPTestTestD</IdLocation>
<IndexLocation>^User.CPTestTestI</IndexLocation>
<StreamLocation>^User.CPTestTestS</StreamLocation>
<ExtentSize>20</ExtentSize>
<Data name="CPTestTestDefaultData">
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>Concept</Value>
</Value>
<Value name="3">
<Value>Link</Value>
</Value>
<Value name="4">
<Value>Relations</Value>
</Value>
</Data>
<Property name="%%CLASSNAME">
<Selectivity>100.0000%</Selectivity>
</Property>
<Property name="Concept">
<Selectivity>5.8824%</Selectivity>
</Property>
<Property name="Link">
<Selectivity>20.0000%</Selectivity>
</Property>
<Property name="Relations">
<Selectivity>5.2632%</Selectivity>
</Property>
<SQLMap name="IDKEY">
<BlockCount>-4</BlockCount>
</SQLMap>
</Storage>
</Class>


<Class name="User.CS">
<Description>
Case Study - учебный элемент постороенный на основе определённого КП</Description>
<SqlTableName>CS</SqlTableName>
<Super>%Persistent,%Populate,%XML.Adaptor,%ZEN.DataModel.Adaptor</Super>
<TimeChanged>63042,62983.089353</TimeChanged>
<TimeCreated>62993,57969.888688</TimeCreated>

<Property name="CP">
<Description>
Прототип на основе которого строится задание
Один прототип может быть связан с как минимум 4(!) CSs</Description>
<Type>User.CP</Type>
<Cardinality>one</Cardinality>
<Inverse>CSs</Inverse>
<Relationship>1</Relationship>
</Property>

<Index name="CPIndex">
<Properties>CP</Properties>
</Index>

<Property name="TypeOfCS">
<Description>
Тип задания (1-скрываем концепт, 2-скрываем связь, 3-скрываем i-й элемент когнитивной группы)</Description>
<Type>%Integer</Type>
<Required>1</Required>
<Parameter name="POPSPEC" value="Integer(1,3)"/>
</Property>

<Property name="SNOfHSubG">
<Description>
Порядковый номер элемента когнитивной группы подлежащего сокрытию. Для задач третьего типа</Description>
<Type>%Integer</Type>
<Parameter name="POPSPEC" value="ValueList(&quot;,&quot;,1,2,3)"/>
</Property>

<Property name="IWork">
<Description>
СРС включат в себя 10-30 CSs</Description>
<Type>User.IW</Type>
<Cardinality>one</Cardinality>
<Inverse>CSs</Inverse>
<Relationship>1</Relationship>
</Property>

<Index name="IWorkIndex">
<Properties>IWork</Properties>
</Index>

<Method name="CreateCS">
<Description>
Самостоятельная работа (СРС) в которой участвует данная задача
Сохраняем новый CS</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>currCP:User.CP,typeIs:%Integer,SNIs:%Integer</FormalSpec>
<ReturnType>CS</ReturnType>
<Implementation><![CDATA[
	If $IsObject(currCP)
	  {
		if typeIs'=""
		   {
			 if (typeIs=3)&&(SNIs="")
			   {
				 //&js<alert('Ошибка при передаче SNIs в метод класса CS');>
		         q $$$NULLOREF 
			   }
			 else
			   {
				 s newCS=..%New()
	             s newCS.TypeOfCS=typeIs
	             // Для задач третьего типа
	             If SNIs'="" s newCS.SNOfHSubG=SNIs
	             s newCS.CP=currCP
	             q newCS
			   }
		   }
	    else
	       {
		     //&js<alert('Ошибка при передаче TypeIs в метод класса CS');>
		     q $$$NULLOREF
	       }
	  }
	else
	  {
		//&js<alert('Ошибка при передаче CurrCP в метод класса CS');>
		q $$$NULLOREF
	  }
]]></Implementation>
</Method>

<Method name="SelectCS">
<Description>
Выбрать в случайном порядке CS на основе заданного КП (CP)
Вернуть объектную ссылку на CS, который подлежит вставке в IW </Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>currCP:%Integer,*myCS:CS</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
  // Получаем набор CSs на основе данного CP
  s tSQL="select ID,CP from CS where CP=?"
  s tResult = ##class(%SQL.Statement).%ExecDirect(,.tSQL,currCP)
  // Получаем список на основе RS с которым можно работать
  s list=..ListFromDynaSQL(tResult)
  if $$$ISERR(list) q $$$ERROR()    
  // Генерируем случайное число в диапазоне от 1 до (кол-во CSs)
  s randNum=1+$R(list.Count())
  // Открываем значение списка под этим номером
  s targetCSId=list.GetAt(randNum)
  s myCS=..%OpenId(targetCSId)
  q myCS
]]></Implementation>
</Method>

<Method name="ListFromDynaSQL">
<Description>
Формирует список IDs типа ListOfDataTypes из объекта %SQL.Statement
Входящий RS должен иметь поле ID</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>tRes:%SQL.StatementResult,*newList:%Library.ListOfDataTypes</FormalSpec>
<Private>1</Private>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	s newList=##class(%Library.ListOfDataTypes).%New()
	if $$$ISERR(tRes)
	  {
		q $$$ERROR($$$GeneralError,"Failure when executing the SQL query at CS class, ExtractSetOfCSs() or SelectCS() method.") 
	  }
      while tRes.%Next()
        {
	      // Пишем в список
	      d newList.Insert(tRes.ID)
        }
    if tRes.%ROWCOUNT=0 q $$$ERROR($$$GeneralError,"ExtractSetOfCSs() or SelectCS() method at CS class has returned Null!") 
    q newList
]]></Implementation>
</Method>

<Method name="ExtractSetOfCSs">
<Description>
Выбрать набор задач по данной теме для данного студента </Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>st:%Integer,con:%Integer,*tResult:%SQL.StatementResult</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
  s tSQL="select ID,IWork from CS where IWork->Student=? and IWork->Context=?"
  s tResult = ##class(%SQL.Statement).%ExecDirect(,.tSQL,st,con)
    if tResult.%SQLCODE<0
      {
	    q $$$ERROR() 
      }
    else
      {
	    q tResult
      }
]]></Implementation>
</Method>

<Method name="MixList">
<Description>
Получает перемешанную копию входящего списка</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>listToBeMixed:%Library.ListOfDataTypes,*mixedList:%Library.ListOfDataTypes</FormalSpec>
<Private>1</Private>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
  if $IsObject(listToBeMixed)
    {
      s mixedList=##class(%Library.ListOfDataTypes).%New()
      s listLength=listToBeMixed.Count()
      // Проходим по всем элементам листа
      for i=1:1:listLength
        {
	      // Генерируем случайное число [1;N]
	      s randNum=1+$R(listToBeMixed.Count())
	      // Получаем значение на его месте
	      s randVL=listToBeMixed.GetAt(randNum)
	      // Вставляем это значение в новый чистый список
	      d mixedList.Insert(randVL)
	      // Удаляем выбранное значение из старого листа
	      d listToBeMixed.RemoveAt(randNum)
	     // Длина листа уменьшилась на единицу
        }
    }
  else
    {
	   q $$$ERROR($$$GeneralError,"Input parameter at MixList() method of CS class is not an object")   
    }
 q mixedList
]]></Implementation>
</Method>

<Method name="Generator">
<Description>
Генерирует персональный набор задач по данной теме для данного студента
Возвращает список CSs для отображения на экране студента на странице IndependentWork
Алгоритм работы следущий:
На входе имеем "пустой" учебный план Curriculum (без сгенерированных задач)
Генерируем СРС по данной теме для данного студента:
1) Получаем набор CS по данной теме; 2) Выбираем в случайном порядке набор CS по одному на каждый CP для данного студента
3) Заполняем таблицу Independent Work (IW); 4) Формируем персональную полседовательность вывода CS для данного студента
5) Запоминаем эту последовательность в свойстве класса Curriculum</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>curr:User.Curriculum,*posErr:%String,*pList:%Library.ListOfDataTypes</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
  TSTART
	// Генерируем и записываем собственно набор в IW
	s cssCount=##class(User.IW).GetSetOfCSs(curr.Student,curr.Context)
	  if $$$ISERR(cssCount)
	   {
		 TROLLBACK
		 // Выводим содержание ошибки
		 w $system.Status.DisplayError(cssCount)
		 s posErr="Job at IW class has NOT been done successfully!"
		 q posErr
	   }
	// Устанавливаем индикатор, что персональный набор сформирован
	s curr.Presence=1
	/*---Генерируем персональную последовательность вывода для хранения в Curriculum---*/
	     s tRes=..ExtractSetOfCSs(curr.Student.%Id(),curr.Context.%Id())
	     s mylist=..ListFromDynaSQL(tRes)
	     if $$$ISERR(mylist)
	       {
		     TROLLBACK 
		     w $system.Status.DisplayError(mylist)
		     s posErr="ExtractSetOfCSs() method at CS class has returned Null!"
		     q posErr
	       }
	     else
	       {
	         s mixedList=..MixList(mylist)
	         // Сохраняем персональную последовательность вывода в Curriculum
	         d curr.OrderOfView.Clear()
	         //Обновили List в Curriculum.
	         s curr.OrderOfView=mixedList
	         // Сохраняем измненения в Curriculum
	         s rs=curr.%Save()
	           if $$$ISERR(rs) 
	             {
	               TROLLBACK
	               w $system.Status.DisplayError(rs)
	               s posErr="Can't save a Curriculum instance!"
		           q posErr
	             }
	         //w "Размер перемешанного списка= ",curr.OrderOfView.Count(),!
	        }
    /*--- Сгенерировали---*/
    TCOMMIT
   q curr.OrderOfView
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DataLocation>^User.CSD</DataLocation>
<DefaultData>CSDefaultData</DefaultData>
<IdLocation>^User.CSD</IdLocation>
<IndexLocation>^User.CSI</IndexLocation>
<StreamLocation>^User.CSS</StreamLocation>
<ExtentSize>100000</ExtentSize>
<Data name="CSDefaultData">
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>Prototype</Value>
</Value>
<Value name="3">
<Value>TypeOfP</Value>
</Value>
<Value name="4">
<Value>SNOfHSubG</Value>
</Value>
<Value name="5">
<Value>CP</Value>
</Value>
<Value name="6">
<Value>IWork</Value>
</Value>
<Value name="7">
<Value>TypeOfCS</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="User.CS">
<Description>
Case Study - учебный элемент постороенный на основе определённого КП</Description>
<SqlTableName>CS</SqlTableName>
<Super>%Persistent,%Populate,%XML.Adaptor,%ZEN.DataModel.Adaptor</Super>
<TimeChanged>63042,62983.089353</TimeChanged>
<TimeCreated>62993,57969.888688</TimeCreated>

<Property name="CP">
<Description>
Прототип на основе которого строится задание
Один прототип может быть связан с как минимум 4(!) CSs</Description>
<Type>User.CP</Type>
<Cardinality>one</Cardinality>
<Inverse>CSs</Inverse>
<Relationship>1</Relationship>
</Property>

<Index name="CPIndex">
<Properties>CP</Properties>
</Index>

<Property name="TypeOfCS">
<Description>
Тип задания (1-скрываем концепт, 2-скрываем связь, 3-скрываем i-й элемент когнитивной группы)</Description>
<Type>%Integer</Type>
<Required>1</Required>
<Parameter name="POPSPEC" value="Integer(1,3)"/>
</Property>

<Property name="SNOfHSubG">
<Description>
Порядковый номер элемента когнитивной группы подлежащего сокрытию. Для задач третьего типа</Description>
<Type>%Integer</Type>
<Parameter name="POPSPEC" value="ValueList(&quot;,&quot;,1,2,3)"/>
</Property>

<Property name="IWork">
<Description>
СРС включат в себя 10-30 CSs</Description>
<Type>User.IW</Type>
<Cardinality>one</Cardinality>
<Inverse>CSs</Inverse>
<Relationship>1</Relationship>
</Property>

<Index name="IWorkIndex">
<Properties>IWork</Properties>
</Index>

<Method name="CreateCS">
<Description>
Самостоятельная работа (СРС) в которой участвует данная задача
Сохраняем новый CS</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>currCP:User.CP,typeIs:%Integer,SNIs:%Integer</FormalSpec>
<ReturnType>CS</ReturnType>
<Implementation><![CDATA[
	If $IsObject(currCP)
	  {
		if typeIs'=""
		   {
			 if (typeIs=3)&&(SNIs="")
			   {
				 //&js<alert('Ошибка при передаче SNIs в метод класса CS');>
		         q $$$NULLOREF 
			   }
			 else
			   {
				 s newCS=..%New()
	             s newCS.TypeOfCS=typeIs
	             // Для задач третьего типа
	             If SNIs'="" s newCS.SNOfHSubG=SNIs
	             s newCS.CP=currCP
	             q newCS
			   }
		   }
	    else
	       {
		     //&js<alert('Ошибка при передаче TypeIs в метод класса CS');>
		     q $$$NULLOREF
	       }
	  }
	else
	  {
		//&js<alert('Ошибка при передаче CurrCP в метод класса CS');>
		q $$$NULLOREF
	  }
]]></Implementation>
</Method>

<Method name="SelectCS">
<Description>
Выбрать в случайном порядке CS на основе заданного КП (CP)
Вернуть объектную ссылку на CS, который подлежит вставке в IW </Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>currCP:%Integer,*myCS:CS</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
  // Получаем набор CSs на основе данного CP
  s tSQL="select ID,CP from CS where CP=?"
  s tResult = ##class(%SQL.Statement).%ExecDirect(,.tSQL,currCP)
  // Получаем список на основе RS с которым можно работать
  s list=..ListFromDynaSQL(tResult)
  if $$$ISERR(list) q $$$ERROR()    
  // Генерируем случайное число в диапазоне от 1 до (кол-во CSs)
  s randNum=1+$R(list.Count())
  // Открываем значение списка под этим номером
  s targetCSId=list.GetAt(randNum)
  s myCS=..%OpenId(targetCSId)
  q myCS
]]></Implementation>
</Method>

<Method name="ListFromDynaSQL">
<Description>
Формирует список IDs типа ListOfDataTypes из объекта %SQL.Statement
Входящий RS должен иметь поле ID</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>tRes:%SQL.StatementResult,*newList:%Library.ListOfDataTypes</FormalSpec>
<Private>1</Private>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	s newList=##class(%Library.ListOfDataTypes).%New()
	if $$$ISERR(tRes)
	  {
		q $$$ERROR($$$GeneralError,"Failure when executing the SQL query at CS class, ExtractSetOfCSs() or SelectCS() method.") 
	  }
      while tRes.%Next()
        {
	      // Пишем в список
	      d newList.Insert(tRes.ID)
        }
    if tRes.%ROWCOUNT=0 q $$$ERROR($$$GeneralError,"ExtractSetOfCSs() or SelectCS() method at CS class has returned Null!") 
    q newList
]]></Implementation>
</Method>

<Method name="ExtractSetOfCSs">
<Description>
Выбрать набор задач по данной теме для данного студента </Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>st:%Integer,con:%Integer,*tResult:%SQL.StatementResult</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
  s tSQL="select ID,IWork from CS where IWork->Student=? and IWork->Context=?"
  s tResult = ##class(%SQL.Statement).%ExecDirect(,.tSQL,st,con)
    if tResult.%SQLCODE<0
      {
	    q $$$ERROR() 
      }
    else
      {
	    q tResult
      }
]]></Implementation>
</Method>

<Method name="MixList">
<Description>
Получает перемешанную копию входящего списка</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>listToBeMixed:%Library.ListOfDataTypes,*mixedList:%Library.ListOfDataTypes</FormalSpec>
<Private>1</Private>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
  if $IsObject(listToBeMixed)
    {
      s mixedList=##class(%Library.ListOfDataTypes).%New()
      s listLength=listToBeMixed.Count()
      // Проходим по всем элементам листа
      for i=1:1:listLength
        {
	      // Генерируем случайное число [1;N]
	      s randNum=1+$R(listToBeMixed.Count())
	      // Получаем значение на его месте
	      s randVL=listToBeMixed.GetAt(randNum)
	      // Вставляем это значение в новый чистый список
	      d mixedList.Insert(randVL)
	      // Удаляем выбранное значение из старого листа
	      d listToBeMixed.RemoveAt(randNum)
	     // Длина листа уменьшилась на единицу
        }
    }
  else
    {
	   q $$$ERROR($$$GeneralError,"Input parameter at MixList() method of CS class is not an object")   
    }
 q mixedList
]]></Implementation>
</Method>

<Method name="Generator">
<Description>
Генерирует персональный набор задач по данной теме для данного студента
Возвращает список CSs для отображения на экране студента на странице IndependentWork
Алгоритм работы следущий:
На входе имеем "пустой" учебный план Curriculum (без сгенерированных задач)
Генерируем СРС по данной теме для данного студента:
1) Получаем набор CS по данной теме; 2) Выбираем в случайном порядке набор CS по одному на каждый CP для данного студента
3) Заполняем таблицу Independent Work (IW); 4) Формируем персональную полседовательность вывода CS для данного студента
5) Запоминаем эту последовательность в свойстве класса Curriculum</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>curr:User.Curriculum,*posErr:%String,*pList:%Library.ListOfDataTypes</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
  TSTART
	// Генерируем и записываем собственно набор в IW
	s cssCount=##class(User.IW).GetSetOfCSs(curr.Student,curr.Context)
	  if $$$ISERR(cssCount)
	   {
		 TROLLBACK
		 // Выводим содержание ошибки
		 w $system.Status.DisplayError(cssCount)
		 s posErr="Job at IW class has NOT been done successfully!"
		 q posErr
	   }
	// Устанавливаем индикатор, что персональный набор сформирован
	s curr.Presence=1
	/*---Генерируем персональную последовательность вывода для хранения в Curriculum---*/
	     s tRes=..ExtractSetOfCSs(curr.Student.%Id(),curr.Context.%Id())
	     s mylist=..ListFromDynaSQL(tRes)
	     if $$$ISERR(mylist)
	       {
		     TROLLBACK 
		     w $system.Status.DisplayError(mylist)
		     s posErr="ExtractSetOfCSs() method at CS class has returned Null!"
		     q posErr
	       }
	     else
	       {
	         s mixedList=..MixList(mylist)
	         // Сохраняем персональную последовательность вывода в Curriculum
	         d curr.OrderOfView.Clear()
	         //Обновили List в Curriculum.
	         s curr.OrderOfView=mixedList
	         // Сохраняем измненения в Curriculum
	         s rs=curr.%Save()
	           if $$$ISERR(rs) 
	             {
	               TROLLBACK
	               w $system.Status.DisplayError(rs)
	               s posErr="Can't save a Curriculum instance!"
		           q posErr
	             }
	         //w "Размер перемешанного списка= ",curr.OrderOfView.Count(),!
	        }
    /*--- Сгенерировали---*/
    TCOMMIT
   q curr.OrderOfView
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DataLocation>^User.CSD</DataLocation>
<DefaultData>CSDefaultData</DefaultData>
<IdLocation>^User.CSD</IdLocation>
<IndexLocation>^User.CSI</IndexLocation>
<StreamLocation>^User.CSS</StreamLocation>
<ExtentSize>100000</ExtentSize>
<Data name="CSDefaultData">
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>Prototype</Value>
</Value>
<Value name="3">
<Value>TypeOfP</Value>
</Value>
<Value name="4">
<Value>SNOfHSubG</Value>
</Value>
<Value name="5">
<Value>CP</Value>
</Value>
<Value name="6">
<Value>IWork</Value>
</Value>
<Value name="7">
<Value>TypeOfCS</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="User.Completion">
<Description>
Указывает на статистику завершения темы для конкретного студента</Description>
<Super>%Persistent,%Populate</Super>
<TimeChanged>63047,52873.104737</TimeChanged>
<TimeCreated>63047,52583.460967</TimeCreated>

<Property name="Student">
<Description>
Студент чья работа в течение времени обечения предмету рассматривается</Description>
<Type>User.Learner</Type>
</Property>

<Property name="Subject">
<Description>
Прдемет, который изучал студент на протяжении семестра</Description>
<Type>User.Subject</Type>
</Property>

<Property name="IfCompleted">
<Description>
Признак завершения учебной работы по данному предмету</Description>
<Type>%Boolean</Type>
<InitialExpression>0</InitialExpression>
</Property>

<Property name="IfPassed">
<Description>
Признак зачтена или не зачтена работа за период изуения данного предмета.</Description>
<Type>%Boolean</Type>
<InitialExpression>0</InitialExpression>
</Property>

<Property name="AverageMark">
<Description>
Средняя оценка за предмет</Description>
<Type>%Double</Type>
</Property>

<Property name="ExamMark">
<Description>
оценка за экзамен</Description>
<Type>%String</Type>
</Property>

<Property name="Mark">
<Description>
Оценка в зачётку</Description>
<Type>%String</Type>
</Property>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DataLocation>^User.CompletionD</DataLocation>
<DefaultData>CompletionDefaultData</DefaultData>
<IdLocation>^User.CompletionD</IdLocation>
<IndexLocation>^User.CompletionI</IndexLocation>
<StreamLocation>^User.CompletionS</StreamLocation>
<ExtentSize>100000</ExtentSize>
<Data name="CompletionDefaultData">
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>Student</Value>
</Value>
<Value name="3">
<Value>Subject</Value>
</Value>
<Value name="4">
<Value>IfCompleted</Value>
</Value>
<Value name="5">
<Value>IfPassed</Value>
</Value>
<Value name="6">
<Value>AverageMark</Value>
</Value>
<Value name="7">
<Value>ExamMark</Value>
</Value>
<Value name="8">
<Value>Mark</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="User.ConDepartment">
<SqlTableName>Department</SqlTableName>
<Super>%Persistent,%Populate</Super>
<TimeChanged>63004,58171.462398</TimeChanged>
<TimeCreated>62857,38242.488297</TimeCreated>

<Property name="Name">
<Type>%String</Type>
<Required>1</Required>
<Parameter name="MAXLEN" value="500"/>
<Parameter name="POPSPEC" value="ValueList(&quot;,Каф. мед. биологии,Каф. гистологии&quot;)"/>
</Property>

<Index name="IN">
<Properties>Name</Properties>
<Unique>1</Unique>
</Index>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DataLocation>^User.ConDepartmentD</DataLocation>
<DefaultData>ConDepartmentDefaultData</DefaultData>
<IdLocation>^User.ConDepartmentD</IdLocation>
<IndexLocation>^User.ConDepartmentI</IndexLocation>
<StreamLocation>^User.ConDepartmentS</StreamLocation>
<ExtentSize>2</ExtentSize>
<Data name="ConDepartmentDefaultData">
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>Name</Value>
</Value>
</Data>
<Property name="%%CLASSNAME">
<Selectivity>100.0000%</Selectivity>
</Property>
<SQLMap name="IDKEY">
<BlockCount>-4</BlockCount>
</SQLMap>
<SQLMap name="IN">
<BlockCount>-4</BlockCount>
</SQLMap>
</Storage>
</Class>


<Class name="User.ConSubject">
<Description>
Предметы</Description>
<SqlTableName>Subject</SqlTableName>
<Super>%Persistent,%Populate</Super>
<TimeChanged>63004,58129.733778</TimeChanged>
<TimeCreated>62857,38242.488297</TimeCreated>

<Property name="Name">
<Type>%String</Type>
<Required>1</Required>
<Parameter name="MAXLEN" value="500"/>
<Parameter name="POPSPEC" value="ValueList(&quot;,Биология,Цитология,Эмбриология,Гистология&quot;)"/>
</Property>

<Index name="IN">
<Properties>Name</Properties>
<Unique>1</Unique>
</Index>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DataLocation>^User.ConSubjectD</DataLocation>
<DefaultData>ConSubjectDefaultData</DefaultData>
<IdLocation>^User.ConSubjectD</IdLocation>
<IndexLocation>^User.ConSubjectI</IndexLocation>
<StreamLocation>^User.ConSubjectS</StreamLocation>
<ExtentSize>4</ExtentSize>
<Data name="ConSubjectDefaultData">
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>Name</Value>
</Value>
</Data>
<Property name="%%CLASSNAME">
<Selectivity>100.0000%</Selectivity>
</Property>
<SQLMap name="IDKEY">
<BlockCount>-4</BlockCount>
</SQLMap>
<SQLMap name="IN">
<BlockCount>-4</BlockCount>
</SQLMap>
</Storage>
</Class>


<Class name="User.ConSubject">
<Description>
Предметы</Description>
<SqlTableName>Subject</SqlTableName>
<Super>%Persistent,%Populate</Super>
<TimeChanged>63004,58129.733778</TimeChanged>
<TimeCreated>62857,38242.488297</TimeCreated>

<Property name="Name">
<Type>%String</Type>
<Required>1</Required>
<Parameter name="MAXLEN" value="500"/>
<Parameter name="POPSPEC" value="ValueList(&quot;,Биология,Цитология,Эмбриология,Гистология&quot;)"/>
</Property>

<Index name="IN">
<Properties>Name</Properties>
<Unique>1</Unique>
</Index>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DataLocation>^User.ConSubjectD</DataLocation>
<DefaultData>ConSubjectDefaultData</DefaultData>
<IdLocation>^User.ConSubjectD</IdLocation>
<IndexLocation>^User.ConSubjectI</IndexLocation>
<StreamLocation>^User.ConSubjectS</StreamLocation>
<ExtentSize>4</ExtentSize>
<Data name="ConSubjectDefaultData">
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>Name</Value>
</Value>
</Data>
<Property name="%%CLASSNAME">
<Selectivity>100.0000%</Selectivity>
</Property>
<SQLMap name="IDKEY">
<BlockCount>-4</BlockCount>
</SQLMap>
<SQLMap name="IN">
<BlockCount>-4</BlockCount>
</SQLMap>
</Storage>
</Class>


<Class name="User.ConTheme">
<SqlTableName>Theme</SqlTableName>
<Super>%Persistent,%Populate</Super>
<TimeChanged>63041,42164.300037</TimeChanged>
<TimeCreated>62857,40448.400007</TimeCreated>

<Property name="Name">
<Description>
Название темы учебной дисциплины</Description>
<Type>%String</Type>
<Required>1</Required>
<Parameter name="MAXLEN" value="500"/>
<Parameter name="POPSPEC" value="ValueList(&quot;,Основы учения о клетке,Ядро клетки,Основы эмбриологии,Гаструляция,Принципы организации тканей,Соединительные ткани,Кровь,Гемограмма,Хрящивые ткани,Костные ткани,Мышечные ткани,Нервная ткань,Цитоплазма,Железы,Клеточное деление,Провизорные органы &quot;)"/>
</Property>

<Index name="INn">
<Properties>Name</Properties>
<Unique>1</Unique>
</Index>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DataLocation>^User.ConThemeD</DataLocation>
<DefaultData>ConThemeDefaultData</DefaultData>
<IdLocation>^User.ConThemeD</IdLocation>
<IndexLocation>^User.ConThemeI</IndexLocation>
<StreamLocation>^User.ConThemeS</StreamLocation>
<ExtentSize>16</ExtentSize>
<Data name="ConThemeDefaultData">
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>Name</Value>
</Value>
<Value name="3">
<Value>Title</Value>
</Value>
</Data>
<Property name="%%CLASSNAME">
<Selectivity>100.0000%</Selectivity>
</Property>
<Property name="Name">
<Selectivity>10.0000%</Selectivity>
</Property>
<Property name="Title">
<Selectivity>12.5000%</Selectivity>
</Property>
<SQLMap name="IDKEY">
<BlockCount>-4</BlockCount>
</SQLMap>
<SQLMap name="INn">
<BlockCount>-4</BlockCount>
</SQLMap>
<SQLMap name="INt">
<BlockCount>-4</BlockCount>
</SQLMap>
</Storage>
</Class>


<Class name="User.ContextNew">
<Description><![CDATA[
Контекст: Кафедра->Предмет->Тема+Контингент студентов для которых эта тема разработана]]></Description>
<SqlTableName>Context</SqlTableName>
<Super>%Persistent,%Populate,%ZEN.DataModel.ObjectDataModel</Super>
<TimeChanged>63046,49085.448996</TimeChanged>
<TimeCreated>62941,56992.095332</TimeCreated>

<Property name="TypeOfSt">
<Description>
Контингент студентов для которых эта тема (контекст) были разработаны</Description>
<Type>StCategory</Type>
<Required>1</Required>
</Property>

<Property name="Author">
<Description>
Автор (преподаватель-разработчик) эталонной модели данного учебного курса</Description>
<Type>Teacher</Type>
</Property>

<Property name="ConHash">
<Description>
Дата и время создания (Empty)
Дата и время редактирования (Empty)
Хешированная копия данного контекста</Description>
<Type>%String</Type>
<Parameter name="MAXLEN" value="1000"/>
</Property>

<UDLText name="T">
<Content><![CDATA[
// Index ConInd On ConHash [ Unique ];

]]></Content>
</UDLText>

<Property name="IsEmpty">
<Description>
Признак завершения: если контекст содержит какое то количесвто CP (два и более - тема может считаться завершённой)</Description>
<Type>%Boolean</Type>
<InitialExpression>"0"</InitialExpression>
</Property>

<Property name="QuantitityOf">
<Description>
Количество задач которые будут сгенерированы для студентов на основе RM даной темы
По умолчанию для данного контингента студентов доступны все Case Studies из данного контекста (значок *)</Description>
<Type>%String</Type>
<InitialExpression>"*"</InitialExpression>
</Property>

<UDLText name="T">
<Content><![CDATA[
// Привязка понятий к конкретному контексту. (Не уверен что нужно но пусть пока будет)

]]></Content>
</UDLText>

<UDLText name="T">
<Content><![CDATA[
// Relationship Rel As User.CPRelationships [ Cardinality = many, Inverse = Context ];

]]></Content>
</UDLText>

<UDLText name="T">
<Content><![CDATA[/*--------------Бизнес логика----------------*/
]]></Content>
</UDLText>

<Method name="CheckContext">
<Description>
Проверяем существование контекста</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>SubjectToCheck:%Integer,CourseToCheck:%Integer,ThemeToCheck:%Integer</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
    // The method returns a boolean, indicating success (1) or failure (0).
    q ..SCTExists(SubjectToCheck, CourseToCheck, ThemeToCheck)
]]></Implementation>
</Method>

<Method name="GetSetOfConts">
<Description>
Получает набор контекстов доступных для данной категории студентов, на основе которого будет создан учебный план для вновь зарегенного студента
Аргументом является категория текущего студента в форме {Специальность (ТПКС), Форма обучения (Дневное), курс (1 курс), Группа (10)}
По группе пока не фильтруем, при необходимости - снять закомменированную строку.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>TypeOfSt:User.StCategory</FormalSpec>
<ReturnType>%SQL.StatementResult</ReturnType>
<Implementation><![CDATA[
  s StsSpec=TypeOfSt.Spec
  s StsType=TypeOfSt.TypeOfEducation
  s StsYear=TypeOfSt.YearOfStudy
  s tStatement = ##class(%SQL.Statement).%New()
  s tStatement.%ObjectSelectMode = 1
  s tSQL=4
  s tSQL(1)="select ID,TypeOfSt from Context"
  s tSQL(2)="where ? %INLIST GetList(TypeOfSt_Spec,'Spec')"
  s tSQL(3)="and ? %INLIST GetList(TypeOfSt_TypeOfEducation,'Type')"
  s tSQL(4)="and TypeOfSt_YearOfStudy=?"
  //s tSQL(5)="and SQLUser.GetList(TypeOfSt_TypeOfClass,'Class')"
  s dynd=3,dynd(1)=StsSpec,dynd(2)=StsType,dynd(3)=StsYear
  s tStatus = tStatement.%Prepare(.tSQL)
  s tResult = tStatement.%Execute(dynd...)
  //d tResult.%Display()
  q tResult
]]></Implementation>
</Method>

<Method name="GetList">
<Description>
Возвращает список из строки (Для метода поиска контекстов по категориям студентов) GetSetOfConts()</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>myString:%String,Arg:%String</FormalSpec>
<ReturnType>%List</ReturnType>
<SqlName>GetList</SqlName>
<SqlProc>1</SqlProc>
<Implementation><![CDATA[
    if myString="*" {q ##class(User.StCategory).GetFullList(Arg)}
    Quit $LFS(myString,";")
]]></Implementation>
</Method>
</Class>


<Class name="User.Curriculum">
<Description>
Учебный план студента (ранее - модель студента)</Description>
<SqlTableName>Curriculum</SqlTableName>
<Super>%Persistent,%Populate,%XML.Adaptor</Super>
<TimeChanged>63081,58040.090441</TimeChanged>
<TimeCreated>62930,55013.571787</TimeCreated>

<Property name="Student">
<Description>
Студент, чей собственно учебный план.</Description>
<Type>User.Learner</Type>
<Required>1</Required>
</Property>

<Property name="Context">
<Description>
Контекст (тема), которую изучает студент</Description>
<Type>User.Theme</Type>
<Required>1</Required>
</Property>

<Index name="StCon">
<Properties>Student,Context</Properties>
<Unique>1</Unique>
</Index>

<Property name="ifHide">
<Description>
Доступен ли этот контекст для этого студента? (1-"доступен", 0 - "недоступен")</Description>
<Type>%Boolean</Type>
<InitialExpression>1</InitialExpression>
</Property>

<Property name="Presence">
<Description>
Наличие уже сгенерированного персонального (возможно даже уникального*) набора Case Studies для данного студента в данном контексте?</Description>
<Type>%Boolean</Type>
<InitialExpression>0</InitialExpression>
</Property>

<Property name="OrderOfView">
<Description>
Порядок выдачи задач данного контекста для данного студента.
Для каждого студента порядок выдачи задач свой и формируется в момент времени когда студент в первый раз начал работу по данной теме</Description>
<Type>%Integer</Type>
<Collection>list</Collection>
</Property>

<Property name="Performance">
<Description>
Процент выполнения СРС студентом. Сохранял уже какие либо результаты своей работы студент?
Сколько процентов задач выполнено (сколько шаблонов было заполнено ответами студента)</Description>
<Type>%Double</Type>
<InitialExpression>0</InitialExpression>
<Parameter name="MAXVAL" value="100"/>
<Parameter name="MINVAL" value="0"/>
<Parameter name="POPSPEC" value="Float(50,100)"/>
</Property>

<UDLText name="T">
<Content><![CDATA[
// Property PerformanceP As %String [ SqlComputeCode = { Set {PerformanceP} = $FNUMBER({Performance},",",2)_" %" }, SqlComputed ];

]]></Content>
</UDLText>

<Property name="DateOfPerform">
<Description>
Дата и время последней работы с задачами темы (дата и время последнего редактирования СРС с сохранением).</Description>
<Type>%TimeStamp</Type>
</Property>

<Property name="DeadlineDate">
<Description>
Срок завершения СРС (Дата практического занятия по данной теме)</Description>
<Type>%Date</Type>
<Parameter name="FORMAT" value="4"/>
</Property>

<Property name="Status">
<Description>
Статус: проверено/непроверено. ["False"/"True"]</Description>
<Type>%Boolean</Type>
<InitialExpression>0</InitialExpression>
</Property>

<Property name="Teacher">
<Description>
Преподаватель, кто проверил работу (если она проверена).</Description>
<Type>User.Teacher</Type>
</Property>

<Property name="DateOfChecking">
<Description>
Дата и время проверки</Description>
<Type>%TimeStamp</Type>
</Property>

<Property name="Result">
<Description>
Процент верно решённых задач</Description>
<Type>%Double</Type>
<InitialExpression>0</InitialExpression>
<Parameter name="FORMAT" value=","/>
<Parameter name="MAXVAL" value="100"/>
<Parameter name="MINVAL" value="0"/>
<Parameter name="POPSPEC" value="Float(30,100)"/>
</Property>

<UDLText name="T">
<Content><![CDATA[
// Property ResultP As %String [ SqlComputeCode = { Set {ResultP} = $FNUMBER({Result},",",2)_" %" }, SqlComputed ];

]]></Content>
</UDLText>

<Property name="Mark">
<Description>
Традиционная 4-х бальная оценка в зависимости от требований по количеству верно отвеченных вопросов
("50%-70%" -"3", "70%-85%" -"4", "85%-100%" -"5")</Description>
<Type>%String</Type>
<SqlComputeCode> Set {Mark} = ##class(User.Curriculum).CalculateMark({Result},{Status}) </SqlComputeCode>
<SqlComputed>1</SqlComputed>
<SqlComputeOnChange>Result</SqlComputeOnChange>
<Parameter name="POPSPEC" value="Integer(2,5)"/>
</Property>

<UDLText name="T">
<Content><![CDATA[
// -----------------------------МЕТОДЫ-----------------------------

]]></Content>
</UDLText>

<Method name="CalculateMark">
<Description>
Вычисляет оценку для калькулируемого свойства</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>percentage:%Double,status:%Boolean</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
  if (percentage=0)&&(status'=1) {
    s mark="No mark"
  }
  elseif percentage<50 {
	s mark="Unsatisfactory (2)"
  }
  elseif (percentage>50) && (percentage<70) {
	s mark="Satisfactory (3)"  
  }
  elseif (percentage>69) && (percentage<85) {
	s mark="Good (4)"
  }
  else {
	s mark="Excellent (5)"
  }
  q mark
]]></Implementation>
</Method>

<Method name="CheckPres">
<Description>
Проверяем наличие объекта с заданными ID студента и ID темы</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>StudentToCheck:%Integer,ThemeToCheck:%Integer</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
    // The method returns a boolean, indicating success (1) or failure (0).
    q ..StConExists(StudentToCheck, ThemeToCheck)
]]></Implementation>
</Method>

<Method name="GetSetOfSts">
<Description>
Выбрать "активных" студентов (т.е. объект SQL.Statement) из текущего учебного плана
,по заданным атрибутам категории студентов (Специальность, Форма обучения, Курс, Группа)
Третий параметр ifForUpdate определяем как мы будем выбирать студентов и их учебные планы: для обновления (создания 0) или для модификации (1) учебных планов
"Обновление" означает, что в учебные планы каждого из студентов в выборке будет добавлена запись нового контекста.
"Модификация" означает, что определённый контекст будет изъят или наоборт включен в учебный палн каждого из студентов в выборке.
Последний четвёртый параметр forDynd содержит количество элементов динамического массива для метода %Execute(), 3 - для обновления, 4 - для модификации
Выборка по группе отсутствует, курс - не может быть списком (1 курс)</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>Category:User.StCategory,Context:%String,ifForUpdate:%Boolean=0,forDynd:%Integer=3</FormalSpec>
<ReturnType>%SQL.StatementResult</ReturnType>
<Implementation><![CDATA[
 //------Разбираем входные данные:-------
 if Category.Spec="*" 
    {
	  s StSpec=##class(User.StCategory).GetFullList("Spec")
	} 
  else 
	{
	  s StSpec=##class(User.StCategory).GetShortList(Category.Spec)
    }
  if Category.TypeOfEducation="*" 
    {
	  s StType=##class(User.StCategory).GetFullList("Type")
	} 
  else 
	{
	  s StType=##class(User.StCategory).GetShortList(Category.TypeOfEducation)
    }

  s StYear=Category.YearOfStudy
    
  //--------------ФОРМИРУЕМ ЗАПРОС---------------
  s tStatement = ##class(%SQL.Statement).%New()
  s tStatement.%ObjectSelectMode = 1
  s tSQL=6
  s tSQL(1)="select ID,Student,Context from Curriculum"
  s tSQL(2)="where Student->ifActive=1"
  s tSQL(3)="and Student->TypeOfSt_Spec %INLIST ? SIZE((10))"
  s tSQL(4)="and Student->TypeOfSt_TypeOfEducation %INLIST ? SIZE((10))"
  s tSQL(5)="and Student->TypeOfSt_YearOfStudy=?"
  s dynd=forDynd,dynd(1)=StSpec,dynd(2)=StType,dynd(3)=StYear
  // Определяем выборка студентов для создания или модификации ?
  if ifForUpdate=0 {s tSQL(6)="GROUP BY Student"} else {s tSQL(6)="GROUP BY Student HAVING Context=?",dynd(4)=Context}
  s tStatus = tStatement.%Prepare(.tSQL)
  s tResult = tStatement.%Execute(dynd...)
  //d tResult.%Display()
  q tResult
]]></Implementation>
</Method>

<Method name="GetSetOfStsUniversal">
<Description>
Универсальный метод GetSetOfSts()
Здесь категории студентов (Специальность, Форма обучения, Курс, Группа) могут быть списками, разделёнными ";"
Идентификатор "*" расматривается как дефолтный (полный) список категорий</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>Category:User.StCategory,Context:%String,ifForUpdate:%Boolean=0,forDynd:%Integer=3</FormalSpec>
<ReturnType>%SQL.StatementResult</ReturnType>
<Implementation><![CDATA[
  //------Разбираем входные данные:-------
  
  if Category.Spec="*" 
    {
	  s StSpec=##class(User.StCategory).GetFullList("Spec")
	} 
  else 
	{
	  s StSpec=##class(User.StCategory).GetShortList(Category.Spec)
    }
  if Category.TypeOfEducation="*" 
    {
	  s StType=##class(User.StCategory).GetFullList("Type")
	} 
  else 
	{
	  s StType=##class(User.StCategory).GetShortList(Category.TypeOfEducation)
    }
  if Category.YearOfStudy="*" 
    {
	  s StYear=##class(User.StCategory).GetFullList("Year")
	} 
  else 
	{
	  s StYear=##class(User.StCategory).GetShortList(Category.YearOfStudy)
    }
  if Category.Class="*" 
    {
	  s StClass=##class(User.StCategory).GetFullList("Class")
	} 
  else 
	{
	  s StClass=##class(User.StCategory).GetShortList(Category.Class)
    }
  //--------------ФОРМИРУЕМ ЗАПРОС---------------
  s tStatement = ##class(%SQL.Statement).%New()
  s tStatement.%ObjectSelectMode = 1
  s tSQL=7
  s tSQL(1)="select ID, Student,Context from Curriculum"
  s tSQL(2)="where Student->ifActive=1"
  s tSQL(3)="and Student->TypeOfSt_Spec %INLIST ? SIZE((10))"
  s tSQL(4)="and Student->TypeOfSt_TypeOfEducation %INLIST ? SIZE((10))"
  s tSQL(5)="and Student->TypeOfSt_YearOfStudy %INLIST ? SIZE ((10))"
  s tSQL(6)="and Student->TypeOfSt_Class %INLIST ? SIZE ((10))"
  s dynd=forDynd+1,dynd(1)=StSpec,dynd(2)=StType,dynd(3)=StYear,dynd(4)=StClass
  // Определяем выборка студентов для создания или модификации ?
  if ifForUpdate=0 {s tSQL(7)="GROUP BY Student"} else {s tSQL(7)="GROUP BY Student HAVING Context=?",dynd(5)=Context}
  s tStatus = tStatement.%Prepare(.tSQL)
  s tResult = tStatement.%Execute(dynd...)
  //d tResult.%Display()
  q tResult
]]></Implementation>
</Method>

<Method name="GetSetOfStsRS">
<Internal>1</Internal>
<ClassMethod>1</ClassMethod>
<FormalSpec>StSpec:%String="ТПКС;Фарм",StType:%String="Дневное",StYear:%String="1 курс",StClass:%String="5"</FormalSpec>
<ReturnType>%Library.ResultSet</ReturnType>
<Implementation><![CDATA[
	s tRS = ##class(%ResultSet).%New()
	s sql="select * from Curriculum where Student->TypeOfSt_Spec %INLIST ? and Student->TypeOfSt_TypeOfEducation=? and Student->TypeOfSt_YearOfStudy=? and Student->TypeOfSt_Class=?"
	s tSC = tRS.Prepare(sql)
	s tSC=tRS.Execute($LFS(StSpec,";"),StType,StYear,StClass)
	  While tRS.Next(.tSC) 
		{
		  Write "ID= ",$get(tRS.Data("ID")),"Student= ",$get(tRS.Data("Student")),"Context= ",$get(tRS.Data("Context")),"ifHide= ",$get(tRS.Data("ifHide")),!
	    }
	q tRS
]]></Implementation>
</Method>

<Method name="UpdateCurriculum">
<Description>
Добавление (создание) новой записи c новым контекстом в учебный план каждого студента заданной категории
Возвращает количество студентов, чьи учебные планы были успешно обновлены (ожидается поток студентов (100-300 человек))
Если возникают проблемы с обновлением хотябы одного из учебных планов - откатываем транзакцию.
Продумать: если мы собираемся добавить неуникальную запись в Curruculum, тогда сущесвующую запись следует обновить до ifHide=1</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>Context:User.Theme="",*quantity:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
  if Context=$$$NULLOREF q $$$ERROR($$$GeneralError,"Failure when passing Context's OREF.")
     // Получаем список студентов, чей учебный план нужно добавить заданный контекст (учебную тему)
     // GetSetOfStsUniversal
     s tResult=##class(User.Learner).GetSetOfSts(Context.Subject.TypeOfSt)
     // %SQLCODE должен быть >=0
     if 'tResult.%SQLCODE 
       {
		 TSTART
		 s errCode=""
	     // Тут выбраны студенты, чей учебный план не содержит ещё такого контекста (темы)
	      while tResult.%Next()
	         {
	 	       s newCurr=..%New()
	 	       s stId=tResult.ID.%Id()
	 	       // Студенты из БД не удаляются (только могут становиться неактивными, т.е. ifActive=0)
	 	       // Тогда нижеследующий %OpenId() никогда не приводит к ошибке!
	 	       // Новый контекст (тема) автоматически становится "видимым" для этих студентов, т.е. ifHide=1
	 	       s newCurr.Student=##class(User.Learner).%OpenId(stId)
	 	       s newCurr.Context=Context
	 	       s rs=newCurr.%Save()
	 	         If $$$ISERR(rs)
	               {
	                 s errCode=tResult.ID.%Id()
	                 q
	               }
	 	     }
	 	  if errCode
	 	    {
	 	      TROLLBACK
	 	      q $$$ERROR($$$GeneralError,"Failure when saving a new Curriculum entity. Student= "_errCode)
	 	    }
         TCOMMIT
       }
     else 
       {
	     q $$$ERROR($$$GeneralError,"Failure when executing the new SQL query.")
	   }
  //Возвращаем количество студентов, чьи учебные планы были успешно обновлены (т.е. дополнены новой темой)
  if tResult.%ROWCOUNT=0 {s quantity="Nothing"} else {s quantity=tResult.%ROWCOUNT}
  q quantity
]]></Implementation>
</Method>

<Method name="ModifyCurriculum">
<Description>
Сокрытие/Открытие существующего контекста в учебный план каждого студента заданной категории
Второй параметр ifUpOrDown указывает будут ли сокрыты выбранные фрагменты учебных планов (0) или же наоборот открыты (1)
Возвращает количество студентов, чьи учебные планы были успешно открыты/сокрыты (ожидается поток студентов (100-300 человек))
Если возникают проблемы с обновлением хотябы одного из учебных планов - откатываем транзакцию.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>oldContext:User.Theme="",ifUpOrDown:%Boolean=0</FormalSpec>
<ReturnType>%Library.String</ReturnType>
<Implementation><![CDATA[
  if oldContext=$$$NULLOREF q $$$ERROR($$$GeneralError,"Failure when passing Context's OREF.")
     // Получаем список студентов, чей учебный план нужно обновить путём сокрытия данного контекста из оборота
     // GetSetOfStsUniversal
     s tResult=..GetSetOfSts(oldContext.Subject.TypeOfSt,oldContext.%Id(),1,4)
     // %SQLCODE должен быть >=0
     if 'tResult.%SQLCODE 
       {
		 TSTART
		 s errCode=""
	     // Тут выбраны студенты, чей учебный план уже содержит данный контекст (тему), который просто меняет статус ifHide
	      while tResult.%Next()
	         {
	 	       // Открываем существующий фрагмент учебного плана очередного студента, подлежащий изменению (сделать ifHide=0 или 1, т.е. неактивным/активными)
	 	       s oldCurr=..StConOpen(tResult.Student.%Id(),tResult.Context.%Id(),2,.sc)
	 	         if oldCurr=$$$NULLOREF
	               {
	                 s errCode=tResult.ID.%Id()
	                 q
	               }
	 	       // Не приводит к ошибке так как ни студенты ни контексты из БД не удаляются
	 	       // Делаем эту запись активной/неактивной
	 	         if ifUpOrDown=0
	 	           {
	 	             s oldCurr.ifHide=0
	 	           }
	 	         else
	 	           { 
	 	             s oldCurr.ifHide=1
	 	           }
	 	       s rs=oldCurr.%Save()
	 	     }
	 	  if tResult.%ROWCOUNT=0 q $$$ERROR($$$GeneralError,"No aimed students were found.")   
	 	  if errCode
	 	    {
	 	      TROLLBACK
	 	      q $$$ERROR($$$GeneralError,"Failure when opening the existing Curriculum entity. Curriculum= "_errCode)
	 	    }
         TCOMMIT
       }
     else 
       {
	     q $$$ERROR($$$GeneralError,"Failure when executing the new SQL query.")
	   }
  //Возвращаем количество студентов, чьи учебные планы были успешно модифицированы по свойству ifHide
  q tResult.%ROWCOUNT
]]></Implementation>
</Method>

<Method name="UpdateCurriculumUniversal">
<Description>
Обновляет учебные планы студентов и делает их активными: для существующих записей делает их видимыми а для несуществующих - добавляет новые
Использовать в случае изменения (редактирования) категории студентов старого контекста
Не отлажен...</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>oldContext:User.Theme=""</FormalSpec>
<ReturnType>%Library.String</ReturnType>
<Implementation><![CDATA[
	  if oldContext=$$$NULLOREF q $$$ERROR($$$GeneralError,"Failure when passing Context's OREF.")
     // Получаем список студентов, чей учебный план нужно обновить путём сокрытия данного контекста из оборота
     // GetSetOfStsUniversal
     s tResult=..GetSetOfSts(oldContext.Subject.TypeOfSt,oldContext.%Id(),0,3)
     // %SQLCODE должен быть >=0
     if 'tResult.%SQLCODE 
       {
		 TSTART
		 s updated=0 // Кол-во обновлённых учебных планов
		 s created=0 // Кол-во созданных учебных планов
		 // Тут студенты, чьи учебные планы как содержат эту тем так и не содержат.
	      while tResult.%Next()
	         {
		         // Для тех студентов, у которых этой темы ещё нет (нет записи) - создать новую запись
		         // Для тех студентов, у которых эта тема уже есть, но была временно изъята из учебного плана - сделать контекст активным
                if ..StConExists(tResult.Student.%Id(), tResult.Context.%Id())
                  {
	                 // Cуществует - обновить ifHide=1 для этого студента и принадлежащей ему темы (контекста)
	                 s oldCurr=..StConOpen(tResult.Student.%Id(),tResult.Context.%Id(),2,.sc)
	                 s oldCurr.ifHide=1
	                 d oldCurr.%Save()
	                   If $$$ISOK(rs)
	                     {
                           s updated=updated+1                   
	                     }
                  }
                else
                  {
	                 // Не существует - создать запись для этого студента и этого контекста
	                 s newCurr=..%New()
	 	             s stId=tResult.Student.%Id()
	 	             s newCurr.Student=##class(User.Learner).%OpenId(stId)
	 	             s newCurr.Context=oldContext
	 	             s rs=newCurr.%Save()
	 	               If $$$ISOK(rs)
	                    {
                          s created=created+1	                     
	                    }
                  }
	 	     }
	 	  if tResult.%ROWCOUNT=0 q $$$ERROR($$$GeneralError,"No aimed students were found.")
	 	  // Общее количество изменений в БД
	 	  s affected=updated+created   
	 	  if tResult.%ROWCOUNT'=affected
	 	    {
	 	      TROLLBACK
	 	      q $$$ERROR($$$GeneralError,"Failure when trying to update Curriculum.")
	 	    }
         TCOMMIT
       }
     else 
       {
	     q $$$ERROR($$$GeneralError,"Failure when executing the new SQL query.")
	   }
  //Возвращаем количество студентов, чьи учебные планы были успешно модифицированы
  q "Модифицировано: "_updated_" Создано: "_created
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DataLocation>^User.CurriculumD</DataLocation>
<DefaultData>CurriculumDefaultData</DefaultData>
<IdLocation>^User.CurriculumD</IdLocation>
<IndexLocation>^User.CurriculumI</IndexLocation>
<StreamLocation>^User.CurriculumS</StreamLocation>
<ExtentSize>4855</ExtentSize>
<Data name="CurriculumDefaultData">
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>Student</Value>
</Value>
<Value name="3">
<Value>Context</Value>
</Value>
<Value name="4">
<Value>ifHide</Value>
</Value>
<Value name="5">
<Value>Presence</Value>
</Value>
<Value name="6">
<Value>Performance</Value>
</Value>
<Value name="7">
<Value>DateOfPerformance</Value>
</Value>
<Value name="8">
<Value>DeadlineDate</Value>
</Value>
<Value name="9">
<Value>Status</Value>
</Value>
<Value name="10">
<Value>Teacher</Value>
</Value>
<Value name="11">
<Value>DateOfChecking</Value>
</Value>
<Value name="12">
<Value>Result</Value>
</Value>
<Value name="13">
<Value>Mark</Value>
</Value>
<Value name="14">
<Value>DateOfPerform</Value>
</Value>
<Value name="15">
<Value>OrderOfView</Value>
</Value>
<Value name="16">
<Value>PerformanceP</Value>
</Value>
<Value name="17">
<Value>ResultP</Value>
</Value>
</Data>
<Property name="%%CLASSNAME">
<Selectivity>99.9994%</Selectivity>
</Property>
<Property name="Context">
<Selectivity>1.6416%</Selectivity>
</Property>
<Property name="DateOfChecking">
<Selectivity>4.3474%</Selectivity>
</Property>
<Property name="DateOfPerform">
<Selectivity>4.3474%</Selectivity>
</Property>
<Property name="DeadlineDate">
<Selectivity>0.0206%</Selectivity>
</Property>
<Property name="Mark">
<Selectivity>25.0000%</Selectivity>
</Property>
<Property name="OrderOfView">
<Selectivity>0.0941%</Selectivity>
</Property>
<Property name="Performance">
<Selectivity>99.9994%</Selectivity>
</Property>
<Property name="Presence">
<Selectivity>99.9994%</Selectivity>
</Property>
<Property name="Result">
<Selectivity>99.9994%</Selectivity>
</Property>
<Property name="Status">
<Selectivity>99.9994%</Selectivity>
</Property>
<Property name="Student">
<Selectivity>1.0457%</Selectivity>
</Property>
<Property name="Teacher">
<Selectivity>10.0000%</Selectivity>
</Property>
<Property name="ifHide">
<Selectivity>99.9994%</Selectivity>
</Property>
<SQLMap name="IDKEY">
<BlockCount>-308</BlockCount>
</SQLMap>
<SQLMap name="StCon">
<BlockCount>-40</BlockCount>
</SQLMap>
</Storage>
</Class>


<Class name="User.Curriculum">
<Description>
Учебный план студента (ранее - модель студента)</Description>
<SqlTableName>Curriculum</SqlTableName>
<Super>%Persistent,%Populate,%XML.Adaptor</Super>
<TimeChanged>63081,58040.090441</TimeChanged>
<TimeCreated>62930,55013.571787</TimeCreated>

<Property name="Student">
<Description>
Студент, чей собственно учебный план.</Description>
<Type>User.Learner</Type>
<Required>1</Required>
</Property>

<Property name="Context">
<Description>
Контекст (тема), которую изучает студент</Description>
<Type>User.Theme</Type>
<Required>1</Required>
</Property>

<Index name="StCon">
<Properties>Student,Context</Properties>
<Unique>1</Unique>
</Index>

<Property name="ifHide">
<Description>
Доступен ли этот контекст для этого студента? (1-"доступен", 0 - "недоступен")</Description>
<Type>%Boolean</Type>
<InitialExpression>1</InitialExpression>
</Property>

<Property name="Presence">
<Description>
Наличие уже сгенерированного персонального (возможно даже уникального*) набора Case Studies для данного студента в данном контексте?</Description>
<Type>%Boolean</Type>
<InitialExpression>0</InitialExpression>
</Property>

<Property name="OrderOfView">
<Description>
Порядок выдачи задач данного контекста для данного студента.
Для каждого студента порядок выдачи задач свой и формируется в момент времени когда студент в первый раз начал работу по данной теме</Description>
<Type>%Integer</Type>
<Collection>list</Collection>
</Property>

<Property name="Performance">
<Description>
Процент выполнения СРС студентом. Сохранял уже какие либо результаты своей работы студент?
Сколько процентов задач выполнено (сколько шаблонов было заполнено ответами студента)</Description>
<Type>%Double</Type>
<InitialExpression>0</InitialExpression>
<Parameter name="MAXVAL" value="100"/>
<Parameter name="MINVAL" value="0"/>
<Parameter name="POPSPEC" value="Float(50,100)"/>
</Property>

<UDLText name="T">
<Content><![CDATA[
// Property PerformanceP As %String [ SqlComputeCode = { Set {PerformanceP} = $FNUMBER({Performance},",",2)_" %" }, SqlComputed ];

]]></Content>
</UDLText>

<Property name="DateOfPerform">
<Description>
Дата и время последней работы с задачами темы (дата и время последнего редактирования СРС с сохранением).</Description>
<Type>%TimeStamp</Type>
</Property>

<Property name="DeadlineDate">
<Description>
Срок завершения СРС (Дата практического занятия по данной теме)</Description>
<Type>%Date</Type>
<Parameter name="FORMAT" value="4"/>
</Property>

<Property name="Status">
<Description>
Статус: проверено/непроверено. ["False"/"True"]</Description>
<Type>%Boolean</Type>
<InitialExpression>0</InitialExpression>
</Property>

<Property name="Teacher">
<Description>
Преподаватель, кто проверил работу (если она проверена).</Description>
<Type>User.Teacher</Type>
</Property>

<Property name="DateOfChecking">
<Description>
Дата и время проверки</Description>
<Type>%TimeStamp</Type>
</Property>

<Property name="Result">
<Description>
Процент верно решённых задач</Description>
<Type>%Double</Type>
<InitialExpression>0</InitialExpression>
<Parameter name="FORMAT" value=","/>
<Parameter name="MAXVAL" value="100"/>
<Parameter name="MINVAL" value="0"/>
<Parameter name="POPSPEC" value="Float(30,100)"/>
</Property>

<UDLText name="T">
<Content><![CDATA[
// Property ResultP As %String [ SqlComputeCode = { Set {ResultP} = $FNUMBER({Result},",",2)_" %" }, SqlComputed ];

]]></Content>
</UDLText>

<Property name="Mark">
<Description>
Традиционная 4-х бальная оценка в зависимости от требований по количеству верно отвеченных вопросов
("50%-70%" -"3", "70%-85%" -"4", "85%-100%" -"5")</Description>
<Type>%String</Type>
<SqlComputeCode> Set {Mark} = ##class(User.Curriculum).CalculateMark({Result},{Status}) </SqlComputeCode>
<SqlComputed>1</SqlComputed>
<SqlComputeOnChange>Result</SqlComputeOnChange>
<Parameter name="POPSPEC" value="Integer(2,5)"/>
</Property>

<UDLText name="T">
<Content><![CDATA[
// -----------------------------МЕТОДЫ-----------------------------

]]></Content>
</UDLText>

<Method name="CalculateMark">
<Description>
Вычисляет оценку для калькулируемого свойства</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>percentage:%Double,status:%Boolean</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
  if (percentage=0)&&(status'=1) {
    s mark="No mark"
  }
  elseif percentage<50 {
	s mark="Unsatisfactory (2)"
  }
  elseif (percentage>50) && (percentage<70) {
	s mark="Satisfactory (3)"  
  }
  elseif (percentage>69) && (percentage<85) {
	s mark="Good (4)"
  }
  else {
	s mark="Excellent (5)"
  }
  q mark
]]></Implementation>
</Method>

<Method name="CheckPres">
<Description>
Проверяем наличие объекта с заданными ID студента и ID темы</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>StudentToCheck:%Integer,ThemeToCheck:%Integer</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
    // The method returns a boolean, indicating success (1) or failure (0).
    q ..StConExists(StudentToCheck, ThemeToCheck)
]]></Implementation>
</Method>

<Method name="GetSetOfSts">
<Description>
Выбрать "активных" студентов (т.е. объект SQL.Statement) из текущего учебного плана
,по заданным атрибутам категории студентов (Специальность, Форма обучения, Курс, Группа)
Третий параметр ifForUpdate определяем как мы будем выбирать студентов и их учебные планы: для обновления (создания 0) или для модификации (1) учебных планов
"Обновление" означает, что в учебные планы каждого из студентов в выборке будет добавлена запись нового контекста.
"Модификация" означает, что определённый контекст будет изъят или наоборт включен в учебный палн каждого из студентов в выборке.
Последний четвёртый параметр forDynd содержит количество элементов динамического массива для метода %Execute(), 3 - для обновления, 4 - для модификации
Выборка по группе отсутствует, курс - не может быть списком (1 курс)</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>Category:User.StCategory,Context:%String,ifForUpdate:%Boolean=0,forDynd:%Integer=3</FormalSpec>
<ReturnType>%SQL.StatementResult</ReturnType>
<Implementation><![CDATA[
 //------Разбираем входные данные:-------
 if Category.Spec="*" 
    {
	  s StSpec=##class(User.StCategory).GetFullList("Spec")
	} 
  else 
	{
	  s StSpec=##class(User.StCategory).GetShortList(Category.Spec)
    }
  if Category.TypeOfEducation="*" 
    {
	  s StType=##class(User.StCategory).GetFullList("Type")
	} 
  else 
	{
	  s StType=##class(User.StCategory).GetShortList(Category.TypeOfEducation)
    }

  s StYear=Category.YearOfStudy
    
  //--------------ФОРМИРУЕМ ЗАПРОС---------------
  s tStatement = ##class(%SQL.Statement).%New()
  s tStatement.%ObjectSelectMode = 1
  s tSQL=6
  s tSQL(1)="select ID,Student,Context from Curriculum"
  s tSQL(2)="where Student->ifActive=1"
  s tSQL(3)="and Student->TypeOfSt_Spec %INLIST ? SIZE((10))"
  s tSQL(4)="and Student->TypeOfSt_TypeOfEducation %INLIST ? SIZE((10))"
  s tSQL(5)="and Student->TypeOfSt_YearOfStudy=?"
  s dynd=forDynd,dynd(1)=StSpec,dynd(2)=StType,dynd(3)=StYear
  // Определяем выборка студентов для создания или модификации ?
  if ifForUpdate=0 {s tSQL(6)="GROUP BY Student"} else {s tSQL(6)="GROUP BY Student HAVING Context=?",dynd(4)=Context}
  s tStatus = tStatement.%Prepare(.tSQL)
  s tResult = tStatement.%Execute(dynd...)
  //d tResult.%Display()
  q tResult
]]></Implementation>
</Method>

<Method name="GetSetOfStsUniversal">
<Description>
Универсальный метод GetSetOfSts()
Здесь категории студентов (Специальность, Форма обучения, Курс, Группа) могут быть списками, разделёнными ";"
Идентификатор "*" расматривается как дефолтный (полный) список категорий</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>Category:User.StCategory,Context:%String,ifForUpdate:%Boolean=0,forDynd:%Integer=3</FormalSpec>
<ReturnType>%SQL.StatementResult</ReturnType>
<Implementation><![CDATA[
  //------Разбираем входные данные:-------
  
  if Category.Spec="*" 
    {
	  s StSpec=##class(User.StCategory).GetFullList("Spec")
	} 
  else 
	{
	  s StSpec=##class(User.StCategory).GetShortList(Category.Spec)
    }
  if Category.TypeOfEducation="*" 
    {
	  s StType=##class(User.StCategory).GetFullList("Type")
	} 
  else 
	{
	  s StType=##class(User.StCategory).GetShortList(Category.TypeOfEducation)
    }
  if Category.YearOfStudy="*" 
    {
	  s StYear=##class(User.StCategory).GetFullList("Year")
	} 
  else 
	{
	  s StYear=##class(User.StCategory).GetShortList(Category.YearOfStudy)
    }
  if Category.Class="*" 
    {
	  s StClass=##class(User.StCategory).GetFullList("Class")
	} 
  else 
	{
	  s StClass=##class(User.StCategory).GetShortList(Category.Class)
    }
  //--------------ФОРМИРУЕМ ЗАПРОС---------------
  s tStatement = ##class(%SQL.Statement).%New()
  s tStatement.%ObjectSelectMode = 1
  s tSQL=7
  s tSQL(1)="select ID, Student,Context from Curriculum"
  s tSQL(2)="where Student->ifActive=1"
  s tSQL(3)="and Student->TypeOfSt_Spec %INLIST ? SIZE((10))"
  s tSQL(4)="and Student->TypeOfSt_TypeOfEducation %INLIST ? SIZE((10))"
  s tSQL(5)="and Student->TypeOfSt_YearOfStudy %INLIST ? SIZE ((10))"
  s tSQL(6)="and Student->TypeOfSt_Class %INLIST ? SIZE ((10))"
  s dynd=forDynd+1,dynd(1)=StSpec,dynd(2)=StType,dynd(3)=StYear,dynd(4)=StClass
  // Определяем выборка студентов для создания или модификации ?
  if ifForUpdate=0 {s tSQL(7)="GROUP BY Student"} else {s tSQL(7)="GROUP BY Student HAVING Context=?",dynd(5)=Context}
  s tStatus = tStatement.%Prepare(.tSQL)
  s tResult = tStatement.%Execute(dynd...)
  //d tResult.%Display()
  q tResult
]]></Implementation>
</Method>

<Method name="GetSetOfStsRS">
<Internal>1</Internal>
<ClassMethod>1</ClassMethod>
<FormalSpec>StSpec:%String="ТПКС;Фарм",StType:%String="Дневное",StYear:%String="1 курс",StClass:%String="5"</FormalSpec>
<ReturnType>%Library.ResultSet</ReturnType>
<Implementation><![CDATA[
	s tRS = ##class(%ResultSet).%New()
	s sql="select * from Curriculum where Student->TypeOfSt_Spec %INLIST ? and Student->TypeOfSt_TypeOfEducation=? and Student->TypeOfSt_YearOfStudy=? and Student->TypeOfSt_Class=?"
	s tSC = tRS.Prepare(sql)
	s tSC=tRS.Execute($LFS(StSpec,";"),StType,StYear,StClass)
	  While tRS.Next(.tSC) 
		{
		  Write "ID= ",$get(tRS.Data("ID")),"Student= ",$get(tRS.Data("Student")),"Context= ",$get(tRS.Data("Context")),"ifHide= ",$get(tRS.Data("ifHide")),!
	    }
	q tRS
]]></Implementation>
</Method>

<Method name="UpdateCurriculum">
<Description>
Добавление (создание) новой записи c новым контекстом в учебный план каждого студента заданной категории
Возвращает количество студентов, чьи учебные планы были успешно обновлены (ожидается поток студентов (100-300 человек))
Если возникают проблемы с обновлением хотябы одного из учебных планов - откатываем транзакцию.
Продумать: если мы собираемся добавить неуникальную запись в Curruculum, тогда сущесвующую запись следует обновить до ifHide=1</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>Context:User.Theme="",*quantity:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
  if Context=$$$NULLOREF q $$$ERROR($$$GeneralError,"Failure when passing Context's OREF.")
     // Получаем список студентов, чей учебный план нужно добавить заданный контекст (учебную тему)
     // GetSetOfStsUniversal
     s tResult=##class(User.Learner).GetSetOfSts(Context.Subject.TypeOfSt)
     // %SQLCODE должен быть >=0
     if 'tResult.%SQLCODE 
       {
		 TSTART
		 s errCode=""
	     // Тут выбраны студенты, чей учебный план не содержит ещё такого контекста (темы)
	      while tResult.%Next()
	         {
	 	       s newCurr=..%New()
	 	       s stId=tResult.ID.%Id()
	 	       // Студенты из БД не удаляются (только могут становиться неактивными, т.е. ifActive=0)
	 	       // Тогда нижеследующий %OpenId() никогда не приводит к ошибке!
	 	       // Новый контекст (тема) автоматически становится "видимым" для этих студентов, т.е. ifHide=1
	 	       s newCurr.Student=##class(User.Learner).%OpenId(stId)
	 	       s newCurr.Context=Context
	 	       s rs=newCurr.%Save()
	 	         If $$$ISERR(rs)
	               {
	                 s errCode=tResult.ID.%Id()
	                 q
	               }
	 	     }
	 	  if errCode
	 	    {
	 	      TROLLBACK
	 	      q $$$ERROR($$$GeneralError,"Failure when saving a new Curriculum entity. Student= "_errCode)
	 	    }
         TCOMMIT
       }
     else 
       {
	     q $$$ERROR($$$GeneralError,"Failure when executing the new SQL query.")
	   }
  //Возвращаем количество студентов, чьи учебные планы были успешно обновлены (т.е. дополнены новой темой)
  if tResult.%ROWCOUNT=0 {s quantity="Nothing"} else {s quantity=tResult.%ROWCOUNT}
  q quantity
]]></Implementation>
</Method>

<Method name="ModifyCurriculum">
<Description>
Сокрытие/Открытие существующего контекста в учебный план каждого студента заданной категории
Второй параметр ifUpOrDown указывает будут ли сокрыты выбранные фрагменты учебных планов (0) или же наоборот открыты (1)
Возвращает количество студентов, чьи учебные планы были успешно открыты/сокрыты (ожидается поток студентов (100-300 человек))
Если возникают проблемы с обновлением хотябы одного из учебных планов - откатываем транзакцию.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>oldContext:User.Theme="",ifUpOrDown:%Boolean=0</FormalSpec>
<ReturnType>%Library.String</ReturnType>
<Implementation><![CDATA[
  if oldContext=$$$NULLOREF q $$$ERROR($$$GeneralError,"Failure when passing Context's OREF.")
     // Получаем список студентов, чей учебный план нужно обновить путём сокрытия данного контекста из оборота
     // GetSetOfStsUniversal
     s tResult=..GetSetOfSts(oldContext.Subject.TypeOfSt,oldContext.%Id(),1,4)
     // %SQLCODE должен быть >=0
     if 'tResult.%SQLCODE 
       {
		 TSTART
		 s errCode=""
	     // Тут выбраны студенты, чей учебный план уже содержит данный контекст (тему), который просто меняет статус ifHide
	      while tResult.%Next()
	         {
	 	       // Открываем существующий фрагмент учебного плана очередного студента, подлежащий изменению (сделать ifHide=0 или 1, т.е. неактивным/активными)
	 	       s oldCurr=..StConOpen(tResult.Student.%Id(),tResult.Context.%Id(),2,.sc)
	 	         if oldCurr=$$$NULLOREF
	               {
	                 s errCode=tResult.ID.%Id()
	                 q
	               }
	 	       // Не приводит к ошибке так как ни студенты ни контексты из БД не удаляются
	 	       // Делаем эту запись активной/неактивной
	 	         if ifUpOrDown=0
	 	           {
	 	             s oldCurr.ifHide=0
	 	           }
	 	         else
	 	           { 
	 	             s oldCurr.ifHide=1
	 	           }
	 	       s rs=oldCurr.%Save()
	 	     }
	 	  if tResult.%ROWCOUNT=0 q $$$ERROR($$$GeneralError,"No aimed students were found.")   
	 	  if errCode
	 	    {
	 	      TROLLBACK
	 	      q $$$ERROR($$$GeneralError,"Failure when opening the existing Curriculum entity. Curriculum= "_errCode)
	 	    }
         TCOMMIT
       }
     else 
       {
	     q $$$ERROR($$$GeneralError,"Failure when executing the new SQL query.")
	   }
  //Возвращаем количество студентов, чьи учебные планы были успешно модифицированы по свойству ifHide
  q tResult.%ROWCOUNT
]]></Implementation>
</Method>

<Method name="UpdateCurriculumUniversal">
<Description>
Обновляет учебные планы студентов и делает их активными: для существующих записей делает их видимыми а для несуществующих - добавляет новые
Использовать в случае изменения (редактирования) категории студентов старого контекста
Не отлажен...</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>oldContext:User.Theme=""</FormalSpec>
<ReturnType>%Library.String</ReturnType>
<Implementation><![CDATA[
	  if oldContext=$$$NULLOREF q $$$ERROR($$$GeneralError,"Failure when passing Context's OREF.")
     // Получаем список студентов, чей учебный план нужно обновить путём сокрытия данного контекста из оборота
     // GetSetOfStsUniversal
     s tResult=..GetSetOfSts(oldContext.Subject.TypeOfSt,oldContext.%Id(),0,3)
     // %SQLCODE должен быть >=0
     if 'tResult.%SQLCODE 
       {
		 TSTART
		 s updated=0 // Кол-во обновлённых учебных планов
		 s created=0 // Кол-во созданных учебных планов
		 // Тут студенты, чьи учебные планы как содержат эту тем так и не содержат.
	      while tResult.%Next()
	         {
		         // Для тех студентов, у которых этой темы ещё нет (нет записи) - создать новую запись
		         // Для тех студентов, у которых эта тема уже есть, но была временно изъята из учебного плана - сделать контекст активным
                if ..StConExists(tResult.Student.%Id(), tResult.Context.%Id())
                  {
	                 // Cуществует - обновить ifHide=1 для этого студента и принадлежащей ему темы (контекста)
	                 s oldCurr=..StConOpen(tResult.Student.%Id(),tResult.Context.%Id(),2,.sc)
	                 s oldCurr.ifHide=1
	                 d oldCurr.%Save()
	                   If $$$ISOK(rs)
	                     {
                           s updated=updated+1                   
	                     }
                  }
                else
                  {
	                 // Не существует - создать запись для этого студента и этого контекста
	                 s newCurr=..%New()
	 	             s stId=tResult.Student.%Id()
	 	             s newCurr.Student=##class(User.Learner).%OpenId(stId)
	 	             s newCurr.Context=oldContext
	 	             s rs=newCurr.%Save()
	 	               If $$$ISOK(rs)
	                    {
                          s created=created+1	                     
	                    }
                  }
	 	     }
	 	  if tResult.%ROWCOUNT=0 q $$$ERROR($$$GeneralError,"No aimed students were found.")
	 	  // Общее количество изменений в БД
	 	  s affected=updated+created   
	 	  if tResult.%ROWCOUNT'=affected
	 	    {
	 	      TROLLBACK
	 	      q $$$ERROR($$$GeneralError,"Failure when trying to update Curriculum.")
	 	    }
         TCOMMIT
       }
     else 
       {
	     q $$$ERROR($$$GeneralError,"Failure when executing the new SQL query.")
	   }
  //Возвращаем количество студентов, чьи учебные планы были успешно модифицированы
  q "Модифицировано: "_updated_" Создано: "_created
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DataLocation>^User.CurriculumD</DataLocation>
<DefaultData>CurriculumDefaultData</DefaultData>
<IdLocation>^User.CurriculumD</IdLocation>
<IndexLocation>^User.CurriculumI</IndexLocation>
<StreamLocation>^User.CurriculumS</StreamLocation>
<ExtentSize>4855</ExtentSize>
<Data name="CurriculumDefaultData">
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>Student</Value>
</Value>
<Value name="3">
<Value>Context</Value>
</Value>
<Value name="4">
<Value>ifHide</Value>
</Value>
<Value name="5">
<Value>Presence</Value>
</Value>
<Value name="6">
<Value>Performance</Value>
</Value>
<Value name="7">
<Value>DateOfPerformance</Value>
</Value>
<Value name="8">
<Value>DeadlineDate</Value>
</Value>
<Value name="9">
<Value>Status</Value>
</Value>
<Value name="10">
<Value>Teacher</Value>
</Value>
<Value name="11">
<Value>DateOfChecking</Value>
</Value>
<Value name="12">
<Value>Result</Value>
</Value>
<Value name="13">
<Value>Mark</Value>
</Value>
<Value name="14">
<Value>DateOfPerform</Value>
</Value>
<Value name="15">
<Value>OrderOfView</Value>
</Value>
<Value name="16">
<Value>PerformanceP</Value>
</Value>
<Value name="17">
<Value>ResultP</Value>
</Value>
</Data>
<Property name="%%CLASSNAME">
<Selectivity>99.9994%</Selectivity>
</Property>
<Property name="Context">
<Selectivity>1.6416%</Selectivity>
</Property>
<Property name="DateOfChecking">
<Selectivity>4.3474%</Selectivity>
</Property>
<Property name="DateOfPerform">
<Selectivity>4.3474%</Selectivity>
</Property>
<Property name="DeadlineDate">
<Selectivity>0.0206%</Selectivity>
</Property>
<Property name="Mark">
<Selectivity>25.0000%</Selectivity>
</Property>
<Property name="OrderOfView">
<Selectivity>0.0941%</Selectivity>
</Property>
<Property name="Performance">
<Selectivity>99.9994%</Selectivity>
</Property>
<Property name="Presence">
<Selectivity>99.9994%</Selectivity>
</Property>
<Property name="Result">
<Selectivity>99.9994%</Selectivity>
</Property>
<Property name="Status">
<Selectivity>99.9994%</Selectivity>
</Property>
<Property name="Student">
<Selectivity>1.0457%</Selectivity>
</Property>
<Property name="Teacher">
<Selectivity>10.0000%</Selectivity>
</Property>
<Property name="ifHide">
<Selectivity>99.9994%</Selectivity>
</Property>
<SQLMap name="IDKEY">
<BlockCount>-308</BlockCount>
</SQLMap>
<SQLMap name="StCon">
<BlockCount>-40</BlockCount>
</SQLMap>
</Storage>
</Class>


<Class name="User.Department">
<SqlTableName>DepartmentNew</SqlTableName>
<Super>%Persistent,%Populate</Super>
<TimeChanged>63046,52475.300128</TimeChanged>
<TimeCreated>62857,38242.488297</TimeCreated>

<Property name="Name">
<Description>
Название кафедры</Description>
<Type>%String</Type>
<Required>1</Required>
<Parameter name="MAXLEN" value="500"/>
<Parameter name="POPSPEC" value="ValueList(&quot;,Каф. мед. биологии,Каф. гистологии&quot;)"/>
</Property>

<Index name="IN">
<Properties>Name</Properties>
<Unique>1</Unique>
</Index>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DataLocation>^User.DepartmentD</DataLocation>
<DefaultData>DepartmentDefaultData</DefaultData>
<IdLocation>^User.DepartmentD</IdLocation>
<IndexLocation>^User.DepartmentI</IndexLocation>
<StreamLocation>^User.DepartmentS</StreamLocation>
<ExtentSize>2</ExtentSize>
<Data name="DepartmentDefaultData">
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>Name</Value>
</Value>
</Data>
<Property name="%%CLASSNAME">
<Selectivity>100.0000%</Selectivity>
</Property>
<SQLMap name="IDKEY">
<BlockCount>-4</BlockCount>
</SQLMap>
<SQLMap name="IN">
<BlockCount>-4</BlockCount>
</SQLMap>
</Storage>
</Class>


<Class name="User.Department">
<SqlTableName>DepartmentNew</SqlTableName>
<Super>%Persistent,%Populate</Super>
<TimeChanged>63046,52475.300128</TimeChanged>
<TimeCreated>62857,38242.488297</TimeCreated>

<Property name="Name">
<Description>
Название кафедры</Description>
<Type>%String</Type>
<Required>1</Required>
<Parameter name="MAXLEN" value="500"/>
<Parameter name="POPSPEC" value="ValueList(&quot;,Каф. мед. биологии,Каф. гистологии&quot;)"/>
</Property>

<Index name="IN">
<Properties>Name</Properties>
<Unique>1</Unique>
</Index>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DataLocation>^User.DepartmentD</DataLocation>
<DefaultData>DepartmentDefaultData</DefaultData>
<IdLocation>^User.DepartmentD</IdLocation>
<IndexLocation>^User.DepartmentI</IndexLocation>
<StreamLocation>^User.DepartmentS</StreamLocation>
<ExtentSize>2</ExtentSize>
<Data name="DepartmentDefaultData">
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>Name</Value>
</Value>
</Data>
<Property name="%%CLASSNAME">
<Selectivity>100.0000%</Selectivity>
</Property>
<SQLMap name="IDKEY">
<BlockCount>-4</BlockCount>
</SQLMap>
<SQLMap name="IN">
<BlockCount>-4</BlockCount>
</SQLMap>
</Storage>
</Class>


<Class name="User.IW">
<Description>
Independent work - самостоятельная работа конкретного студента по конкретной теме и её результаты</Description>
<SqlTableName>IW</SqlTableName>
<Super>%Persistent,%Populate,%XML.Adaptor,%ZEN.DataModel.Adaptor</Super>
<TimeChanged>63056,46799.328451</TimeChanged>
<TimeCreated>62993,59750.037109</TimeCreated>

<Property name="Student">
<Description>
Студент, чья СРС</Description>
<Type>Learner</Type>
<Required>1</Required>
</Property>

<Property name="Context">
<Description>
Тема (контекст), по которой этот студент делает СРС</Description>
<Type>Theme</Type>
<Required>1</Required>
</Property>

<Property name="CSs">
<Description>
Набор учебных задач Case studies (CS) для данного студента в данном контексте (по данной теме)
(СРС может содержать много CSs)</Description>
<Type>User.CS</Type>
<Cardinality>many</Cardinality>
<Inverse>IWork</Inverse>
<Relationship>1</Relationship>
</Property>

<Property name="IfDone">
<Description>
Признак решена (1) ли задача или не решена (0)</Description>
<Type>%Boolean</Type>
<InitialExpression>"0"</InitialExpression>
</Property>

<Property name="Feedback">
<Description>
Ответ студента</Description>
<Type>%String</Type>
<Parameter name="MAXLEN" value="100"/>
<Parameter name="MINLEN" value="1"/>
</Property>

<Property name="CSstatus">
<Description>
Статус (проверено/непроверено)</Description>
<Type>%Boolean</Type>
<InitialExpression>"0"</InitialExpression>
</Property>

<Property name="Mark">
<Description>
Оценка преподавателя за данную задачу (зачёт/незачёт)</Description>
<Type>%Boolean</Type>
<InitialExpression>"0"</InitialExpression>
</Property>

<Property name="Comment">
<Description>
Комментарий преподавателя по поводу данной задачи</Description>
<Type>%String</Type>
<Parameter name="MAXLEN" value="300"/>
</Property>

<Method name="GetSetOfCSs">
<Description>
Получить персональный набор CSs по данной теме для данного студента.
CS для каждого КП выбирается в случайном порядке
Вызывать только тогда когда данный студент по данной теме в первый раз начал свою работу
Возвращаем количество записанных задач (CSs) в СРС данного студента по данной теме</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>st:User.Learner,con:User.Theme,*iwCount:%Integer</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	// Получаем RS когнитивных прототипов для данной темы (контекста)
	s tResult=##class(User.CP).GetSetOfCP(con.%Id())
	  if $$$ISERR(tResult) q $$$ERROR($$$GeneralError,"Failure when executing the SQL query at CP class, GetSetOfCP() method.") 
	  s errCode=""
	  s errSelect=""
	// Проходим по всему набору
	   while tResult.%Next()
         {
            // Получаем очередной КП в данной теме
            s nextCP=tResult.ID
            // Выбираем случайным образом одну из задач на основе этого КП
            s randCS=##class(User.CS).SelectCS(nextCP)
            if $$$ISERR(randCS)
              {
	              s errSelect=nextCP
	              q
              }
            // Добавляем новую запись в СРС студента
            s rs=..CreatePieceOfIW(st,con,randCS)
               if $$$ISERR(rs)
               {
                 s errCode=nextCP
                 q
               }
         }
       if errSelect
         {
	 	   q $$$ERROR($$$GeneralError,"Something wrong with SelectCS() method at CS class. CP= "_errSelect)
	 	 }
       if errCode
         {
	 	   q $$$ERROR($$$GeneralError,"Failure when saving a new IW entity. CP= "_errCode)
	 	 }
	   s iwCount=tResult.%ROWCOUNT 
	   if iwCount=0
	     {
		   q $$$ERROR($$$GeneralError,"GetSetOfCP() method at CP class has returned Null!")
	     }
    q iwCount
    //q $$$OK
]]></Implementation>
</Method>

<Method name="CreatePieceOfIW">
<Description>
Создаём экземпляр СРС
Возвращаем результат сохранения (0/1)</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>st:User.Learner,con:User.Theme,CS:User.CS</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	s newIW=..%New()
	s newIW.Student=st
	s newIW.Context=con
	d newIW.CSs.Insert(CS)
	s rs=newIW.%Save()
	if $$$ISERR(rs) q $$$ERROR()
	q $$$OK
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DataLocation>^User.IWD</DataLocation>
<DefaultData>IWDefaultData</DefaultData>
<IdLocation>^User.IWD</IdLocation>
<IndexLocation>^User.IWI</IndexLocation>
<StreamLocation>^User.IWS</StreamLocation>
<ExtentSize>100000</ExtentSize>
<Data name="IWDefaultData">
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>Student</Value>
</Value>
<Value name="3">
<Value>Context</Value>
</Value>
<Value name="4">
<Value>Feedback</Value>
</Value>
<Value name="5">
<Value>CSstatus</Value>
</Value>
<Value name="6">
<Value>Mark</Value>
</Value>
<Value name="7">
<Value>Comment</Value>
</Value>
<Value name="8">
<Value>IfDone</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="User.IW">
<Description>
Independent work - самостоятельная работа конкретного студента по конкретной теме и её результаты</Description>
<SqlTableName>IW</SqlTableName>
<Super>%Persistent,%Populate,%XML.Adaptor,%ZEN.DataModel.Adaptor</Super>
<TimeChanged>63056,46799.328451</TimeChanged>
<TimeCreated>62993,59750.037109</TimeCreated>

<Property name="Student">
<Description>
Студент, чья СРС</Description>
<Type>Learner</Type>
<Required>1</Required>
</Property>

<Property name="Context">
<Description>
Тема (контекст), по которой этот студент делает СРС</Description>
<Type>Theme</Type>
<Required>1</Required>
</Property>

<Property name="CSs">
<Description>
Набор учебных задач Case studies (CS) для данного студента в данном контексте (по данной теме)
(СРС может содержать много CSs)</Description>
<Type>User.CS</Type>
<Cardinality>many</Cardinality>
<Inverse>IWork</Inverse>
<Relationship>1</Relationship>
</Property>

<Property name="IfDone">
<Description>
Признак решена (1) ли задача или не решена (0)</Description>
<Type>%Boolean</Type>
<InitialExpression>"0"</InitialExpression>
</Property>

<Property name="Feedback">
<Description>
Ответ студента</Description>
<Type>%String</Type>
<Parameter name="MAXLEN" value="100"/>
<Parameter name="MINLEN" value="1"/>
</Property>

<Property name="CSstatus">
<Description>
Статус (проверено/непроверено)</Description>
<Type>%Boolean</Type>
<InitialExpression>"0"</InitialExpression>
</Property>

<Property name="Mark">
<Description>
Оценка преподавателя за данную задачу (зачёт/незачёт)</Description>
<Type>%Boolean</Type>
<InitialExpression>"0"</InitialExpression>
</Property>

<Property name="Comment">
<Description>
Комментарий преподавателя по поводу данной задачи</Description>
<Type>%String</Type>
<Parameter name="MAXLEN" value="300"/>
</Property>

<Method name="GetSetOfCSs">
<Description>
Получить персональный набор CSs по данной теме для данного студента.
CS для каждого КП выбирается в случайном порядке
Вызывать только тогда когда данный студент по данной теме в первый раз начал свою работу
Возвращаем количество записанных задач (CSs) в СРС данного студента по данной теме</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>st:User.Learner,con:User.Theme,*iwCount:%Integer</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	// Получаем RS когнитивных прототипов для данной темы (контекста)
	s tResult=##class(User.CP).GetSetOfCP(con.%Id())
	  if $$$ISERR(tResult) q $$$ERROR($$$GeneralError,"Failure when executing the SQL query at CP class, GetSetOfCP() method.") 
	  s errCode=""
	  s errSelect=""
	// Проходим по всему набору
	   while tResult.%Next()
         {
            // Получаем очередной КП в данной теме
            s nextCP=tResult.ID
            // Выбираем случайным образом одну из задач на основе этого КП
            s randCS=##class(User.CS).SelectCS(nextCP)
            if $$$ISERR(randCS)
              {
	              s errSelect=nextCP
	              q
              }
            // Добавляем новую запись в СРС студента
            s rs=..CreatePieceOfIW(st,con,randCS)
               if $$$ISERR(rs)
               {
                 s errCode=nextCP
                 q
               }
         }
       if errSelect
         {
	 	   q $$$ERROR($$$GeneralError,"Something wrong with SelectCS() method at CS class. CP= "_errSelect)
	 	 }
       if errCode
         {
	 	   q $$$ERROR($$$GeneralError,"Failure when saving a new IW entity. CP= "_errCode)
	 	 }
	   s iwCount=tResult.%ROWCOUNT 
	   if iwCount=0
	     {
		   q $$$ERROR($$$GeneralError,"GetSetOfCP() method at CP class has returned Null!")
	     }
    q iwCount
    //q $$$OK
]]></Implementation>
</Method>

<Method name="CreatePieceOfIW">
<Description>
Создаём экземпляр СРС
Возвращаем результат сохранения (0/1)</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>st:User.Learner,con:User.Theme,CS:User.CS</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	s newIW=..%New()
	s newIW.Student=st
	s newIW.Context=con
	d newIW.CSs.Insert(CS)
	s rs=newIW.%Save()
	if $$$ISERR(rs) q $$$ERROR()
	q $$$OK
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DataLocation>^User.IWD</DataLocation>
<DefaultData>IWDefaultData</DefaultData>
<IdLocation>^User.IWD</IdLocation>
<IndexLocation>^User.IWI</IndexLocation>
<StreamLocation>^User.IWS</StreamLocation>
<ExtentSize>100000</ExtentSize>
<Data name="IWDefaultData">
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>Student</Value>
</Value>
<Value name="3">
<Value>Context</Value>
</Value>
<Value name="4">
<Value>Feedback</Value>
</Value>
<Value name="5">
<Value>CSstatus</Value>
</Value>
<Value name="6">
<Value>Mark</Value>
</Value>
<Value name="7">
<Value>Comment</Value>
</Value>
<Value name="8">
<Value>IfDone</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="User.Learner">
<Description>
Студенты университета и информация о них</Description>
<SqlTableName>Learner</SqlTableName>
<Super>User.Person</Super>
<TimeChanged>63081,52722.010286</TimeChanged>
<TimeCreated>62987,44327.848631</TimeCreated>

<Property name="ifActive">
<Description>
Активен ли этот студент или уже закончил обучение по всем изучаемым с помощью КП дисциплинам?</Description>
<Type>%Boolean</Type>
<InitialExpression>"1"</InitialExpression>
<Required>1</Required>
</Property>

<Property name="TypeOfSt">
<Description>
Контингент студентов (Специальность, форма обучения, курс, группа)</Description>
<Type>StCategory</Type>
<Required>1</Required>
</Property>

<UDLText name="T">
<Content><![CDATA[
// Property OldTypeOfSt As StCategory;

]]></Content>
</UDLText>

<UDLText name="T">
<Content><![CDATA[/*------------------------MVC-------------------------*/
]]></Content>
</UDLText>

<Method name="%OnNewSource">
<Description>
Старые данные о студенте
Заполняется сразу перед обновлением (редактирования) профиля студента, самим студентом.
Load an instance of a new (unsaved) source object for this DataModel.</Description>
<FormalSpec>*pSC:%Status=$$$OK</FormalSpec>
<ReturnType>%RegisteredObject</ReturnType>
<Implementation><![CDATA[    Quit ##class(User.Learner).%New()
]]></Implementation>
</Method>

<Method name="%OnSaveSource">
<Description>
Save instance of associated source object.</Description>
<FormalSpec>pSource:User.Learner</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    Set tSC=pSource.%Save()
    If $$$ISOK(tSC)
     { 
       Set ..%id=pSource.%Id()
       // Выполняем серверные методы для формирования учебного плана для
       // вновь зарегестрировавшегося студента
       /*s st=##class(User.Learner).%OpenId(..%id)
       d st.CreateMyCurriculum()
       */
       d pSource.CreateMyCurriculum()
     }
    Quit tSC
]]></Implementation>
</Method>

<Method name="%OnOpenSource">
<Description>
Load an instance of the source object for this DataModel.</Description>
<FormalSpec>pID:%String,pConcurrency:%Integer=-1,*pSC:%Status=$$$OK</FormalSpec>
<ReturnType>%RegisteredObject</ReturnType>
<Implementation><![CDATA[    Quit ##class(User.Learner).%OpenId(pID,pConcurrency,.pSC)
]]></Implementation>
</Method>

<Method name="%OnDeleteSource">
<Description>
Delete instance of associated source object.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pID:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[   Quit ##class(User.Learner).%DeleteId(pID)
]]></Implementation>
</Method>

<Method name="%OnLoadModel">
<Description>
Do the actual work of loading values from the source object.</Description>
<FormalSpec>pSource:User.Learner</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    Set ..PLogin = pSource.PLogin
    Set ..PPassword = pSource.PPassword
    Set ..PName = pSource.PName
    Set ..PSurname=pSource.PSurname
    //Set ..PEmail=pSource.PEmail
    if pSource.%Id()="" {Set ..PEmail="yours@gmail.com"} else {Set ..PEmail=pSource.PEmail}
    Set ..TypeOfSt.Spec=pSource.TypeOfSt.Spec
    Set ..TypeOfSt.TypeOfEducation=pSource.TypeOfSt.TypeOfEducation
    Set ..TypeOfSt.YearOfStudy=pSource.TypeOfSt.YearOfStudy
    Set ..TypeOfSt.Class=pSource.TypeOfSt.Class
    Quit $$$OK
]]></Implementation>
</Method>

<Method name="%OnStoreModel">
<Description>
Do the actual work of storing values into the source object.</Description>
<FormalSpec>pSource:User.Learner</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    Set pSource.PLogin = ..PLogin
    Set pSource.PPassword = $system.Encryption.MD5Hash("12345"_..PPassword)
    Set pSource.PName = ..PName
    Set pSource.PSurname = ..PSurname
    Set pSource.PEmail = ..PEmail
    Set pSource.TypeOfSt.Spec=..TypeOfSt.Spec
    Set pSource.TypeOfSt.TypeOfEducation=..TypeOfSt.TypeOfEducation
    Set pSource.TypeOfSt.YearOfStudy=..TypeOfSt.YearOfStudy
    Set pSource.TypeOfSt.Class=..TypeOfSt.Class
    Quit $$$OK
]]></Implementation>
</Method>

<Method name="PEmailIsValidJS">
<ClassMethod>1</ClassMethod>
<FormalSpec>value</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[  return ('' == value) ? 'Invalid Email' : '';
]]></Implementation>
</Method>

<Method name="PNameIsValidJS">
<ClassMethod>1</ClassMethod>
<FormalSpec>value</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[  return ('' == value) ? 'Invalid Name' : '';
]]></Implementation>
</Method>

<Method name="PSurnameIsValidJS">
<ClassMethod>1</ClassMethod>
<FormalSpec>value</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[  return ('' == value) ? 'Invalid Surname' : '';
]]></Implementation>
</Method>

<Method name="PLoginIsValidJS">
<ClassMethod>1</ClassMethod>
<FormalSpec>value</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[  return ('' == value) ? 'Invalid Login' : '';
]]></Implementation>
</Method>

<Method name="PPasswordIsValidJS">
<ClassMethod>1</ClassMethod>
<FormalSpec>value</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[  return ('' == value) ? 'Invalid Password' : '';
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[/*-----------------Бизнес логика---------------------*/
]]></Content>
</UDLText>

<Method name="CreateMyCurriculum">
<Description>
Формирует учебный план для вновь зарегестрировавшегося студента 
Возвращает количество тем, которые были успешно внесены в учебный план текущего студента.
Вызывать только после регистрации нового студента, но не после изменения профиля.</Description>
<FormalSpec>*num:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	// Достаём категорию студентов, к которой относится текущий студент
	s StCategory=..TypeOfSt
	// Получаем ResultSet контекстов, которые доступны в данный момент времени для этой категории студентов
	s tResult=##class(User.Theme).GetSetOfConts(StCategory)
	// Каждый из этих контекстов копируем в Curriculum данного студента
	 if tResult.%SQLCODE<0 q $$$ERROR($$$GeneralError,"Failure when executing the SQL query")
	    TSTART
	     s errCode=""
	     // Тут выбраны контексты, которые нужно добавить в учебный план нового студента
	      while tResult.%Next()
	         {
                s newCurr=##class(User.Curriculum).%New()
                s newCurr.Student=$THIS
                s newCurr.Context=##class(User.Theme).%OpenId(tResult.ID.%Id())
               	s rs=newCurr.%Save()
	 	         If $$$ISERR(rs)
	               {
	                 s errCode=tResult.ID.%Id()
	                 q
	               }
	 	     }
	 	  s num=tResult.%ROWCOUNT
	 	  if errCode
	 	    {
	 	      TROLLBACK
	 	      q $$$ERROR($$$GeneralError,"Failure when saving a new Curriculum entity.Context ID= "_errCode_" Student ID= "_$THIS.%Id())
	 	    }
         TCOMMIT
   q num
]]></Implementation>
</Method>

<Method name="ModifyMyCurriculum">
<Description>
Обновляет существующий учебный план текущего студента
Вызывать после изменения профиля (изменение профиля происходит в случае: ошибка ввода при регистрации, переход на другой курс и пр.)
В случае если категория студента была изменена (%IsModified() smth. like that).
Возвращает количество тем (контекстов), которые были скрыты как ненужные (N) и количество тем которые были добавлены (M)</Description>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
  // Проверяем не пуст ли учебный план текущего студента?
  if ..IfNotEmpty()=0 q "0 Модифицировано: 0 Создано: 0" // Учебный план данного студента полностью пуст
  // Имеется хотя бы одна тема в учебном плане студента
  // Делаем все эти темы (1-N) невидимыми (метод, исключающий студента из учебного процесса)
  s disabled=..DisableSt()
  // Получаем контексты, доступные для этой "обновлённой категории" студентов, в которую входит наш студент
  s tResult=##class(User.Theme).GetSetOfConts(..TypeOfSt)
  if tResult.%SQLCODE<0 q $$$ERROR($$$GeneralError,"Failure when executing the SQL query")
	 // Добавляем эти контексты в учебный план текущего студента
	 // Если такой контекст уже существует в учебном плане "в скрытом виде" (после предыдущей опреации), тогда делаем его открытым, не добавляя новую запись, что привело бы к ошибке в следствие уникальности пары Студент-Контекст
	 // Возвращаем количество добавленных и количество изменённых контекстов в учебном плане текущего студента
	 TSTART
	 s errCode=""
	 s updated=0
	 s created=0
       while tResult.%Next()
	     {
           if ##class(User.Curriculum).StConExists(..%Id(), tResult.ID.%Id())
             {
	           // Cуществует - обновить ifHide=1 для этого студента и принадлежащей ему темы (контекста)
	           s oldCurr=##class(User.Curriculum).StConOpen(..%Id(),tResult.ID.%Id(),2,.sc)
	           s oldCurr.ifHide=1
	           s rs=oldCurr.%Save()
	           If $$$ISOK(rs) s updated=updated+1                   
             }
           else
             {
	          // Не существует - создать запись для этого студента и этого контекста
	          s newCurr=##class(User.Curriculum).%New()
	 	      s newCurr.Student=$THIS
	 	      s newCurr.Context=##class(User.Theme).%OpenId(tResult.ID.%Id())
	 	      s rs=newCurr.%Save()
	 	      If $$$ISOK(rs) s created=created+1	                     
             }
  	      } 
  	    // Общее количество изменений в БД
	 	s affected=updated+created  
	 	if tResult.%ROWCOUNT'=affected
	 	   {
	 	     TROLLBACK
	 	     q $$$ERROR($$$GeneralError,"Failure when trying to update Curriculum for this student."_..%Id())
	 	   }
    TCOMMIT 
  q "Модифицировано: "_(disabled-updated)_" Создано: "_created
]]></Implementation>
</Method>

<Method name="IfNotEmpty">
<Description>
Проверяем не пуст ли учебный план текущего студента? (чей учебный план будет обновлён)</Description>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
  s StId=..%Id()
  &sql(select TOP 1 ID INTO :Id from Curriculum where Student=:StId)
    if Id'=""
      {
	   q 1
	  } 
    else 
      {
	   q 1
	  }
]]></Implementation>
</Method>

<Method name="SetOldTypeOfSt">
<Description>
Запоминает предыдущую информацию о студенте (до изменения профиля)
Вызывается перед сохранением новых данных о студенте</Description>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	// Копируем текущую информацию о студенте
	s ..OldTypeOfSt=..TypeOfSt
	s rs=..%Save()
	  if $$$ISERR(rs)
	    {
          q $$$ERROR($$$GeneralError,"Can't save OldTypeOfSt.")                  
	    }
	q $$$OK
]]></Implementation>
</Method>

<Method name="DisableSt">
<Description>
Делает все существующие в учебном плане данного студента контексты скрытыми, т.е. исключает студента из учебного процесса
Возвращает количество изменённых (сделанных невидимыми) тем (контекстов) этого студента</Description>
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[
	s StId=..%Id()
	&sql(update Curriculum set ifHide=0 where ifHide=1 and Student=:StId)
	q %ROWCOUNT
]]></Implementation>
</Method>

<Method name="GetSetOfSts">
<Description>
Выбрать "активных" студентов (т.е. объект SQL.Statement) из базы данных</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>Category:User.StCategory,forDynd:%Integer=3</FormalSpec>
<ReturnType>%SQL.StatementResult</ReturnType>
<Implementation><![CDATA[
 //------Разбираем входные данные:-------
 if Category.Spec="*" 
    {
	  s StSpec=##class(User.StCategory).GetFullList("Spec")
	} 
  else 
	{
	  s StSpec=##class(User.StCategory).GetShortList(Category.Spec)
    }
  if Category.TypeOfEducation="*" 
    {
	  s StType=##class(User.StCategory).GetFullList("Type")
	} 
  else 
	{
	  s StType=##class(User.StCategory).GetShortList(Category.TypeOfEducation)
    }

  s StYear=Category.YearOfStudy
    
  //--------------ФОРМИРУЕМ ЗАПРОС---------------
  s tStatement = ##class(%SQL.Statement).%New()
  s tStatement.%ObjectSelectMode = 1
  s tSQL=5
  s tSQL(1)="select ID from Learner"
  s tSQL(2)="where ifActive=1"
  s tSQL(3)="and TypeOfSt_Spec %INLIST ? SIZE((10))"
  s tSQL(4)="and TypeOfSt_TypeOfEducation %INLIST ? SIZE((10))"
  s tSQL(5)="and TypeOfSt_YearOfStudy=?"
  s dynd=forDynd,dynd(1)=StSpec,dynd(2)=StType,dynd(3)=StYear
  // Определяем выборка студентов для создания или модификации ?
  s tStatus = tStatement.%Prepare(.tSQL)
  s tResult = tStatement.%Execute(dynd...)
  //d tResult.%Display()
  q tResult
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DefaultData>LearnerDefaultData</DefaultData>
<ExtentSize>300</ExtentSize>
<Data name="LearnerDefaultData">
<Subscript>"Learner"</Subscript>
<Value name="1">
<Value>TypeOfSt</Value>
</Value>
<Value name="2">
<Value>ifActive</Value>
</Value>
<Value name="3">
<Value>OldTypeOfSt</Value>
</Value>
</Data>
<Property name="%%CLASSNAME">
<Selectivity>100.0000%</Selectivity>
</Property>
<Property name="LastVisit">
<Selectivity>100.0000%</Selectivity>
</Property>
<Property name="PEmail">
<Selectivity>0.3333%</Selectivity>
</Property>
<Property name="PFullName">
<Selectivity>0.3333%</Selectivity>
</Property>
<Property name="PName">
<Selectivity>0.7813%</Selectivity>
</Property>
<Property name="PPassword">
<Selectivity>0.3333%</Selectivity>
</Property>
<Property name="PSurname">
<Selectivity>0.6211%</Selectivity>
</Property>
<Property name="TypeOfSt">
<Selectivity>0.6993%,Class:20.0000%</Selectivity>
</Property>
<Property name="ifActive">
<Selectivity>100.0000%</Selectivity>
</Property>
</Storage>
</Class>


<Class name="User.Learner">
<Description>
Студенты университета и информация о них</Description>
<SqlTableName>Learner</SqlTableName>
<Super>User.Person</Super>
<TimeChanged>63081,52722.010286</TimeChanged>
<TimeCreated>62987,44327.848631</TimeCreated>

<Property name="ifActive">
<Description>
Активен ли этот студент или уже закончил обучение по всем изучаемым с помощью КП дисциплинам?</Description>
<Type>%Boolean</Type>
<InitialExpression>"1"</InitialExpression>
<Required>1</Required>
</Property>

<Property name="TypeOfSt">
<Description>
Контингент студентов (Специальность, форма обучения, курс, группа)</Description>
<Type>StCategory</Type>
<Required>1</Required>
</Property>

<UDLText name="T">
<Content><![CDATA[
// Property OldTypeOfSt As StCategory;

]]></Content>
</UDLText>

<UDLText name="T">
<Content><![CDATA[/*------------------------MVC-------------------------*/
]]></Content>
</UDLText>

<Method name="%OnNewSource">
<Description>
Старые данные о студенте
Заполняется сразу перед обновлением (редактирования) профиля студента, самим студентом.
Load an instance of a new (unsaved) source object for this DataModel.</Description>
<FormalSpec>*pSC:%Status=$$$OK</FormalSpec>
<ReturnType>%RegisteredObject</ReturnType>
<Implementation><![CDATA[    Quit ##class(User.Learner).%New()
]]></Implementation>
</Method>

<Method name="%OnSaveSource">
<Description>
Save instance of associated source object.</Description>
<FormalSpec>pSource:User.Learner</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    Set tSC=pSource.%Save()
    If $$$ISOK(tSC)
     { 
       Set ..%id=pSource.%Id()
       // Выполняем серверные методы для формирования учебного плана для
       // вновь зарегестрировавшегося студента
       /*s st=##class(User.Learner).%OpenId(..%id)
       d st.CreateMyCurriculum()
       */
       d pSource.CreateMyCurriculum()
     }
    Quit tSC
]]></Implementation>
</Method>

<Method name="%OnOpenSource">
<Description>
Load an instance of the source object for this DataModel.</Description>
<FormalSpec>pID:%String,pConcurrency:%Integer=-1,*pSC:%Status=$$$OK</FormalSpec>
<ReturnType>%RegisteredObject</ReturnType>
<Implementation><![CDATA[    Quit ##class(User.Learner).%OpenId(pID,pConcurrency,.pSC)
]]></Implementation>
</Method>

<Method name="%OnDeleteSource">
<Description>
Delete instance of associated source object.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pID:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[   Quit ##class(User.Learner).%DeleteId(pID)
]]></Implementation>
</Method>

<Method name="%OnLoadModel">
<Description>
Do the actual work of loading values from the source object.</Description>
<FormalSpec>pSource:User.Learner</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    Set ..PLogin = pSource.PLogin
    Set ..PPassword = pSource.PPassword
    Set ..PName = pSource.PName
    Set ..PSurname=pSource.PSurname
    //Set ..PEmail=pSource.PEmail
    if pSource.%Id()="" {Set ..PEmail="yours@gmail.com"} else {Set ..PEmail=pSource.PEmail}
    Set ..TypeOfSt.Spec=pSource.TypeOfSt.Spec
    Set ..TypeOfSt.TypeOfEducation=pSource.TypeOfSt.TypeOfEducation
    Set ..TypeOfSt.YearOfStudy=pSource.TypeOfSt.YearOfStudy
    Set ..TypeOfSt.Class=pSource.TypeOfSt.Class
    Quit $$$OK
]]></Implementation>
</Method>

<Method name="%OnStoreModel">
<Description>
Do the actual work of storing values into the source object.</Description>
<FormalSpec>pSource:User.Learner</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    Set pSource.PLogin = ..PLogin
    Set pSource.PPassword = $system.Encryption.MD5Hash("12345"_..PPassword)
    Set pSource.PName = ..PName
    Set pSource.PSurname = ..PSurname
    Set pSource.PEmail = ..PEmail
    Set pSource.TypeOfSt.Spec=..TypeOfSt.Spec
    Set pSource.TypeOfSt.TypeOfEducation=..TypeOfSt.TypeOfEducation
    Set pSource.TypeOfSt.YearOfStudy=..TypeOfSt.YearOfStudy
    Set pSource.TypeOfSt.Class=..TypeOfSt.Class
    Quit $$$OK
]]></Implementation>
</Method>

<Method name="PEmailIsValidJS">
<ClassMethod>1</ClassMethod>
<FormalSpec>value</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[  return ('' == value) ? 'Invalid Email' : '';
]]></Implementation>
</Method>

<Method name="PNameIsValidJS">
<ClassMethod>1</ClassMethod>
<FormalSpec>value</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[  return ('' == value) ? 'Invalid Name' : '';
]]></Implementation>
</Method>

<Method name="PSurnameIsValidJS">
<ClassMethod>1</ClassMethod>
<FormalSpec>value</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[  return ('' == value) ? 'Invalid Surname' : '';
]]></Implementation>
</Method>

<Method name="PLoginIsValidJS">
<ClassMethod>1</ClassMethod>
<FormalSpec>value</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[  return ('' == value) ? 'Invalid Login' : '';
]]></Implementation>
</Method>

<Method name="PPasswordIsValidJS">
<ClassMethod>1</ClassMethod>
<FormalSpec>value</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[  return ('' == value) ? 'Invalid Password' : '';
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[/*-----------------Бизнес логика---------------------*/
]]></Content>
</UDLText>

<Method name="CreateMyCurriculum">
<Description>
Формирует учебный план для вновь зарегестрировавшегося студента 
Возвращает количество тем, которые были успешно внесены в учебный план текущего студента.
Вызывать только после регистрации нового студента, но не после изменения профиля.</Description>
<FormalSpec>*num:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	// Достаём категорию студентов, к которой относится текущий студент
	s StCategory=..TypeOfSt
	// Получаем ResultSet контекстов, которые доступны в данный момент времени для этой категории студентов
	s tResult=##class(User.Theme).GetSetOfConts(StCategory)
	// Каждый из этих контекстов копируем в Curriculum данного студента
	 if tResult.%SQLCODE<0 q $$$ERROR($$$GeneralError,"Failure when executing the SQL query")
	    TSTART
	     s errCode=""
	     // Тут выбраны контексты, которые нужно добавить в учебный план нового студента
	      while tResult.%Next()
	         {
                s newCurr=##class(User.Curriculum).%New()
                s newCurr.Student=$THIS
                s newCurr.Context=##class(User.Theme).%OpenId(tResult.ID.%Id())
               	s rs=newCurr.%Save()
	 	         If $$$ISERR(rs)
	               {
	                 s errCode=tResult.ID.%Id()
	                 q
	               }
	 	     }
	 	  s num=tResult.%ROWCOUNT
	 	  if errCode
	 	    {
	 	      TROLLBACK
	 	      q $$$ERROR($$$GeneralError,"Failure when saving a new Curriculum entity.Context ID= "_errCode_" Student ID= "_$THIS.%Id())
	 	    }
         TCOMMIT
   q num
]]></Implementation>
</Method>

<Method name="ModifyMyCurriculum">
<Description>
Обновляет существующий учебный план текущего студента
Вызывать после изменения профиля (изменение профиля происходит в случае: ошибка ввода при регистрации, переход на другой курс и пр.)
В случае если категория студента была изменена (%IsModified() smth. like that).
Возвращает количество тем (контекстов), которые были скрыты как ненужные (N) и количество тем которые были добавлены (M)</Description>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
  // Проверяем не пуст ли учебный план текущего студента?
  if ..IfNotEmpty()=0 q "0 Модифицировано: 0 Создано: 0" // Учебный план данного студента полностью пуст
  // Имеется хотя бы одна тема в учебном плане студента
  // Делаем все эти темы (1-N) невидимыми (метод, исключающий студента из учебного процесса)
  s disabled=..DisableSt()
  // Получаем контексты, доступные для этой "обновлённой категории" студентов, в которую входит наш студент
  s tResult=##class(User.Theme).GetSetOfConts(..TypeOfSt)
  if tResult.%SQLCODE<0 q $$$ERROR($$$GeneralError,"Failure when executing the SQL query")
	 // Добавляем эти контексты в учебный план текущего студента
	 // Если такой контекст уже существует в учебном плане "в скрытом виде" (после предыдущей опреации), тогда делаем его открытым, не добавляя новую запись, что привело бы к ошибке в следствие уникальности пары Студент-Контекст
	 // Возвращаем количество добавленных и количество изменённых контекстов в учебном плане текущего студента
	 TSTART
	 s errCode=""
	 s updated=0
	 s created=0
       while tResult.%Next()
	     {
           if ##class(User.Curriculum).StConExists(..%Id(), tResult.ID.%Id())
             {
	           // Cуществует - обновить ifHide=1 для этого студента и принадлежащей ему темы (контекста)
	           s oldCurr=##class(User.Curriculum).StConOpen(..%Id(),tResult.ID.%Id(),2,.sc)
	           s oldCurr.ifHide=1
	           s rs=oldCurr.%Save()
	           If $$$ISOK(rs) s updated=updated+1                   
             }
           else
             {
	          // Не существует - создать запись для этого студента и этого контекста
	          s newCurr=##class(User.Curriculum).%New()
	 	      s newCurr.Student=$THIS
	 	      s newCurr.Context=##class(User.Theme).%OpenId(tResult.ID.%Id())
	 	      s rs=newCurr.%Save()
	 	      If $$$ISOK(rs) s created=created+1	                     
             }
  	      } 
  	    // Общее количество изменений в БД
	 	s affected=updated+created  
	 	if tResult.%ROWCOUNT'=affected
	 	   {
	 	     TROLLBACK
	 	     q $$$ERROR($$$GeneralError,"Failure when trying to update Curriculum for this student."_..%Id())
	 	   }
    TCOMMIT 
  q "Модифицировано: "_(disabled-updated)_" Создано: "_created
]]></Implementation>
</Method>

<Method name="IfNotEmpty">
<Description>
Проверяем не пуст ли учебный план текущего студента? (чей учебный план будет обновлён)</Description>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
  s StId=..%Id()
  &sql(select TOP 1 ID INTO :Id from Curriculum where Student=:StId)
    if Id'=""
      {
	   q 1
	  } 
    else 
      {
	   q 1
	  }
]]></Implementation>
</Method>

<Method name="SetOldTypeOfSt">
<Description>
Запоминает предыдущую информацию о студенте (до изменения профиля)
Вызывается перед сохранением новых данных о студенте</Description>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	// Копируем текущую информацию о студенте
	s ..OldTypeOfSt=..TypeOfSt
	s rs=..%Save()
	  if $$$ISERR(rs)
	    {
          q $$$ERROR($$$GeneralError,"Can't save OldTypeOfSt.")                  
	    }
	q $$$OK
]]></Implementation>
</Method>

<Method name="DisableSt">
<Description>
Делает все существующие в учебном плане данного студента контексты скрытыми, т.е. исключает студента из учебного процесса
Возвращает количество изменённых (сделанных невидимыми) тем (контекстов) этого студента</Description>
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[
	s StId=..%Id()
	&sql(update Curriculum set ifHide=0 where ifHide=1 and Student=:StId)
	q %ROWCOUNT
]]></Implementation>
</Method>

<Method name="GetSetOfSts">
<Description>
Выбрать "активных" студентов (т.е. объект SQL.Statement) из базы данных</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>Category:User.StCategory,forDynd:%Integer=3</FormalSpec>
<ReturnType>%SQL.StatementResult</ReturnType>
<Implementation><![CDATA[
 //------Разбираем входные данные:-------
 if Category.Spec="*" 
    {
	  s StSpec=##class(User.StCategory).GetFullList("Spec")
	} 
  else 
	{
	  s StSpec=##class(User.StCategory).GetShortList(Category.Spec)
    }
  if Category.TypeOfEducation="*" 
    {
	  s StType=##class(User.StCategory).GetFullList("Type")
	} 
  else 
	{
	  s StType=##class(User.StCategory).GetShortList(Category.TypeOfEducation)
    }

  s StYear=Category.YearOfStudy
    
  //--------------ФОРМИРУЕМ ЗАПРОС---------------
  s tStatement = ##class(%SQL.Statement).%New()
  s tStatement.%ObjectSelectMode = 1
  s tSQL=5
  s tSQL(1)="select ID from Learner"
  s tSQL(2)="where ifActive=1"
  s tSQL(3)="and TypeOfSt_Spec %INLIST ? SIZE((10))"
  s tSQL(4)="and TypeOfSt_TypeOfEducation %INLIST ? SIZE((10))"
  s tSQL(5)="and TypeOfSt_YearOfStudy=?"
  s dynd=forDynd,dynd(1)=StSpec,dynd(2)=StType,dynd(3)=StYear
  // Определяем выборка студентов для создания или модификации ?
  s tStatus = tStatement.%Prepare(.tSQL)
  s tResult = tStatement.%Execute(dynd...)
  //d tResult.%Display()
  q tResult
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DefaultData>LearnerDefaultData</DefaultData>
<ExtentSize>300</ExtentSize>
<Data name="LearnerDefaultData">
<Subscript>"Learner"</Subscript>
<Value name="1">
<Value>TypeOfSt</Value>
</Value>
<Value name="2">
<Value>ifActive</Value>
</Value>
<Value name="3">
<Value>OldTypeOfSt</Value>
</Value>
</Data>
<Property name="%%CLASSNAME">
<Selectivity>100.0000%</Selectivity>
</Property>
<Property name="LastVisit">
<Selectivity>100.0000%</Selectivity>
</Property>
<Property name="PEmail">
<Selectivity>0.3333%</Selectivity>
</Property>
<Property name="PFullName">
<Selectivity>0.3333%</Selectivity>
</Property>
<Property name="PName">
<Selectivity>0.7813%</Selectivity>
</Property>
<Property name="PPassword">
<Selectivity>0.3333%</Selectivity>
</Property>
<Property name="PSurname">
<Selectivity>0.6211%</Selectivity>
</Property>
<Property name="TypeOfSt">
<Selectivity>0.6993%,Class:20.0000%</Selectivity>
</Property>
<Property name="ifActive">
<Selectivity>100.0000%</Selectivity>
</Property>
</Storage>
</Class>


<Class name="User.Person">
<Description>
Абстрактный класс от которого наследуются студенты (Learner) и преподаватели (Teacher)</Description>
<Abstract>1</Abstract>
<Super>%Persistent,%Populate,%XML.Adaptor,%ZEN.DataModel.ObjectDataModel</Super>
<TimeChanged>63039,59471.858932</TimeChanged>
<TimeCreated>62987,43215.279201</TimeCreated>

<Property name="PLogin">
<Type>%String</Type>
<Required>1</Required>
<Parameter name="MAXLEN" value="200"/>
<Parameter name="POPSPEC" value="StringMin(6,10)_&quot;log&quot;"/>
</Property>

<Index name="PL">
<Properties>PLogin</Properties>
<Unique>1</Unique>
</Index>

<Property name="PPassword">
<Type>%String</Type>
<Required>1</Required>
<Parameter name="MAXLEN" value="20"/>
<Parameter name="MINLEN" value="6"/>
<Parameter name="POPSPEC" value="StringMin(6,10)"/>
</Property>

<Property name="PName">
<Type>%String</Type>
<Parameter name="MAXLEN" value="100"/>
<Parameter name="POPSPEC" value="FirstName()"/>
</Property>

<Property name="PSurname">
<Type>%String</Type>
<Parameter name="MAXLEN" value="100"/>
<Parameter name="POPSPEC" value="LastName()"/>
</Property>

<Property name="PFullName">
<Type>%String</Type>
<SqlComputeCode> Set {PFullName} = {PSurname}_" "_{PName} </SqlComputeCode>
<SqlComputed>1</SqlComputed>
</Property>

<Property name="PEmail">
<Description>
Все участники учебного процесса и преподаватели и студенты должны иметь свой Google-аккаунт</Description>
<Type>%String</Type>
<Required>1</Required>
<Parameter name="MAXLEN" value="50"/>
<Parameter name="PATTERN" value=".e1&quot;@gmail.com&quot;"/>
<Parameter name="POPSPEC" value="String(10)_&quot;@gmail.com&quot;"/>
</Property>

<Property name="LastVisit">
<Description>
Последнее посещение сайта</Description>
<Type>%TimeStamp</Type>
<InitialExpression>$zdt($H,3)</InitialExpression>
</Property>

<Method name="IfExist">
<Description>
Проверка существования человека (обёртка над встроенным методом Index_Name_Exists)</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>LoginToCheck:%String</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[	q ..PLExists(LoginToCheck)
]]></Implementation>
</Method>

<Method name="GetPerson">
<Description>
Вернуть %Id() человека по его нику</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>Login:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
  s id="" 
  If ..PLExists(Login)=1
	{
	  &sql(SELECT ID INTO :id FROM Person WHERE (PLogin = :Login)) 
	}
  q id
]]></Implementation>
</Method>

<Method name="GetPersonObj">
<Description>
Вернуть %Oid() человека по его нику</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>Login:%String</FormalSpec>
<ReturnType>Person</ReturnType>
<Implementation><![CDATA[
  s id=##class(Person).GetPerson(Login)
  s Obj=##class(Person).%OpenId(id)
  If Obj'=$$$NULLOREF 
    {
	    q Obj
    }
  else
    {
	    q $$$NULLOREF
    }
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[
/*
Method PPasswordSet(Password As %String) As %Status
{
	//s ^A=Password
	//set saltIs=..%Id()_Password
	set i%PPassword = $system.Encryption.MD5Hash("12345")
	Quit $$$OK
}
*/
]]></Content>
</UDLText>

<Method name="IsPasswordCorrect">
<Description>
Сеттер для хеширования пароля с помощью "соли"
Проверка пароля </Description>
<FormalSpec>Password:%String</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
   //s saltIs=..%Id()_Password
   if ..PPassword=$SYSTEM.Encryption.MD5Encode("12345"_Password)
     {
	    quit 1
     }
   else
     {
	    quit 0
     }
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DataLocation>^User.PersonD</DataLocation>
<DefaultData>PersonDefaultData</DefaultData>
<IdLocation>^User.PersonD</IdLocation>
<IndexLocation>^User.PersonI</IndexLocation>
<StreamLocation>^User.PersonS</StreamLocation>
<ExtentSize>100000</ExtentSize>
<Data name="PersonDefaultData">
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>PLogin</Value>
</Value>
<Value name="3">
<Value>PPassword</Value>
</Value>
<Value name="4">
<Value>PName</Value>
</Value>
<Value name="5">
<Value>PSurname</Value>
</Value>
<Value name="6">
<Value>PFullName</Value>
</Value>
<Value name="7">
<Value>PEmail</Value>
</Value>
<Value name="8">
<Value>LastVisit</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="User.Person">
<Description>
Абстрактный класс от которого наследуются студенты (Learner) и преподаватели (Teacher)</Description>
<Abstract>1</Abstract>
<Super>%Persistent,%Populate,%XML.Adaptor,%ZEN.DataModel.ObjectDataModel</Super>
<TimeChanged>63039,59471.858932</TimeChanged>
<TimeCreated>62987,43215.279201</TimeCreated>

<Property name="PLogin">
<Type>%String</Type>
<Required>1</Required>
<Parameter name="MAXLEN" value="200"/>
<Parameter name="POPSPEC" value="StringMin(6,10)_&quot;log&quot;"/>
</Property>

<Index name="PL">
<Properties>PLogin</Properties>
<Unique>1</Unique>
</Index>

<Property name="PPassword">
<Type>%String</Type>
<Required>1</Required>
<Parameter name="MAXLEN" value="20"/>
<Parameter name="MINLEN" value="6"/>
<Parameter name="POPSPEC" value="StringMin(6,10)"/>
</Property>

<Property name="PName">
<Type>%String</Type>
<Parameter name="MAXLEN" value="100"/>
<Parameter name="POPSPEC" value="FirstName()"/>
</Property>

<Property name="PSurname">
<Type>%String</Type>
<Parameter name="MAXLEN" value="100"/>
<Parameter name="POPSPEC" value="LastName()"/>
</Property>

<Property name="PFullName">
<Type>%String</Type>
<SqlComputeCode> Set {PFullName} = {PSurname}_" "_{PName} </SqlComputeCode>
<SqlComputed>1</SqlComputed>
</Property>

<Property name="PEmail">
<Description>
Все участники учебного процесса и преподаватели и студенты должны иметь свой Google-аккаунт</Description>
<Type>%String</Type>
<Required>1</Required>
<Parameter name="MAXLEN" value="50"/>
<Parameter name="PATTERN" value=".e1&quot;@gmail.com&quot;"/>
<Parameter name="POPSPEC" value="String(10)_&quot;@gmail.com&quot;"/>
</Property>

<Property name="LastVisit">
<Description>
Последнее посещение сайта</Description>
<Type>%TimeStamp</Type>
<InitialExpression>$zdt($H,3)</InitialExpression>
</Property>

<Method name="IfExist">
<Description>
Проверка существования человека (обёртка над встроенным методом Index_Name_Exists)</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>LoginToCheck:%String</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[	q ..PLExists(LoginToCheck)
]]></Implementation>
</Method>

<Method name="GetPerson">
<Description>
Вернуть %Id() человека по его нику</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>Login:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
  s id="" 
  If ..PLExists(Login)=1
	{
	  &sql(SELECT ID INTO :id FROM Person WHERE (PLogin = :Login)) 
	}
  q id
]]></Implementation>
</Method>

<Method name="GetPersonObj">
<Description>
Вернуть %Oid() человека по его нику</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>Login:%String</FormalSpec>
<ReturnType>Person</ReturnType>
<Implementation><![CDATA[
  s id=##class(Person).GetPerson(Login)
  s Obj=##class(Person).%OpenId(id)
  If Obj'=$$$NULLOREF 
    {
	    q Obj
    }
  else
    {
	    q $$$NULLOREF
    }
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[
/*
Method PPasswordSet(Password As %String) As %Status
{
	//s ^A=Password
	//set saltIs=..%Id()_Password
	set i%PPassword = $system.Encryption.MD5Hash("12345")
	Quit $$$OK
}
*/
]]></Content>
</UDLText>

<Method name="IsPasswordCorrect">
<Description>
Сеттер для хеширования пароля с помощью "соли"
Проверка пароля </Description>
<FormalSpec>Password:%String</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
   //s saltIs=..%Id()_Password
   if ..PPassword=$SYSTEM.Encryption.MD5Encode("12345"_Password)
     {
	    quit 1
     }
   else
     {
	    quit 0
     }
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DataLocation>^User.PersonD</DataLocation>
<DefaultData>PersonDefaultData</DefaultData>
<IdLocation>^User.PersonD</IdLocation>
<IndexLocation>^User.PersonI</IndexLocation>
<StreamLocation>^User.PersonS</StreamLocation>
<ExtentSize>100000</ExtentSize>
<Data name="PersonDefaultData">
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>PLogin</Value>
</Value>
<Value name="3">
<Value>PPassword</Value>
</Value>
<Value name="4">
<Value>PName</Value>
</Value>
<Value name="5">
<Value>PSurname</Value>
</Value>
<Value name="6">
<Value>PFullName</Value>
</Value>
<Value name="7">
<Value>PEmail</Value>
</Value>
<Value name="8">
<Value>LastVisit</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="User.ReferenceModel">
<Description>
Reference Model (RM) эталоная модель учебной предметной области
Представляет собой набор КП объединённых в рамках одного контекста</Description>
<SqlTableName>ReferenceModel</SqlTableName>
<Super>%Persistent,%Populate</Super>
<TimeChanged>63069,49868.611473</TimeChanged>
<TimeCreated>62857,40755.855725</TimeCreated>

<Property name="Context">
<Description>
Контекст эталонной модели</Description>
<Type>User.Theme</Type>
<Required>1</Required>
</Property>

<Property name="CPItems">
<Description>
Следует помнить SQL-поля CPItems не существует! Только объектный доступ! SQL-доступ из CP!
Когнитивный прототип</Description>
<Type>User.CP</Type>
<Cardinality>many</Cardinality>
<Inverse>RM</Inverse>
<Relationship>1</Relationship>
</Property>

<Method name="GetModel">
<Description>
Сервисный метод</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    // Проходим по всем контекстам
    s i=1, next=##class(User.Theme).%OpenId(i)
    while next {
	  // Создаём экземпляры эталонной модели для каждого контекста
	  s new=..%New()
	  s new.Context=next
	  d new.%Save()
	  s i=i+1
	  s next=##class(User.Theme).%OpenId(i)   
    }
    q $$$OK
]]></Implementation>
</Method>

<Method name="AddEntry">
<Description>
Добавить новую запись в эталонную модель</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>cp:%Integer,cont:%Integer</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
  s new=..%New()
  s new.Context=..GetObject(cont,"User.Theme")
  d new.CPItems.Insert(..GetObject(cp,"User.CP"))
  s rs=new.%Save()
   if $$$ISERR(rs) {
	 q $$$ERROR($$$GeneralError,"Can't add to RM!")
   }
  q $$$OK
]]></Implementation>
</Method>

<Method name="GetObject">
<ClassMethod>1</ClassMethod>
<FormalSpec>id:%Integer,classname:%String</FormalSpec>
<Private>1</Private>
<ReturnType>%Persistent</ReturnType>
<Implementation><![CDATA[  q $CLASSMETHOD(classname, "%OpenId",id)
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DataLocation>^User.ReferenceModelD</DataLocation>
<DefaultData>ReferenceModelDefaultData</DefaultData>
<IdLocation>^User.ReferenceModelD</IdLocation>
<IndexLocation>^User.ReferenceModelI</IndexLocation>
<StreamLocation>^User.ReferenceModelS</StreamLocation>
<ExtentSize>28</ExtentSize>
<Data name="ReferenceModelDefaultData">
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>Subject</Value>
</Value>
<Value name="3">
<Value>Course</Value>
</Value>
<Value name="4">
<Value>Theme</Value>
</Value>
<Value name="5">
<Value>CPItems</Value>
</Value>
<Value name="6">
<Value>Context</Value>
</Value>
</Data>
<Property name="%%CLASSNAME">
<Selectivity>100.0000%</Selectivity>
</Property>
<Property name="Context">
<Selectivity>3.5714%</Selectivity>
</Property>
<Property name="Theme">
<Selectivity>5.0000%</Selectivity>
</Property>
<SQLMap name="IDKEY">
<BlockCount>-4</BlockCount>
</SQLMap>
<SQLMap name="NewIndex1">
<BlockCount>-4</BlockCount>
</SQLMap>
</Storage>
</Class>


<Class name="User.ReferenceModel">
<Description>
Reference Model (RM) эталоная модель учебной предметной области
Представляет собой набор КП объединённых в рамках одного контекста</Description>
<SqlTableName>ReferenceModel</SqlTableName>
<Super>%Persistent,%Populate</Super>
<TimeChanged>63069,49868.611473</TimeChanged>
<TimeCreated>62857,40755.855725</TimeCreated>

<Property name="Context">
<Description>
Контекст эталонной модели</Description>
<Type>User.Theme</Type>
<Required>1</Required>
</Property>

<Property name="CPItems">
<Description>
Следует помнить SQL-поля CPItems не существует! Только объектный доступ! SQL-доступ из CP!
Когнитивный прототип</Description>
<Type>User.CP</Type>
<Cardinality>many</Cardinality>
<Inverse>RM</Inverse>
<Relationship>1</Relationship>
</Property>

<Method name="GetModel">
<Description>
Сервисный метод</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    // Проходим по всем контекстам
    s i=1, next=##class(User.Theme).%OpenId(i)
    while next {
	  // Создаём экземпляры эталонной модели для каждого контекста
	  s new=..%New()
	  s new.Context=next
	  d new.%Save()
	  s i=i+1
	  s next=##class(User.Theme).%OpenId(i)   
    }
    q $$$OK
]]></Implementation>
</Method>

<Method name="AddEntry">
<Description>
Добавить новую запись в эталонную модель</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>cp:%Integer,cont:%Integer</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
  s new=..%New()
  s new.Context=..GetObject(cont,"User.Theme")
  d new.CPItems.Insert(..GetObject(cp,"User.CP"))
  s rs=new.%Save()
   if $$$ISERR(rs) {
	 q $$$ERROR($$$GeneralError,"Can't add to RM!")
   }
  q $$$OK
]]></Implementation>
</Method>

<Method name="GetObject">
<ClassMethod>1</ClassMethod>
<FormalSpec>id:%Integer,classname:%String</FormalSpec>
<Private>1</Private>
<ReturnType>%Persistent</ReturnType>
<Implementation><![CDATA[  q $CLASSMETHOD(classname, "%OpenId",id)
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DataLocation>^User.ReferenceModelD</DataLocation>
<DefaultData>ReferenceModelDefaultData</DefaultData>
<IdLocation>^User.ReferenceModelD</IdLocation>
<IndexLocation>^User.ReferenceModelI</IndexLocation>
<StreamLocation>^User.ReferenceModelS</StreamLocation>
<ExtentSize>28</ExtentSize>
<Data name="ReferenceModelDefaultData">
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>Subject</Value>
</Value>
<Value name="3">
<Value>Course</Value>
</Value>
<Value name="4">
<Value>Theme</Value>
</Value>
<Value name="5">
<Value>CPItems</Value>
</Value>
<Value name="6">
<Value>Context</Value>
</Value>
</Data>
<Property name="%%CLASSNAME">
<Selectivity>100.0000%</Selectivity>
</Property>
<Property name="Context">
<Selectivity>3.5714%</Selectivity>
</Property>
<Property name="Theme">
<Selectivity>5.0000%</Selectivity>
</Property>
<SQLMap name="IDKEY">
<BlockCount>-4</BlockCount>
</SQLMap>
<SQLMap name="NewIndex1">
<BlockCount>-4</BlockCount>
</SQLMap>
</Storage>
</Class>


<Class name="User.StCategory">
<Description>
Категории студентов: специальность, тип обучения, курс, группа, </Description>
<Super>%SerialObject,%Populate,%ZEN.DataModel.ObjectDataModel</Super>
<TimeChanged>63049,40037.347264</TimeChanged>
<TimeCreated>62993,61310.473759</TimeCreated>

<Parameter name="SPECBYDEFAULT">
<Default>Фарм;Мед;Пед;Стомат;ТПКС; Лаб. диаг.</Default>
</Parameter>

<Parameter name="TYPEBYDEFAULT">
<Default>Дневное;Заочное</Default>
</Parameter>

<Parameter name="YEARBYDEFAULT">
<Default>1 курс;2 курс;3 курс;4 курс;5 курс;6 курс</Default>
</Parameter>

<Parameter name="CLASSESBYDEFAULT">
<Default>1;2;3;4;5;6;7;8;9;10</Default>
</Parameter>

<Property name="Spec">
<Description>
Специальность : { Фарм;Мед;Пед;Стомат;ТПКС;Лаб.диаг.} и пр.</Description>
<Type>%String</Type>
<Parameter name="POPSPEC" value="ValueList(&quot;,Фарм;ТПКС,Мед;Пед;Стомат,ТПКС, Лаб. диаг.&quot;)"/>
</Property>

<Property name="TypeOfEducation">
<Description>
Тип обучения (заочное или дневное) : {Дневное;Заочное}</Description>
<Type>%String</Type>
<Parameter name="POPSPEC" value="ValueList(&quot;,*,Дневное,Заочное&quot;)"/>
</Property>

<Property name="YearOfStudy">
<Description>
Курс: {1;2;3;4;5;6}</Description>
<Type>%String</Type>
<Parameter name="POPSPEC" value="ValueList(&quot;,1 курс,2 курс,3 курс&quot;)"/>
</Property>

<Property name="Class">
<Description>
Группа: любое число от 1 до 30 (в медицинском университете (ЗГМУ))</Description>
<Type>%String</Type>
<Parameter name="POPSPEC" value="ValueList(&quot;,*,1-10,10-20&quot;)"/>
</Property>

<Method name="GetShortList">
<Description>
Превращает строковые значение разделённые ";" в списочную структуру</Description>
<Final>1</Final>
<ClassMethod>1</ClassMethod>
<FormalSpec>WhatToConvert:%String=""</FormalSpec>
<ReturnType>%List</ReturnType>
<Implementation><![CDATA[	q $LFS(WhatToConvert,";")
]]></Implementation>
</Method>

<Method name="GetFullList">
<Description>
Возвращает полный (by default) список категорий</Description>
<Final>1</Final>
<ClassMethod>1</ClassMethod>
<FormalSpec>WhatToConvert:%String="",*x:%String=""</FormalSpec>
<ReturnType>%List</ReturnType>
<Implementation><![CDATA[
	If WhatToConvert="Spec"
	  {
		s myString=..#SPECBYDEFAULT
	  }
	ElseIf WhatToConvert="Type"
	  {
		s myString=..#TYPEBYDEFAULT
	  }
	ElseIf WhatToConvert="Year"
	  {
		s myString=..#YEARBYDEFAULT
	  }
    ElseIf WhatToConvert="Class"
	  {
		s myString=..#CLASSESBYDEFAULT
	  }
	Else
	  {
		q "Wrong parameter!"
	  }
	q $LFS(myString,";")
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheSerialState</Type>
<State>StCategoryState</State>
<StreamLocation>^User.StCategoryS</StreamLocation>
<Data name="StCategoryState">
<Value name="1">
<Value>Spec</Value>
</Value>
<Value name="2">
<Value>TypeOfEducation</Value>
</Value>
<Value name="3">
<Value>YearOfStudy</Value>
</Value>
<Value name="4">
<Value>Class</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="User.StCategory">
<Description>
Категории студентов: специальность, тип обучения, курс, группа, </Description>
<Super>%SerialObject,%Populate,%ZEN.DataModel.ObjectDataModel</Super>
<TimeChanged>63049,40037.347264</TimeChanged>
<TimeCreated>62993,61310.473759</TimeCreated>

<Parameter name="SPECBYDEFAULT">
<Default>Фарм;Мед;Пед;Стомат;ТПКС; Лаб. диаг.</Default>
</Parameter>

<Parameter name="TYPEBYDEFAULT">
<Default>Дневное;Заочное</Default>
</Parameter>

<Parameter name="YEARBYDEFAULT">
<Default>1 курс;2 курс;3 курс;4 курс;5 курс;6 курс</Default>
</Parameter>

<Parameter name="CLASSESBYDEFAULT">
<Default>1;2;3;4;5;6;7;8;9;10</Default>
</Parameter>

<Property name="Spec">
<Description>
Специальность : { Фарм;Мед;Пед;Стомат;ТПКС;Лаб.диаг.} и пр.</Description>
<Type>%String</Type>
<Parameter name="POPSPEC" value="ValueList(&quot;,Фарм;ТПКС,Мед;Пед;Стомат,ТПКС, Лаб. диаг.&quot;)"/>
</Property>

<Property name="TypeOfEducation">
<Description>
Тип обучения (заочное или дневное) : {Дневное;Заочное}</Description>
<Type>%String</Type>
<Parameter name="POPSPEC" value="ValueList(&quot;,*,Дневное,Заочное&quot;)"/>
</Property>

<Property name="YearOfStudy">
<Description>
Курс: {1;2;3;4;5;6}</Description>
<Type>%String</Type>
<Parameter name="POPSPEC" value="ValueList(&quot;,1 курс,2 курс,3 курс&quot;)"/>
</Property>

<Property name="Class">
<Description>
Группа: любое число от 1 до 30 (в медицинском университете (ЗГМУ))</Description>
<Type>%String</Type>
<Parameter name="POPSPEC" value="ValueList(&quot;,*,1-10,10-20&quot;)"/>
</Property>

<Method name="GetShortList">
<Description>
Превращает строковые значение разделённые ";" в списочную структуру</Description>
<Final>1</Final>
<ClassMethod>1</ClassMethod>
<FormalSpec>WhatToConvert:%String=""</FormalSpec>
<ReturnType>%List</ReturnType>
<Implementation><![CDATA[	q $LFS(WhatToConvert,";")
]]></Implementation>
</Method>

<Method name="GetFullList">
<Description>
Возвращает полный (by default) список категорий</Description>
<Final>1</Final>
<ClassMethod>1</ClassMethod>
<FormalSpec>WhatToConvert:%String="",*x:%String=""</FormalSpec>
<ReturnType>%List</ReturnType>
<Implementation><![CDATA[
	If WhatToConvert="Spec"
	  {
		s myString=..#SPECBYDEFAULT
	  }
	ElseIf WhatToConvert="Type"
	  {
		s myString=..#TYPEBYDEFAULT
	  }
	ElseIf WhatToConvert="Year"
	  {
		s myString=..#YEARBYDEFAULT
	  }
    ElseIf WhatToConvert="Class"
	  {
		s myString=..#CLASSESBYDEFAULT
	  }
	Else
	  {
		q "Wrong parameter!"
	  }
	q $LFS(myString,";")
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheSerialState</Type>
<State>StCategoryState</State>
<StreamLocation>^User.StCategoryS</StreamLocation>
<Data name="StCategoryState">
<Value name="1">
<Value>Spec</Value>
</Value>
<Value name="2">
<Value>TypeOfEducation</Value>
</Value>
<Value name="3">
<Value>YearOfStudy</Value>
</Value>
<Value name="4">
<Value>Class</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="User.Statistics">
<Description>
Статистика изпользования понятий при разработке эталонной модели курса</Description>
<SqlTableName>Stat</SqlTableName>
<Super>%Persistent,%Populate,%XML.Adaptor</Super>
<TimeChanged>63070,60022.357685</TimeChanged>
<TimeCreated>63050,48458.19925</TimeCreated>

<Property name="Concept">
<Description>
Понятие</Description>
<Type>User.CPRelationships</Type>
</Property>

<Property name="Context">
<Description>
Контекст в котором данное понятие используется</Description>
<Type>User.Theme</Type>
</Property>

<Index name="CC">
<Properties>Concept,Context</Properties>
<Unique>1</Unique>
</Index>

<Property name="LastUsed">
<Description>
Дата когда понятие было в последний раз применено для построения КП в этом контексте
1 - MM/DD/[YY]YY (07/01/97 or 03/27/2002) — American numeric format
2 - DD Mmm [ YY ]YY (01 Jul 97 or 27 Mar 2002)
3 - YYYY-MM-DD (1997-07-01 or 2002-03-27) — ODBC format
4 - DD/MM/[YY]YY (01/07/97 or 27/03/2002) — European numeric format</Description>
<Type>%TimeStamp</Type>
<InitialExpression>$zdt($H,3)</InitialExpression>
</Property>

<Property name="Counter">
<Description>
Счётчик, указывающий сколько раз понятие было применено в данной теме</Description>
<Type>%Integer</Type>
<Parameter name="POPSPEC" value="Integer(1,5)"/>
</Property>

<Property name="Quality">
<Description>
В каком качестве это понятие использовалось в построении КП? Как концепт или как элемент когнитивной группы?</Description>
<Type>%String</Type>
<Parameter name="POPSPEC" value="ValueList(&quot;,Conc,Func,Feat,Cond,&quot;)"/>
</Property>

<Method name="GetStatistic">
<Description>
Сервисный метод вместо OnPopulate()</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    // Проходим по всем контекстам
    s i=1, next=##class(User.ReferenceModel).%OpenId(i)
    while next {
	    // Для каждого контекста определям набор КП-ов
	    
	    s rs=..GetSetOfCP(next.Context.%Id())
          if $$$ISOK(rs) {
            while rs.%Next()
             {
	           // Для каждого КП определяем концепт и набор связанных элементов
	           s cp=##class(User.CP).%OpenId(rs.ID)
	           s concept=cp.Concept
	           // Создаём экземпляр статистики для концепта
	           d ..InsertItem(concept,next.Context)
	           // Создаём экземпляр статистики для всех элементов когнитивной группы
	           s rels=cp.Relations
	            f y=1:1:rels.Count() {
		           d ..InsertItem(rels.GetAt(y),next.Context)
	            }
             }
          }
          
	    s i=i+1
	    s next=##class(User.ReferenceModel).%OpenId(i)
    }
    w i,!
    QUIT $$$OK
]]></Implementation>
</Method>

<Method name="InsertItem">
<Description>
Сервисный</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>rel:User.CPRelationships,con:User.Theme</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
  w rel.%Id(),!
  s new=..%New()
  s new.Concept=rel
  s new.Context=con
  s new.LastUsed=$zdt($H,3)
  s new.Quality=..ShortName(rel.%ClassName())
  s new.Counter=""
  q new.%Save()
]]></Implementation>
</Method>

<Method name="GetSetOfCP">
<Description>
Выбрать все КП в данной теме</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>Context:%Integer,*tResult:%SQL.StatementResult</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
  s tStatement = ##class(%SQL.Statement).%New()
  s tSQL="select ID from CP where RM->Context=?"
  s tStatus = tStatement.%Prepare(.tSQL)
  s tResult = tStatement.%Execute(Context)
    if tResult.%SQLCODE<0
      {
	    q $$$ERROR() 
      }
    else
      {
	    q tResult
      }
]]></Implementation>
</Method>

<Method name="ShortName">
<Description>
Конвертация</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>x:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
    if x="CPConcept" {
	   q "Conc"
    }
    elseif x="CPFunction" {
	   q "Func" 
    }
    elseif x="CPFeature" {
	   q "Feat"  
    }
    elseif x="CPCondition" {
	   q "Cond"
    }
    else {
	    w "error"
    }
]]></Implementation>
</Method>

<Method name="FullName">
<Description>
Обратная конвертация</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>x:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
    if x="Conc" {
	   q "CPConcept"
    }
    elseif x="Func" {
	   q "CPFunction"
    }
    elseif x="Feat"  {
	   q "CPFeature"
    }
    elseif x= "Cond" {
	   q "CPCondition"
    }
    else {
	    w "error"
    }
]]></Implementation>
</Method>

<Method name="SaveStat">
<ClassMethod>1</ClassMethod>
<FormalSpec>conc:User.CPRelationships,cont:User.Theme,quality:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
  s stat=..CCOpen(conc.%Id(), cont.%Id())
  if '$IsObject(stat) {
	s stat=..%New()
    s stat.Concept=conc
    s stat.Context=cont
    s stat.Quality=quality
    s stat.Counter=stat.Counter+1
  }
  s stat.LastUsed=$zdt($H,3)
  s rs=stat.%Save()
   if $$$ISERR(rs) {
	 q $$$ERROR($$$GeneralError,"Cant's save statistics!")
   } 
 q $$$OK
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DataLocation>^User.StatisticsD</DataLocation>
<DefaultData>StatisticsDefaultData</DefaultData>
<IdLocation>^User.StatisticsD</IdLocation>
<IndexLocation>^User.StatisticsI</IndexLocation>
<StreamLocation>^User.StatisticsS</StreamLocation>
<ExtentSize>7165</ExtentSize>
<Data name="StatisticsDefaultData">
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>Concept</Value>
</Value>
<Value name="3">
<Value>Context</Value>
</Value>
<Value name="4">
<Value>LastUsed</Value>
</Value>
<Value name="5">
<Value>Counter</Value>
</Value>
<Value name="6">
<Value>Quality</Value>
</Value>
</Data>
<Property name="%%CLASSNAME">
<Selectivity>99.9992%</Selectivity>
</Property>
<Property name="Concept">
<Selectivity>0.1717%</Selectivity>
</Property>
<Property name="Context">
<Selectivity>3.5711%</Selectivity>
</Property>
<Property name="Counter">
<Selectivity>20.0000%</Selectivity>
</Property>
<Property name="LastUsed">
<Selectivity>0.2509%</Selectivity>
</Property>
<Property name="Quality">
<Selectivity>20.0000%</Selectivity>
</Property>
<SQLMap name="CC">
<BlockCount>-64</BlockCount>
</SQLMap>
<SQLMap name="IDKEY">
<BlockCount>-120</BlockCount>
</SQLMap>
</Storage>
</Class>


<Class name="User.Subject">
<Description>
Предметы</Description>
<SqlTableName>SubjectNew</SqlTableName>
<Super>%Persistent,%Populate,%ZEN.DataModel.ObjectDataModel</Super>
<TimeChanged>63072,53062.809091</TimeChanged>
<TimeCreated>62857,38242.488297</TimeCreated>

<Property name="Subject">
<Description>
Название предмета</Description>
<Type>User.ConSubject</Type>
<Required>1</Required>
</Property>

<Property name="Department">
<Description>
Кафедра, на которой читается этот предмет</Description>
<Type>User.Department</Type>
<Required>1</Required>
</Property>

<Index name="SD">
<Properties>Subject,Department,TypeOfSt</Properties>
<Unique>1</Unique>
</Index>

<Property name="TypeOfSt">
<Description>
Контингент студентов, для которых этот предмет читается</Description>
<Type>StCategory</Type>
<Required>1</Required>
</Property>

<UDLText name="T">
<Content><![CDATA[/*------------------------MVC-------------------------*/
]]></Content>
</UDLText>

<Method name="%OnNewSource">
<Description>
Старые данные о студенте
Заполняется сразу перед обновлением (редактирования) профиля студента, самим студентом.
Load an instance of a new (unsaved) source object for this DataModel.</Description>
<FormalSpec>*pSC:%Status=$$$OK</FormalSpec>
<ReturnType>%RegisteredObject</ReturnType>
<Implementation><![CDATA[  Quit ##class(User.Subject).%New()
]]></Implementation>
</Method>

<Method name="%OnSaveSource">
<Description>
Save instance of associated source object.</Description>
<FormalSpec>pSource:User.Subject</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
  Set tSC=pSource.%Save()
  If $$$ISOK(tSC)
   { 
     Set ..%id=pSource.%Id()
   }
  Quit tSC
]]></Implementation>
</Method>

<Method name="%OnOpenSource">
<Description>
Load an instance of the source object for this DataModel.</Description>
<FormalSpec>pID:%String,pConcurrency:%Integer=-1,*pSC:%Status=$$$OK</FormalSpec>
<ReturnType>%RegisteredObject</ReturnType>
<Implementation><![CDATA[  Quit ##class(User.Subject).%OpenId(pID,pConcurrency,.pSC)
]]></Implementation>
</Method>

<Method name="%OnDeleteSource">
<Description>
Delete instance of associated source object.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pID:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[  Quit ##class(User.Subject).%DeleteId(pID)
]]></Implementation>
</Method>

<Method name="%OnLoadModel">
<Description>
Do the actual work of loading values from the source object.</Description>
<FormalSpec>pSource:User.Subject</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
  Set ..Subject = pSource.Subject
  Set ..Department = pSource.Department
  Set ..TypeOfSt.Spec=pSource.TypeOfSt.Spec
  Set ..TypeOfSt.TypeOfEducation=pSource.TypeOfSt.TypeOfEducation
  Set ..TypeOfSt.YearOfStudy=pSource.TypeOfSt.YearOfStudy
  Set ..TypeOfSt.Class=pSource.TypeOfSt.Class
  Quit $$$OK
]]></Implementation>
</Method>

<Method name="%OnStoreModel">
<Description>
Do the actual work of storing values into the source object.</Description>
<FormalSpec>pSource:User.Subject</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
  Set pSource.Subject = ..Subject
  Set pSource.Department = ..Department
  Set pSource.TypeOfSt.Spec=..TypeOfSt.Spec
  Set pSource.TypeOfSt.TypeOfEducation=..TypeOfSt.TypeOfEducation
  Set pSource.TypeOfSt.YearOfStudy=..TypeOfSt.YearOfStudy
  Set pSource.TypeOfSt.Class=..TypeOfSt.Class
  Quit $$$OK
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DataLocation>^User.SubjectD</DataLocation>
<DefaultData>SubjectDefaultData</DefaultData>
<IdLocation>^User.SubjectD</IdLocation>
<IndexLocation>^User.SubjectI</IndexLocation>
<StreamLocation>^User.SubjectS</StreamLocation>
<ExtentSize>10</ExtentSize>
<Data name="SubjectDefaultData">
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>Name</Value>
</Value>
<Value name="3">
<Value>Department</Value>
</Value>
<Value name="4">
<Value>TypeOfSt</Value>
</Value>
<Value name="5">
<Value>Subject</Value>
</Value>
</Data>
<Property name="%%CLASSNAME">
<Selectivity>100.0000%</Selectivity>
</Property>
<Property name="Department">
<Selectivity>50.0000%</Selectivity>
</Property>
<Property name="Name">
<Selectivity>25.0000%</Selectivity>
</Property>
<Property name="Subject">
<Selectivity>25.0000%</Selectivity>
</Property>
<Property name="TypeOfSt">
<Selectivity>11.1111%,Class:33.3333%,Spec:25.0000%,TypeOfEducation:33.3333%,YearOfStudy:50.0000%</Selectivity>
</Property>
<SQLMap name="IDKEY">
<BlockCount>-4</BlockCount>
</SQLMap>
</Storage>
</Class>


<Class name="User.Subject">
<Description>
Предметы</Description>
<SqlTableName>SubjectNew</SqlTableName>
<Super>%Persistent,%Populate,%ZEN.DataModel.ObjectDataModel</Super>
<TimeChanged>63072,53062.809091</TimeChanged>
<TimeCreated>62857,38242.488297</TimeCreated>

<Property name="Subject">
<Description>
Название предмета</Description>
<Type>User.ConSubject</Type>
<Required>1</Required>
</Property>

<Property name="Department">
<Description>
Кафедра, на которой читается этот предмет</Description>
<Type>User.Department</Type>
<Required>1</Required>
</Property>

<Index name="SD">
<Properties>Subject,Department,TypeOfSt</Properties>
<Unique>1</Unique>
</Index>

<Property name="TypeOfSt">
<Description>
Контингент студентов, для которых этот предмет читается</Description>
<Type>StCategory</Type>
<Required>1</Required>
</Property>

<UDLText name="T">
<Content><![CDATA[/*------------------------MVC-------------------------*/
]]></Content>
</UDLText>

<Method name="%OnNewSource">
<Description>
Старые данные о студенте
Заполняется сразу перед обновлением (редактирования) профиля студента, самим студентом.
Load an instance of a new (unsaved) source object for this DataModel.</Description>
<FormalSpec>*pSC:%Status=$$$OK</FormalSpec>
<ReturnType>%RegisteredObject</ReturnType>
<Implementation><![CDATA[  Quit ##class(User.Subject).%New()
]]></Implementation>
</Method>

<Method name="%OnSaveSource">
<Description>
Save instance of associated source object.</Description>
<FormalSpec>pSource:User.Subject</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
  Set tSC=pSource.%Save()
  If $$$ISOK(tSC)
   { 
     Set ..%id=pSource.%Id()
   }
  Quit tSC
]]></Implementation>
</Method>

<Method name="%OnOpenSource">
<Description>
Load an instance of the source object for this DataModel.</Description>
<FormalSpec>pID:%String,pConcurrency:%Integer=-1,*pSC:%Status=$$$OK</FormalSpec>
<ReturnType>%RegisteredObject</ReturnType>
<Implementation><![CDATA[  Quit ##class(User.Subject).%OpenId(pID,pConcurrency,.pSC)
]]></Implementation>
</Method>

<Method name="%OnDeleteSource">
<Description>
Delete instance of associated source object.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pID:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[  Quit ##class(User.Subject).%DeleteId(pID)
]]></Implementation>
</Method>

<Method name="%OnLoadModel">
<Description>
Do the actual work of loading values from the source object.</Description>
<FormalSpec>pSource:User.Subject</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
  Set ..Subject = pSource.Subject
  Set ..Department = pSource.Department
  Set ..TypeOfSt.Spec=pSource.TypeOfSt.Spec
  Set ..TypeOfSt.TypeOfEducation=pSource.TypeOfSt.TypeOfEducation
  Set ..TypeOfSt.YearOfStudy=pSource.TypeOfSt.YearOfStudy
  Set ..TypeOfSt.Class=pSource.TypeOfSt.Class
  Quit $$$OK
]]></Implementation>
</Method>

<Method name="%OnStoreModel">
<Description>
Do the actual work of storing values into the source object.</Description>
<FormalSpec>pSource:User.Subject</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
  Set pSource.Subject = ..Subject
  Set pSource.Department = ..Department
  Set pSource.TypeOfSt.Spec=..TypeOfSt.Spec
  Set pSource.TypeOfSt.TypeOfEducation=..TypeOfSt.TypeOfEducation
  Set pSource.TypeOfSt.YearOfStudy=..TypeOfSt.YearOfStudy
  Set pSource.TypeOfSt.Class=..TypeOfSt.Class
  Quit $$$OK
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DataLocation>^User.SubjectD</DataLocation>
<DefaultData>SubjectDefaultData</DefaultData>
<IdLocation>^User.SubjectD</IdLocation>
<IndexLocation>^User.SubjectI</IndexLocation>
<StreamLocation>^User.SubjectS</StreamLocation>
<ExtentSize>10</ExtentSize>
<Data name="SubjectDefaultData">
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>Name</Value>
</Value>
<Value name="3">
<Value>Department</Value>
</Value>
<Value name="4">
<Value>TypeOfSt</Value>
</Value>
<Value name="5">
<Value>Subject</Value>
</Value>
</Data>
<Property name="%%CLASSNAME">
<Selectivity>100.0000%</Selectivity>
</Property>
<Property name="Department">
<Selectivity>50.0000%</Selectivity>
</Property>
<Property name="Name">
<Selectivity>25.0000%</Selectivity>
</Property>
<Property name="Subject">
<Selectivity>25.0000%</Selectivity>
</Property>
<Property name="TypeOfSt">
<Selectivity>11.1111%,Class:33.3333%,Spec:25.0000%,TypeOfEducation:33.3333%,YearOfStudy:50.0000%</Selectivity>
</Property>
<SQLMap name="IDKEY">
<BlockCount>-4</BlockCount>
</SQLMap>
</Storage>
</Class>


<Class name="User.Teacher">
<Description>
Преподаватели университета</Description>
<SqlTableName>Teacher</SqlTableName>
<Super>User.Person</Super>
<TimeChanged>63072,44131.285898</TimeChanged>
<TimeCreated>62987,43934.37966</TimeCreated>

<Property name="TDepartment">
<Description>
Кафедра</Description>
<Type>ConDepartment</Type>
</Property>

<Property name="TSubjects">
<Description>
Список предметов, которые читает</Description>
<Type>ConSubject</Type>
<Collection>list</Collection>
</Property>

<Property name="Students">
<Description>
Список групп студентов, которым он преподаёт</Description>
<Type>User.StCategory</Type>
<Collection>list</Collection>
</Property>

<Property name="CurrentTheme">
<Description>
Тема, эталонную модель кторой разрабатвал во время последнего визита</Description>
<Type>User.Theme</Type>
</Property>

<Method name="ChangeCurrentTheme">
<FormalSpec>theme:User.Theme</FormalSpec>
<Implementation><![CDATA[
  s ..CurrentTheme=theme
  d ..%Save()
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DefaultData>TeacherDefaultData</DefaultData>
<ExtentSize>10</ExtentSize>
<Data name="TeacherDefaultData">
<Subscript>"Teacher"</Subscript>
<Value name="1">
<Value>TDepartment</Value>
</Value>
<Value name="2">
<Value>TSubjects</Value>
</Value>
<Value name="3">
<Value>Students</Value>
</Value>
<Value name="4">
<Value>CurrentTheme</Value>
</Value>
</Data>
<Property name="%%CLASSNAME">
<Selectivity>100.0000%</Selectivity>
</Property>
<Property name="LastVisit">
<Selectivity>100.0000%</Selectivity>
</Property>
<Property name="PEmail">
<Selectivity>10.0000%</Selectivity>
</Property>
<Property name="PFullName">
<Selectivity>10.0000%</Selectivity>
</Property>
<Property name="PName">
<Selectivity>10.0000%</Selectivity>
</Property>
<Property name="PPassword">
<Selectivity>10.0000%</Selectivity>
</Property>
<Property name="PSurname">
<Selectivity>10.0000%</Selectivity>
</Property>
<Property name="TDepartment">
<Selectivity>10.0000%</Selectivity>
</Property>
</Storage>
</Class>


<Class name="User.Teacher">
<Description>
Преподаватели университета</Description>
<SqlTableName>Teacher</SqlTableName>
<Super>User.Person</Super>
<TimeChanged>63072,44131.285898</TimeChanged>
<TimeCreated>62987,43934.37966</TimeCreated>

<Property name="TDepartment">
<Description>
Кафедра</Description>
<Type>ConDepartment</Type>
</Property>

<Property name="TSubjects">
<Description>
Список предметов, которые читает</Description>
<Type>ConSubject</Type>
<Collection>list</Collection>
</Property>

<Property name="Students">
<Description>
Список групп студентов, которым он преподаёт</Description>
<Type>User.StCategory</Type>
<Collection>list</Collection>
</Property>

<Property name="CurrentTheme">
<Description>
Тема, эталонную модель кторой разрабатвал во время последнего визита</Description>
<Type>User.Theme</Type>
</Property>

<Method name="ChangeCurrentTheme">
<FormalSpec>theme:User.Theme</FormalSpec>
<Implementation><![CDATA[
  s ..CurrentTheme=theme
  d ..%Save()
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DefaultData>TeacherDefaultData</DefaultData>
<ExtentSize>10</ExtentSize>
<Data name="TeacherDefaultData">
<Subscript>"Teacher"</Subscript>
<Value name="1">
<Value>TDepartment</Value>
</Value>
<Value name="2">
<Value>TSubjects</Value>
</Value>
<Value name="3">
<Value>Students</Value>
</Value>
<Value name="4">
<Value>CurrentTheme</Value>
</Value>
</Data>
<Property name="%%CLASSNAME">
<Selectivity>100.0000%</Selectivity>
</Property>
<Property name="LastVisit">
<Selectivity>100.0000%</Selectivity>
</Property>
<Property name="PEmail">
<Selectivity>10.0000%</Selectivity>
</Property>
<Property name="PFullName">
<Selectivity>10.0000%</Selectivity>
</Property>
<Property name="PName">
<Selectivity>10.0000%</Selectivity>
</Property>
<Property name="PPassword">
<Selectivity>10.0000%</Selectivity>
</Property>
<Property name="PSurname">
<Selectivity>10.0000%</Selectivity>
</Property>
<Property name="TDepartment">
<Selectivity>10.0000%</Selectivity>
</Property>
</Storage>
</Class>


<Class name="User.Tests.ByRef.TByRef">
<Super>%Persistent,%Populate,%XML.Adaptor,%ZEN.DataModel.Adaptor</Super>
<TimeChanged>63018,50418.817256</TimeChanged>
<TimeCreated>63018,43357.251964</TimeCreated>

<Method name="CreateDoctor">
<ClassMethod>1</ClassMethod>
<FormalSpec>myPatient:User.Tests.Relationship.Patient,newDoc:User.Tests.Relationship.Doctor</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	//s newDoc=..%New()
	s newDoc.DoctorsName="Doctor House4"
	w newDoc.SickPerson.Insert(myPatient)
	w newDoc.%Save()
	q $$$OK
]]></Implementation>
</Method>

<Method name="NewDoctor">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&newDoc:User.Tests.Relationship.Doctor]]></FormalSpec>
<Implementation><![CDATA[	w ..CreateDoctor(newDoc,##class(User.Tests.Relationship.Patient).%OpenId(1))
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DataLocation>^User.Tests.ByRef.TByRefD</DataLocation>
<DefaultData>TByRefDefaultData</DefaultData>
<IdLocation>^User.Tests.ByRef.TByRefD</IdLocation>
<IndexLocation>^User.Tests.ByRef.TByRefI</IndexLocation>
<StreamLocation>^User.Tests.ByRef.TByRefS</StreamLocation>
<ExtentSize>100000</ExtentSize>
<Data name="TByRefDefaultData">
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="User.Tests.Float.TFloat">
<Super>%Persistent</Super>
<TimeChanged>63021,63524.285736</TimeChanged>
<TimeCreated>63021,63523.875734</TimeCreated>

<Property name="MyFloat">
<Type>%Float</Type>
</Property>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DataLocation>^User.Tests.Float.TFloatD</DataLocation>
<DefaultData>TFloatDefaultData</DefaultData>
<IdLocation>^User.Tests.Float.TFloatD</IdLocation>
<IndexLocation>^User.Tests.Float.TFloatI</IndexLocation>
<StreamLocation>^User.Tests.Float.TFloatS</StreamLocation>
<ExtentSize>100000</ExtentSize>
<Data name="TFloatDefaultData">
<Structure>listnode</Structure>
<Subscript/>
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>MyFloat</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="User.Tests.Output.TOutput">
<SqlTableName>TO1</SqlTableName>
<Super>%Persistent,%Populate,%XML.Adaptor,%ZEN.DataModel.Adaptor</Super>
<TimeChanged>63018,39496.962921</TimeChanged>
<TimeCreated>63018,36741.542824</TimeCreated>

<Property name="POutput">
<Type>%String</Type>
<InitialExpression>"тест"</InitialExpression>
</Property>

<Method name="CreateObject">
<ClassMethod>1</ClassMethod>
<FormalSpec>*rs:%SQL.StatementResult,*rscount:%Integer</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
   s tSQL="select * from User_Tests_Output.TO1"
   s tResult = ##class(%SQL.Statement).%ExecDirect(,.tSQL)
   if tResult.%SQLCODE<0 q $$$ERROR($$$GeneralError,"Failure when executing a new SQL query")
   s rs=tResult
   //q rs
   while tResult.%Next()
   {
	   w tResult.ID
   }
   s rscount=tResult.%ROWCOUNT
      if rscount=0
        {
	     q rscount
	    }
      else
       {
	     q rs
	   }
   Quit $$$OK
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DataLocation>^User.Tests.Output.TOutputD</DataLocation>
<DefaultData>TOutputDefaultData</DefaultData>
<IdLocation>^User.Tests.Output.TOutputD</IdLocation>
<IndexLocation>^User.Tests.Output.TOutputI</IndexLocation>
<StreamLocation>^User.Tests.Output.TOutputS</StreamLocation>
<ExtentSize>10</ExtentSize>
<Data name="TOutputDefaultData">
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>POutput</Value>
</Value>
</Data>
<Property name="%%CLASSNAME">
<Selectivity>100.0000%</Selectivity>
</Property>
<Property name="POutput">
<Selectivity>100.0000%</Selectivity>
</Property>
<SQLMap name="IDKEY">
<BlockCount>-4</BlockCount>
</SQLMap>
</Storage>
</Class>




<Class name="User.Tests.Populate.Test">
<Super>%Persistent,%Populate</Super>
<TimeChanged>63014,47404.5741</TimeChanged>
<TimeCreated>63014,41681.33737</TimeCreated>

<Property name="Con">
<Type>User.CPConcept</Type>
</Property>

<Property name="Li">
<Type>User.CPSemantics</Type>
</Property>

<Property name="Rel">
<Type>User.CPRelationships</Type>
<Collection>list</Collection>
<Parameter name="POPORDER" value="0"/>
<Parameter name="POPSPEC" value=":0"/>
</Property>

<UDLText name="T">
<Content><![CDATA[
// Property x As %String;

]]></Content>
</UDLText>

<Method name="OnPopulate">
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    
    // Случайным образом выбираем понятие
    s con=5+$R(2000)
    s ..Con=##class(User.CPConcept).%OpenId(con)
    
    // Случайным образом выбираем тип связи
    s link=1+$R(5)
    s ..Li=##class(User.CPSemantics).%OpenId(link)
    
    if (link=1)||(link=2) //Часть-целое или Род-вид
    {
	   // Случайным образом выбираем понятие
	   s conS=5+$R(2000)
	   if conS'=con
	   {
		   d ..Rel.Insert(##class(User.CPConcept).%OpenId(conS))
	   }
	    
    }
    ElseIf link=3 // Объект-функция
    {
	   //Сколько элементов будет в этом списке?
	   s num=3+$R(3)
	   d ..Rel.Clear()
	   f i=1:1:num
	   {
	   // Случайным образом выбираем функцию
	   s conF=2005+$R(1000)

	   d ..Rel.Insert(##class(User.CPFunction).%OpenId(conF))
	   }
    }
    ElseIf link=4 // Объект-признак
    {
	   //Сколько элементов будет в этом списке?
	   s num=3+$R(3)
	   d ..Rel.Clear()
	   f i=1:1:num
	   {
	   // Случайным образом выбираем признак
	   s conFe=3005+$R(1000)
	   d ..Rel.Insert(##class(User.CPFeature).%OpenId(conFe))
	   }
    }
    else // Объект-состояние
    {
	    //Сколько элементов будет в этом списке?
	   s num=3+$R(3)
	   d ..Rel.Clear()
	   f i=1:1:num
	   {
	   // Случайным образом выбираем признак
	   s conC=4005+$R(1000)
	   d ..Rel.Insert(##class(User.CPCondition).%OpenId(conC))
	   }
    }
    
    QUIT $$$OK
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DataLocation>^User.Tests.Populate.TestD</DataLocation>
<DefaultData>TestDefaultData</DefaultData>
<IdLocation>^User.Tests.Populate.TestD</IdLocation>
<IndexLocation>^User.Tests.Populate.TestI</IndexLocation>
<StreamLocation>^User.Tests.Populate.TestS</StreamLocation>
<ExtentSize>100</ExtentSize>
<Data name="TestDefaultData">
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>Con</Value>
</Value>
<Value name="3">
<Value>Li</Value>
</Value>
<Value name="4">
<Value>Rel</Value>
</Value>
</Data>
<Property name="%%CLASSNAME">
<Selectivity>100.0000%</Selectivity>
</Property>
<Property name="Con">
<Selectivity>1.0101%</Selectivity>
</Property>
<Property name="Li">
<Selectivity>20.0000%</Selectivity>
</Property>
<Property name="Rel">
<Selectivity>1.0000%</Selectivity>
</Property>
<Property name="x">
<Selectivity>25.0000%</Selectivity>
</Property>
<SQLMap name="IDKEY">
<BlockCount>-4</BlockCount>
</SQLMap>
</Storage>
</Class>


<Class name="User.Tests.Relationship.ATM">
<Super>%Persistent,%Populate,%XML.Adaptor,%ZEN.DataModel.Adaptor</Super>
<TimeChanged>62992,61200.415084</TimeChanged>
<TimeCreated>62992,37209.038453</TimeCreated>

<Property name="SNNOfATM">
<Type>%Library.String</Type>
<Parameter name="POPSPEC" value="String(4)"/>
</Property>

<UDLText name="T">
<Content><![CDATA[
// ATM так просто не создать не указав его PARENT

]]></Content>
</UDLText>

<UDLText name="T">
<Content><![CDATA[
// Удаление филиала по его ID вида 2||3 - где 2-ссылка на филиал, 3 - это ID самого банкомата

]]></Content>
</UDLText>

<Property name="IBelongTo">
<Description>
a LineItem has a PARENT that is an Invoice|| Банкомат имеет родителя PARENT которым является отделение</Description>
<Type>User.Tests.Relationship.Branch</Type>
<Cardinality>parent</Cardinality>
<Inverse>CashPoints</Inverse>
<Relationship>1</Relationship>
</Property>

<UDLText name="T">
<Content><![CDATA[/*select * from User_Tests_Relationship.ATM*/
]]></Content>
</UDLText>

<UDLText name="T">
<Content><![CDATA[
/*
IBelongTo       ID      SNNOfATM        childsub
2       2||3    X881    3
3       3||5    Y825    5
3       3||10   Y171    10
4       4||1    H373    1
4       4||4    Q963    4
4       4||6    O707    6
5       5||8    K748    8
6       6||9    S333    9
9       9||2    V149    2
10      10||7   A305    7
*/
]]></Content>
</UDLText>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DataLocation>^User.Tests.Relationship.ATMD</DataLocation>
<DefaultData>ATMDefaultData</DefaultData>
<IdLocation>^User.Tests.Relationship.ATMD</IdLocation>
<IndexLocation>^User.Tests.Relationship.ATMI</IndexLocation>
<StreamLocation>^User.Tests.Relationship.ATMS</StreamLocation>
<ExtentSize>10</ExtentSize>
<Data name="ATMDefaultData">
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>SNNOfATM</Value>
</Value>
</Data>
<Property name="%%CLASSNAME">
<Selectivity>100.0000%</Selectivity>
</Property>
<Property name="IBelongTo">
<Selectivity>14.2857%</Selectivity>
</Property>
<Property name="SNNOfATM">
<Selectivity>10.0000%</Selectivity>
</Property>
<Property name="childsub">
<Selectivity>10.0000%</Selectivity>
</Property>
<SQLMap name="IDKEY">
<BlockCount>-4</BlockCount>
</SQLMap>
</Storage>
</Class>


<Class name="User.Tests.Relationship.Branch">
<Super>%Persistent,%Populate,%XML.Adaptor,%ZEN.DataModel.Adaptor</Super>
<TimeChanged>62992,61143.261031</TimeChanged>
<TimeCreated>62992,37161.058517</TimeCreated>

<Property name="BranchName">
<Type>%Library.String</Type>
<Parameter name="POPSPEC" value="Name()"/>
</Property>

<UDLText name="T">
<Content><![CDATA[
// Удаление филиала приводит к удалению всех банкоматов, связанных с ним (w ##class(User.Tests.Relationship.Branch).%DeleteId(1))

]]></Content>
</UDLText>

<UDLText name="T">
<Content><![CDATA[
// При создании филиала если мы хотим сразу внести ещё не существующие банкоматы,

]]></Content>
</UDLText>

<UDLText name="T">
<Content><![CDATA[
// мы используем d x.CashPoints.Insert(ATM3) где ATM OREF на ещё не существующий банкомат

]]></Content>
</UDLText>

<UDLText name="T">
<Content><![CDATA[
// после сохранения филиала также сохраняется и банкомат

]]></Content>
</UDLText>

<Property name="CashPoints">
<Description>
an Invoice has CHILDREN that are LineItems|| Отделение имеет CHILDREN которыми является ATMs (банкоматы)</Description>
<Type>User.Tests.Relationship.ATM</Type>
<Cardinality>children</Cardinality>
<Inverse>IBelongTo</Inverse>
<Relationship>1</Relationship>
</Property>

<UDLText name="T">
<Content><![CDATA[/*select * from User_Tests_Relationship.Branch*/
]]></Content>
</UDLText>

<UDLText name="T">
<Content><![CDATA[
/*
ID      BranchName
1       Tillem,Violet J.
2       Ingleman,Wilma T.
3       Uhles,Jose F.
4       North,Rhonda M.
5       Peterson,Ralph C.
6       Fives,Robert O.
7       Fripp,Neil G.
8       Adams,Al H.
9       Xiang,Josephine B.
10      Xander,Thelma U.
*/
]]></Content>
</UDLText>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DataLocation>^User.Tests.Relation1097.BranchD</DataLocation>
<DefaultData>BranchDefaultData</DefaultData>
<IdLocation>^User.Tests.Relation1097.BranchD</IdLocation>
<IndexLocation>^User.Tests.Relation1097.BranchI</IndexLocation>
<StreamLocation>^User.Tests.Relation1097.BranchS</StreamLocation>
<ExtentSize>10</ExtentSize>
<Data name="BranchDefaultData">
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>BranchName</Value>
</Value>
</Data>
<Property name="%%CLASSNAME">
<Selectivity>100.0000%</Selectivity>
</Property>
<Property name="BranchName">
<Selectivity>10.0000%</Selectivity>
</Property>
<Property name="CashPoints">
<Selectivity>14.2857%</Selectivity>
</Property>
<Property name="childsub">
<Selectivity>10.0000%</Selectivity>
</Property>
<SQLMap name="IDKEY">
<BlockCount>-4</BlockCount>
</SQLMap>
</Storage>
</Class>


<Class name="User.Tests.Relationship.Doctor">
<SqlTableName>Doctor</SqlTableName>
<Super>%Persistent,%Populate,%XML.Adaptor</Super>
<TimeChanged>63012,35594.043033</TimeChanged>
<TimeCreated>62991,47801.059053</TimeCreated>

<Property name="DoctorsName">
<Type>%Library.String</Type>
<Parameter name="POPSPEC" value="Name()"/>
</Property>

<UDLText name="T">
<Content><![CDATA[
// В свойствах которые прописаны many и children, будут храниться ссылки на несколько объектов, у которых прописано свойство one

]]></Content>
</UDLText>

<UDLText name="T">
<Content><![CDATA[
// SQL поле SickPerson отсутствует в итоговой таблице.

]]></Content>
</UDLText>

<UDLText name="T">
<Content><![CDATA[
// Попытка удаления доктора на которого имеется ссылка из классса Patient приводит к ошибке

]]></Content>
</UDLText>

<UDLText name="T">
<Content><![CDATA[
// При создании доктора если мы хотим сразу внести ещё не существующх пациентов,

]]></Content>
</UDLText>

<UDLText name="T">
<Content><![CDATA[
// мы используем d x.SickPerson.Insert(P) где P1, P2 ... OREFs на ещё не существующих в базе данных пациентов

]]></Content>
</UDLText>

<UDLText name="T">
<Content><![CDATA[
// после сохранения доктора также сохраняется и пациенты

]]></Content>
</UDLText>

<UDLText name="T">
<Content><![CDATA[
// Объектный доступ к пациентам из таблицы Doctor: w x.SickPerson.GetAt(1) - получим OREF на пациента первого в списке

]]></Content>
</UDLText>

<Property name="SickPerson">
<Description>
a Company has MANY Employees || Доктор имеет много пациентов</Description>
<Type>User.Tests.Relationship.Patient</Type>
<Cardinality>many</Cardinality>
<Inverse>MyDoctor</Inverse>
<Relationship>1</Relationship>
</Property>

<UDLText name="T">
<Content><![CDATA[
/*
ID      DoctorsName
1       Nichols,Kenny L.
2       Xander,Geoffrey D.
3       Fives,Mark P.
4       Ingrahm,Ed C.
5       Finn,Jeff L.
6       Ueckert,Andrew E.
7       Bachman,Elvira C.
8       Pascal,Filomena I.
9       Duquesnoy,Marvin C.
10      DeLillo,Bob N.
*/
]]></Content>
</UDLText>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DataLocation>^User.Tests.Relation1097.DoctorD</DataLocation>
<DefaultData>DoctorDefaultData</DefaultData>
<IdLocation>^User.Tests.Relation1097.DoctorD</IdLocation>
<IndexLocation>^User.Tests.Relation1097.DoctorI</IndexLocation>
<StreamLocation>^User.Tests.Relation1097.DoctorS</StreamLocation>
<ExtentSize>10</ExtentSize>
<Data name="DoctorDefaultData">
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>DoctorsName</Value>
</Value>
</Data>
<Property name="%%CLASSNAME">
<Selectivity>100.0000%</Selectivity>
</Property>
<Property name="DoctorsName">
<Selectivity>10.0000%</Selectivity>
</Property>
<SQLMap name="IDKEY">
<BlockCount>-4</BlockCount>
</SQLMap>
</Storage>
</Class>


<Class name="User.Tests.Relationship.Doctor1">
<Super>%Persistent,%Populate</Super>
<TimeChanged>62993,56750.177314</TimeChanged>
<TimeCreated>62993,36579.764878</TimeCreated>

<Property name="DName">
<Type>%String</Type>
<Parameter name="POPSPEC" value="Name()"/>
</Property>

<Property name="SickPersons">
<Type>User.Tests.Relationship.Patient1</Type>
<Cardinality>many</Cardinality>
<Inverse>MyDoctor</Inverse>
<Relationship>1</Relationship>
</Property>

<UDLText name="T">
<Content><![CDATA[/*select * from User_Tests_Relationship.Doctor1*/
]]></Content>
</UDLText>

<UDLText name="T">
<Content><![CDATA[
/*
ID      DName
1       Pape,Nellie G.
2       Huff,Juanita P.
3       Pape,Jane I.
4       Chadbourne,Filomena A.
5       Sands,Barb W.
6       Klein,Kevin C.
7       Zevon,Mario T.
8       Ubertini,Rhonda Z.
9       Quixote,Hannah C.
10      Van De Griek,Rhonda H.
*/
]]></Content>
</UDLText>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DataLocation>^User.Tests.Relatio1097.Doctor1D</DataLocation>
<DefaultData>Doctor1DefaultData</DefaultData>
<IdLocation>^User.Tests.Relatio1097.Doctor1D</IdLocation>
<IndexLocation>^User.Tests.Relatio1097.Doctor1I</IndexLocation>
<StreamLocation>^User.Tests.Relatio1097.Doctor1S</StreamLocation>
<ExtentSize>10</ExtentSize>
<Data name="Doctor1DefaultData">
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>DName</Value>
</Value>
</Data>
<Property name="%%CLASSNAME">
<Selectivity>100.0000%</Selectivity>
</Property>
<Property name="DName">
<Selectivity>10.0000%</Selectivity>
</Property>
<SQLMap name="IDKEY">
<BlockCount>-4</BlockCount>
</SQLMap>
</Storage>
</Class>


<Class name="User.Tests.Relationship.Patient">
<SqlTableName>Patient</SqlTableName>
<Super>%Persistent,%Populate,%XML.Adaptor</Super>
<TimeChanged>62993,37049.550394</TimeChanged>
<TimeCreated>62991,47736.069306</TimeCreated>

<UDLText name="T">
<Content><![CDATA[
// Сгенерировать Populate для пациентов при пустой таблице Doctor - не получается (MyDoctor=Required, иначе получилось бы), сперва генерируем докторов!

]]></Content>
</UDLText>

<Property name="Patientsname">
<Type>%Library.String</Type>
<Parameter name="POPSPEC" value="Name()"/>
</Property>

<UDLText name="T">
<Content><![CDATA[
// Объектный доступ к врачу данного пациента - w P1.MyDoctor.DoctorsName, где P1 - OREF на одного из пациентов

]]></Content>
</UDLText>

<UDLText name="T">
<Content><![CDATA[
// Попытка сохранения нового пациента  без указания его лечащего врача привод к неудаче! (MyDoctor - required)

]]></Content>
</UDLText>

<UDLText name="T">
<Content><![CDATA[
// Без указания врача сохраняются все пациенты если (MyDoctor - без required)

]]></Content>
</UDLText>

<Property name="MyDoctor">
<Description>
An Employee has ONE Company || Пациент лечится у одного врача (УПРОЩЕНИЕ, на самом деле пациент может лечиться у многих врачей в разных больницах лечить разные болезни)</Description>
<Type>User.Tests.Relationship.Doctor</Type>
<Cardinality>one</Cardinality>
<Inverse>SickPerson</Inverse>
<Relationship>1</Relationship>
</Property>

<UDLText name="T">
<Content><![CDATA[/*select * from User_Tests_Relationship.Patient*/
]]></Content>
</UDLText>

<UDLText name="T">
<Content><![CDATA[
/*
ID      MyDoctor        Patientsname
1       7       Quine,Elvira L.
2       8       Van De Griek,John H.
3       10      Burroughs,Chelsea O.
4       10      Xavier,Phyllis A.
5       6       Novello,Diane G.
6       4       McCormick,Robert B.
7       5       Faust,Mario O.
8       4       Hanson,Jules A.
9       8       Taylor,Kenny U.
10      5       Duquesnoy,Kim N.
*/
]]></Content>
</UDLText>

<UDLText name="T">
<Content><![CDATA[/*select Patientsname,MyDoctor->DoctorsName from User_Tests_Relationship.Patient where MyDoctor->DoctorsName='DeLillo,Bob N.'*/
]]></Content>
</UDLText>

<UDLText name="T">
<Content><![CDATA[
/*
Patientsname    DoctorsName
Burroughs,Chelsea O.    DeLillo,Bob N.
Xavier,Phyllis A.       DeLillo,Bob N.
*/
]]></Content>
</UDLText>

<UDLText name="T">
<Content><![CDATA[
// Index MyDoctorIndex On MyDoctor;

]]></Content>
</UDLText>

<UDLText name="T">
<Content><![CDATA[
// Тут логичнее сделать ссылку на класс пациентов (людей) Property Patientsname As User.Patient

]]></Content>
</UDLText>

<UDLText name="T">
<Content><![CDATA[
// One-many - независимая связь, т.е. при попытке удаления главного объекта при существующих дочерних, выводится ошибка

]]></Content>
</UDLText>

<UDLText name="T">
<Content><![CDATA[
// Здесь по факту: у одного пациента много врачей типа Property MyDoctors as list of User.Doctors

]]></Content>
</UDLText>

<UDLText name="T">
<Content><![CDATA[
// Пациентов удаляем всех без проблем! Даже ссылающихся на определённого врача, с доктором ничего не случается - он остаётся

]]></Content>
</UDLText>

<UDLText name="T">
<Content><![CDATA[/*select * from User_Tests_Relationship.Patient where MyDoctor=8*/
]]></Content>
</UDLText>

<UDLText name="T">
<Content><![CDATA[
/*
ID      MyDoctor        Patientsname
4       8       Xerxes,Debby H.
5       8       Johnson,Roger D.
7       8       Browne,Barb W.
*/
]]></Content>
</UDLText>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DataLocation>^User.Tests.Relatio1097.PatientD</DataLocation>
<DefaultData>PatientDefaultData</DefaultData>
<IdLocation>^User.Tests.Relatio1097.PatientD</IdLocation>
<IndexLocation>^User.Tests.Relatio1097.PatientI</IndexLocation>
<StreamLocation>^User.Tests.Relatio1097.PatientS</StreamLocation>
<ExtentSize>10</ExtentSize>
<Data name="PatientDefaultData">
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>Patientsname</Value>
</Value>
<Value name="3">
<Value>MyDoctor</Value>
</Value>
</Data>
<Property name="%%CLASSNAME">
<Selectivity>100.0000%</Selectivity>
</Property>
<Property name="MyDoctor">
<Selectivity>14.2857%</Selectivity>
</Property>
<Property name="Name">
<Selectivity>16.6667%</Selectivity>
</Property>
<Property name="Patientsname">
<Selectivity>10.0000%</Selectivity>
</Property>
<SQLMap name="IDKEY">
<BlockCount>-4</BlockCount>
</SQLMap>
<SQLMap name="MyDoctorIndex">
<BlockCount>-4</BlockCount>
</SQLMap>
<SQLMap name="NameIndex">
<BlockCount>-4</BlockCount>
</SQLMap>
</Storage>
</Class>


<Class name="User.Tests.Relationship.Patient1">
<Super>%Persistent,%Populate</Super>
<TimeChanged>62993,56750.469949</TimeChanged>
<TimeCreated>62993,36616.188613</TimeCreated>

<Property name="PName">
<Type>%String</Type>
<Parameter name="POPSPEC" value="Name()"/>
</Property>

<Property name="MyDoctor">
<Type>User.Tests.Relationship.Doctor1</Type>
<Cardinality>one</Cardinality>
<Inverse>SickPersons</Inverse>
<Relationship>1</Relationship>
</Property>

<Index name="MyDoctorIndex">
<Properties>MyDoctor</Properties>
</Index>

<UDLText name="T">
<Content><![CDATA[
/*
План запроса для select * from User_Tests_Relationship.Patient where MyDoctor=10 даёт Отосительная стоимость = 1040
План запроса для select * from User_Tests_Relationship.Patient1 where MyDoctor=10 даёт Отосительная стоимость = 608.55
Вывод: индекс на таблицу множества пациентов даёт выигрыш в скорости!
*/
]]></Content>
</UDLText>

<UDLText name="T">
<Content><![CDATA[
// Структура индексов

]]></Content>
</UDLText>

<UDLText name="T">
<Content><![CDATA[
/*
1: 	^User.Tests.Relati1097.Patient1I("MyDoctorIndex",1,1)	=	""
2: 	^User.Tests.Relati1097.Patient1I("MyDoctorIndex",2,4)	=	""
3: 	^User.Tests.Relati1097.Patient1I("MyDoctorIndex",2,10)	=	""
4: 	^User.Tests.Relati1097.Patient1I("MyDoctorIndex",3,2)	=	""
5: 	^User.Tests.Relati1097.Patient1I("MyDoctorIndex",3,5)	=	""
6: 	^User.Tests.Relati1097.Patient1I("MyDoctorIndex",4,7)	=	""
7: 	^User.Tests.Relati1097.Patient1I("MyDoctorIndex",7,3)	=	""
8: 	^User.Tests.Relati1097.Patient1I("MyDoctorIndex",9,8)	=	""
9: 	^User.Tests.Relati1097.Patient1I("MyDoctorIndex",10,6)	=	""
10: ^User.Tests.Relati1097.Patient1I("MyDoctorIndex",10,9)	=	""
*/
]]></Content>
</UDLText>

<UDLText name="T">
<Content><![CDATA[/*select * from User_Tests_Relationship.Patient1*/
]]></Content>
</UDLText>

<UDLText name="T">
<Content><![CDATA[
/*
ID      MyDoctor        PName
1       1       Kratzmann,George Z.
2       3       Emerson,James X.
3       7       Yoders,Natasha O.
4       2       Winters,Frances M.
5       3       Fives,Pat K.
6       10      Orlin,Lisa K.
7       4       Kelvin,Brendan T.
8       9       Underman,Vincent U.
9       10      Waal,Zeke Y.
10      2       Harrison,Zelda D.
*/
]]></Content>
</UDLText>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DataLocation>^User.Tests.Relati1097.Patient1D</DataLocation>
<DefaultData>Patient1DefaultData</DefaultData>
<IdLocation>^User.Tests.Relati1097.Patient1D</IdLocation>
<IndexLocation>^User.Tests.Relati1097.Patient1I</IndexLocation>
<StreamLocation>^User.Tests.Relati1097.Patient1S</StreamLocation>
<ExtentSize>10</ExtentSize>
<Data name="Patient1DefaultData">
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>PName</Value>
</Value>
<Value name="3">
<Value>MyDoctor</Value>
</Value>
</Data>
<Property name="%%CLASSNAME">
<Selectivity>100.0000%</Selectivity>
</Property>
<Property name="MyDoctor">
<Selectivity>14.2857%</Selectivity>
</Property>
<Property name="PName">
<Selectivity>10.0000%</Selectivity>
</Property>
<SQLMap name="IDKEY">
<BlockCount>-4</BlockCount>
</SQLMap>
<SQLMap name="MyDoctorIndex">
<BlockCount>-4</BlockCount>
</SQLMap>
</Storage>
</Class>


<Class name="User.Tests.Transaction.TTest">
<Super>%Persistent,%Populate,%XML.Adaptor,%ZEN.DataModel.Adaptor</Super>
<TimeChanged>63018,50424.359449</TimeChanged>
<TimeCreated>63018,36669.380629</TimeCreated>

<Property name="TranTest">
<Type>%String</Type>
<Required>1</Required>
</Property>

<Method name="TTest">
<ClassMethod>1</ClassMethod>
<FormalSpec>*err:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	TSTART
	s ^x="Start"
	s x=##class(User.Tests.Transaction.TTest).%New()
	s rs=x.%Save()
	  if $$$ISERR(rs) 
	  { 
	  TROLLBACK
	   s err="Can't save!"
	   q err}
	TCOMMIT
	q $$$OK
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DataLocation>^User.Tests.Transaction.TTestD</DataLocation>
<DefaultData>TTestDefaultData</DefaultData>
<IdLocation>^User.Tests.Transaction.TTestD</IdLocation>
<IndexLocation>^User.Tests.Transaction.TTestI</IndexLocation>
<StreamLocation>^User.Tests.Transaction.TTestS</StreamLocation>
<ExtentSize>100000</ExtentSize>
<Data name="TTestDefaultData">
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>TranTest</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="User.Theme">
<SqlTableName>ThemeNew</SqlTableName>
<Super>%Persistent,%Populate,%ZEN.DataModel.ObjectDataModel</Super>
<TimeChanged>63081,51087.818996</TimeChanged>
<TimeCreated>62857,40448.400007</TimeCreated>

<Property name="Name">
<Description>
Название темы учебной дисциплины</Description>
<Type>%String</Type>
<Required>1</Required>
<Parameter name="MAXLEN" value="500"/>
<Parameter name="POPSPEC" value="ValueList(&quot;,Основы учения о клетке,Ядро клетки,Основы эмбриологии,Гаструляция,Принципы организации тканей,Соединительные ткани,Кровь,Гемограмма,Хрящивые ткани,Костные ткани,Мышечные ткани,Нервная ткань,Цитоплазма,Железы,Клеточное деление,Провизорные органы &quot;)"/>
</Property>

<Property name="Subject">
<Description>
Предмет, к которому эта тема относится</Description>
<Type>User.Subject</Type>
<Required>1</Required>
</Property>

<Property name="Author">
<Description>
Автор (преподаватель-разработчик) эталонной модели данной темы</Description>
<Type>Teacher</Type>
<Required>1</Required>
</Property>

<Property name="QuantitityOf">
<Description>
Количество задач которые будут сгенерированы для студентов на основе RM даной темы
По умолчанию для данного контингента студентов доступны все Case Studies из данного контекста (значок *)</Description>
<Type>%String</Type>
<InitialExpression>"*"</InitialExpression>
<Required>1</Required>
</Property>

<Property name="IfDone">
<Description>
Готова тогда когда все КП созданы и сгенерированы задачи на их основе. Готова к копированию в учебные планы?</Description>
<Type>%Boolean</Type>
<InitialExpression>0</InitialExpression>
<Required>1</Required>
</Property>

<Property name="IfAvailable">
<Description>
Признак доступности: уже была скопрована/извлечена в/из учебные/х планы/ов?</Description>
<Type>%Boolean</Type>
<InitialExpression>0</InitialExpression>
<Required>1</Required>
</Property>

<Property name="CPItems">
<Description>
Когнитивный прототип, который входит в эту тему
Следует помнить SQL-поля CPItems не существует! Только объектный доступ! SQL-доступ из CP!</Description>
<Type>User.CP</Type>
<Cardinality>many</Cardinality>
<Inverse>RM</Inverse>
<Relationship>1</Relationship>
</Property>

<Method name="GetSetOfConts">
<Description>
Получает набор тем доступных для данной категории студентов, на основе которого будет создан учебный план для вновь зарегенного студента
Аргументом является категория текущего студента в форме {Специальность (ТПКС), Форма обучения (Дневное), курс (1 курс), Группа (10)}
По группе пока не фильтруем, при необходимости - снять закомменированную строку.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>TypeOfSt:User.StCategory</FormalSpec>
<ReturnType>%SQL.StatementResult</ReturnType>
<Implementation><![CDATA[
  //#import User
  s StsSpec=TypeOfSt.Spec
  s StsType=TypeOfSt.TypeOfEducation
  s StsYear=TypeOfSt.YearOfStudy
  s tStatement = ##class(%SQL.Statement).%New()
  s tStatement.%ObjectSelectMode = 1
  s tSQL=4
  s tSQL(1)="select ID,Subject->TypeOfSt from ThemeNew"
  s tSQL(2)="where ? %INLIST GetList1(Subject->TypeOfSt_Spec,'Spec')"
  s tSQL(3)="and ? %INLIST GetList1(Subject->TypeOfSt_TypeOfEducation,'Type')"
  s tSQL(4)="and Subject->TypeOfSt_YearOfStudy=? and IfAvailable=1"
  //s tSQL(5)="and SQLUser.GetList1(Subject->TypeOfSt_Class,'Class')"
  s dynd=3,dynd(1)=StsSpec,dynd(2)=StsType,dynd(3)=StsYear
  s tStatus = tStatement.%Prepare(.tSQL)
  s tResult = tStatement.%Execute(dynd...)
  /*d tResult.%Display()
  s tResult = tStatement.%Execute(dynd...)*/
  q tResult
]]></Implementation>
</Method>

<Method name="GetList1">
<Description>
Возвращает список из строки (Для метода поиска контекстов по категориям студентов) GetSetOfConts()</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>myString:%String,Arg:%String</FormalSpec>
<ReturnType>%List</ReturnType>
<SqlName>GetList1</SqlName>
<SqlProc>1</SqlProc>
<Implementation><![CDATA[
  if myString="*" {q ##class(User.StCategory).GetFullList(Arg)}
  Quit $LFS(myString,";")
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[/*------------------------MVC-------------------------*/
]]></Content>
</UDLText>

<Method name="%OnNewSource">
<Description>
Load an instance of a new (unsaved) source object for this DataModel.</Description>
<FormalSpec>*pSC:%Status=$$$OK</FormalSpec>
<ReturnType>%RegisteredObject</ReturnType>
<Implementation><![CDATA[  Quit ##class(User.Theme).%New()
]]></Implementation>
</Method>

<Method name="%OnSaveSource">
<Description>
Save instance of associated source object.</Description>
<FormalSpec>pSource:User.Theme</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
  Set tSC=pSource.%Save()
  If $$$ISOK(tSC)
   { 
     Set ..%id=pSource.%Id()
     // Стартуем сессию по вновь созданной теме
     s %session.Data("Context")=..%id
   }
  Quit tSC
]]></Implementation>
</Method>

<Method name="%OnOpenSource">
<Description>
Load an instance of the source object for this DataModel.</Description>
<FormalSpec>pID:%String,pConcurrency:%Integer=-1,*pSC:%Status=$$$OK</FormalSpec>
<ReturnType>%RegisteredObject</ReturnType>
<Implementation><![CDATA[  Quit ##class(User.Theme).%OpenId(pID,pConcurrency,.pSC)
]]></Implementation>
</Method>

<Method name="%OnDeleteSource">
<Description>
Delete instance of associated source object.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pID:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[  Quit ##class(User.Theme).%DeleteId(pID)
]]></Implementation>
</Method>

<Method name="%OnLoadModel">
<Description>
Do the actual work of loading values from the source object.</Description>
<FormalSpec>pSource:User.Theme</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
  Set ..Name =pSource.Name
  if %page.Theme'="" {Set ..Subject =pSource.Subject} else {Set ..Subject=##class(User.Subject).%OpenId(%page.Subject)}
  Set ..IfAvailable=pSource.IfAvailable
  Set ..QuantitityOf=pSource.QuantitityOf
  Quit $$$OK
]]></Implementation>
</Method>

<Method name="%OnStoreModel">
<Description>
Do the actual work of storing values into the source object.</Description>
<FormalSpec>pSource:User.Theme</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
  Set pSource.Name = ..Name
  Set pSource.Subject = ..Subject
  Set pSource.Author=##class(User.Teacher).%OpenId($Get(%session.Data("Teacher")))
  Set pSource.QuantitityOf=..QuantitityOf
  Quit $$$OK
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DataLocation>^User.ThemeD</DataLocation>
<DefaultData>ThemeDefaultData</DefaultData>
<IdLocation>^User.ThemeD</IdLocation>
<IndexLocation>^User.ThemeI</IndexLocation>
<StreamLocation>^User.ThemeS</StreamLocation>
<ExtentSize>28</ExtentSize>
<Data name="ThemeDefaultData">
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>Name</Value>
</Value>
<Value name="3">
<Value>Context</Value>
</Value>
<Value name="4">
<Value>Subject</Value>
</Value>
<Value name="5">
<Value>Author</Value>
</Value>
<Value name="6">
<Value>QuantitityOf</Value>
</Value>
<Value name="7">
<Value>IsEmpty</Value>
</Value>
<Value name="8">
<Value>IfAvailable</Value>
</Value>
<Value name="9">
<Value>IfDone</Value>
</Value>
</Data>
<Property name="%%CLASSNAME">
<Selectivity>100.0000%</Selectivity>
</Property>
<Property name="Author">
<Selectivity>11.1111%</Selectivity>
</Property>
<Property name="IfAvailable">
<Selectivity>100.0000%</Selectivity>
</Property>
<Property name="IfDone">
<Selectivity>100.0000%</Selectivity>
</Property>
<Property name="Name">
<Selectivity>8.3333%</Selectivity>
</Property>
<Property name="QuantitityOf">
<Selectivity>100.0000%</Selectivity>
</Property>
<Property name="Subject">
<Selectivity>50.0000%</Selectivity>
</Property>
<SQLMap name="IDKEY">
<BlockCount>-4</BlockCount>
</SQLMap>
</Storage>
</Class>


<Class name="User.Theme">
<SqlTableName>ThemeNew</SqlTableName>
<Super>%Persistent,%Populate,%ZEN.DataModel.ObjectDataModel</Super>
<TimeChanged>63081,51087.818996</TimeChanged>
<TimeCreated>62857,40448.400007</TimeCreated>

<Property name="Name">
<Description>
Название темы учебной дисциплины</Description>
<Type>%String</Type>
<Required>1</Required>
<Parameter name="MAXLEN" value="500"/>
<Parameter name="POPSPEC" value="ValueList(&quot;,Основы учения о клетке,Ядро клетки,Основы эмбриологии,Гаструляция,Принципы организации тканей,Соединительные ткани,Кровь,Гемограмма,Хрящивые ткани,Костные ткани,Мышечные ткани,Нервная ткань,Цитоплазма,Железы,Клеточное деление,Провизорные органы &quot;)"/>
</Property>

<Property name="Subject">
<Description>
Предмет, к которому эта тема относится</Description>
<Type>User.Subject</Type>
<Required>1</Required>
</Property>

<Property name="Author">
<Description>
Автор (преподаватель-разработчик) эталонной модели данной темы</Description>
<Type>Teacher</Type>
<Required>1</Required>
</Property>

<Property name="QuantitityOf">
<Description>
Количество задач которые будут сгенерированы для студентов на основе RM даной темы
По умолчанию для данного контингента студентов доступны все Case Studies из данного контекста (значок *)</Description>
<Type>%String</Type>
<InitialExpression>"*"</InitialExpression>
<Required>1</Required>
</Property>

<Property name="IfDone">
<Description>
Готова тогда когда все КП созданы и сгенерированы задачи на их основе. Готова к копированию в учебные планы?</Description>
<Type>%Boolean</Type>
<InitialExpression>0</InitialExpression>
<Required>1</Required>
</Property>

<Property name="IfAvailable">
<Description>
Признак доступности: уже была скопрована/извлечена в/из учебные/х планы/ов?</Description>
<Type>%Boolean</Type>
<InitialExpression>0</InitialExpression>
<Required>1</Required>
</Property>

<Property name="CPItems">
<Description>
Когнитивный прототип, который входит в эту тему
Следует помнить SQL-поля CPItems не существует! Только объектный доступ! SQL-доступ из CP!</Description>
<Type>User.CP</Type>
<Cardinality>many</Cardinality>
<Inverse>RM</Inverse>
<Relationship>1</Relationship>
</Property>

<Method name="GetSetOfConts">
<Description>
Получает набор тем доступных для данной категории студентов, на основе которого будет создан учебный план для вновь зарегенного студента
Аргументом является категория текущего студента в форме {Специальность (ТПКС), Форма обучения (Дневное), курс (1 курс), Группа (10)}
По группе пока не фильтруем, при необходимости - снять закомменированную строку.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>TypeOfSt:User.StCategory</FormalSpec>
<ReturnType>%SQL.StatementResult</ReturnType>
<Implementation><![CDATA[
  //#import User
  s StsSpec=TypeOfSt.Spec
  s StsType=TypeOfSt.TypeOfEducation
  s StsYear=TypeOfSt.YearOfStudy
  s tStatement = ##class(%SQL.Statement).%New()
  s tStatement.%ObjectSelectMode = 1
  s tSQL=4
  s tSQL(1)="select ID,Subject->TypeOfSt from ThemeNew"
  s tSQL(2)="where ? %INLIST GetList1(Subject->TypeOfSt_Spec,'Spec')"
  s tSQL(3)="and ? %INLIST GetList1(Subject->TypeOfSt_TypeOfEducation,'Type')"
  s tSQL(4)="and Subject->TypeOfSt_YearOfStudy=? and IfAvailable=1"
  //s tSQL(5)="and SQLUser.GetList1(Subject->TypeOfSt_Class,'Class')"
  s dynd=3,dynd(1)=StsSpec,dynd(2)=StsType,dynd(3)=StsYear
  s tStatus = tStatement.%Prepare(.tSQL)
  s tResult = tStatement.%Execute(dynd...)
  /*d tResult.%Display()
  s tResult = tStatement.%Execute(dynd...)*/
  q tResult
]]></Implementation>
</Method>

<Method name="GetList1">
<Description>
Возвращает список из строки (Для метода поиска контекстов по категориям студентов) GetSetOfConts()</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>myString:%String,Arg:%String</FormalSpec>
<ReturnType>%List</ReturnType>
<SqlName>GetList1</SqlName>
<SqlProc>1</SqlProc>
<Implementation><![CDATA[
  if myString="*" {q ##class(User.StCategory).GetFullList(Arg)}
  Quit $LFS(myString,";")
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[/*------------------------MVC-------------------------*/
]]></Content>
</UDLText>

<Method name="%OnNewSource">
<Description>
Load an instance of a new (unsaved) source object for this DataModel.</Description>
<FormalSpec>*pSC:%Status=$$$OK</FormalSpec>
<ReturnType>%RegisteredObject</ReturnType>
<Implementation><![CDATA[  Quit ##class(User.Theme).%New()
]]></Implementation>
</Method>

<Method name="%OnSaveSource">
<Description>
Save instance of associated source object.</Description>
<FormalSpec>pSource:User.Theme</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
  Set tSC=pSource.%Save()
  If $$$ISOK(tSC)
   { 
     Set ..%id=pSource.%Id()
     // Стартуем сессию по вновь созданной теме
     s %session.Data("Context")=..%id
   }
  Quit tSC
]]></Implementation>
</Method>

<Method name="%OnOpenSource">
<Description>
Load an instance of the source object for this DataModel.</Description>
<FormalSpec>pID:%String,pConcurrency:%Integer=-1,*pSC:%Status=$$$OK</FormalSpec>
<ReturnType>%RegisteredObject</ReturnType>
<Implementation><![CDATA[  Quit ##class(User.Theme).%OpenId(pID,pConcurrency,.pSC)
]]></Implementation>
</Method>

<Method name="%OnDeleteSource">
<Description>
Delete instance of associated source object.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pID:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[  Quit ##class(User.Theme).%DeleteId(pID)
]]></Implementation>
</Method>

<Method name="%OnLoadModel">
<Description>
Do the actual work of loading values from the source object.</Description>
<FormalSpec>pSource:User.Theme</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
  Set ..Name =pSource.Name
  if %page.Theme'="" {Set ..Subject =pSource.Subject} else {Set ..Subject=##class(User.Subject).%OpenId(%page.Subject)}
  Set ..IfAvailable=pSource.IfAvailable
  Set ..QuantitityOf=pSource.QuantitityOf
  Quit $$$OK
]]></Implementation>
</Method>

<Method name="%OnStoreModel">
<Description>
Do the actual work of storing values into the source object.</Description>
<FormalSpec>pSource:User.Theme</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
  Set pSource.Name = ..Name
  Set pSource.Subject = ..Subject
  Set pSource.Author=##class(User.Teacher).%OpenId($Get(%session.Data("Teacher")))
  Set pSource.QuantitityOf=..QuantitityOf
  Quit $$$OK
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DataLocation>^User.ThemeD</DataLocation>
<DefaultData>ThemeDefaultData</DefaultData>
<IdLocation>^User.ThemeD</IdLocation>
<IndexLocation>^User.ThemeI</IndexLocation>
<StreamLocation>^User.ThemeS</StreamLocation>
<ExtentSize>28</ExtentSize>
<Data name="ThemeDefaultData">
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>Name</Value>
</Value>
<Value name="3">
<Value>Context</Value>
</Value>
<Value name="4">
<Value>Subject</Value>
</Value>
<Value name="5">
<Value>Author</Value>
</Value>
<Value name="6">
<Value>QuantitityOf</Value>
</Value>
<Value name="7">
<Value>IsEmpty</Value>
</Value>
<Value name="8">
<Value>IfAvailable</Value>
</Value>
<Value name="9">
<Value>IfDone</Value>
</Value>
</Data>
<Property name="%%CLASSNAME">
<Selectivity>100.0000%</Selectivity>
</Property>
<Property name="Author">
<Selectivity>11.1111%</Selectivity>
</Property>
<Property name="IfAvailable">
<Selectivity>100.0000%</Selectivity>
</Property>
<Property name="IfDone">
<Selectivity>100.0000%</Selectivity>
</Property>
<Property name="Name">
<Selectivity>8.3333%</Selectivity>
</Property>
<Property name="QuantitityOf">
<Selectivity>100.0000%</Selectivity>
</Property>
<Property name="Subject">
<Selectivity>50.0000%</Selectivity>
</Property>
<SQLMap name="IDKEY">
<BlockCount>-4</BlockCount>
</SQLMap>
</Storage>
</Class>


<Class name="Web.Components.Basic">
<Description>
базовый класс компонента (проба)</Description>
<Super>%ZEN.Component.composite</Super>
<TimeChanged>63043,49166.745111</TimeChanged>
<TimeCreated>63040,35140.522734</TimeCreated>

<Parameter name="NAMESPACE">
<Description>
This is the XML namespace for this component.</Description>
<Default>http://www.intersystems.com/Web.Components</Default>
</Parameter>

<Parameter name="BLUESTYLE">
<Description>
Фон для задач 1-го типа</Description>
<Default>rgb(240, 248, 255)</Default>
</Parameter>

<Parameter name="REDDISHSTYLE">
<Description>
Фон для задач 2-го типа</Description>
<Default>rgb(250, 240, 230)</Default>
</Parameter>

<Parameter name="GREENYSTYLE">
<Description>
Фон для задач 3-го типа</Description>
<Default>rgb(240, 255, 240)</Default>
</Parameter>

<Parameter name="TYPE1WORDING">
<Default>Type in the missing concept name that matches the semantic relation and the set of related elements given.</Default>
</Parameter>

<Parameter name="TYPE2WORDING">
<Default>Select the correct type of semantic relation that matches the concept and the set of related elements given</Default>
</Parameter>

<Parameter name="TYPE3WORDING">
<Default>Type in the missing element of cognitive subgroup that makes the entire cognitive structure correct.</Default>
</Parameter>

<Property name="onChangeCustom">
<Type>%ZEN.Datatype.eventHandler</Type>
</Property>

<Property name="Num">
<Description>
Номер по счёту</Description>
<Type>%ZEN.Datatype.integer</Type>
</Property>

<Property name="CSId">
<Description>
ID задачи CS (не CP) лежащей в БД</Description>
<Type>%ZEN.Datatype.integer</Type>
<Required>1</Required>
</Property>

<Property name="Info">
<Description>
ID объекта класса IW с информацией о решении задачи (ответ студента, проверена ли пр.)</Description>
<Type>%ZEN.Datatype.integer</Type>
<Required>1</Required>
</Property>

<Property name="IfDone">
<Description>
Решена ли эта задача уже?
Есть ли смысл подгружать данные из IW?</Description>
<Type>%ZEN.Datatype.boolean</Type>
<InitialExpression>0</InitialExpression>
</Property>

<Property name="IfEvaluated">
<Description>
Указывает была ли эта задача уже проверена? (1 - уже оценена)</Description>
<Type>%ZEN.Datatype.boolean</Type>
<InitialExpression>0</InitialExpression>
</Property>
</Class>


<Class name="Web.Components.Basic">
<Description>
базовый класс компонента (проба)</Description>
<Super>%ZEN.Component.composite</Super>
<TimeChanged>63043,49166.745111</TimeChanged>
<TimeCreated>63040,35140.522734</TimeCreated>

<Parameter name="NAMESPACE">
<Description>
This is the XML namespace for this component.</Description>
<Default>http://www.intersystems.com/Web.Components</Default>
</Parameter>

<Parameter name="BLUESTYLE">
<Description>
Фон для задач 1-го типа</Description>
<Default>rgb(240, 248, 255)</Default>
</Parameter>

<Parameter name="REDDISHSTYLE">
<Description>
Фон для задач 2-го типа</Description>
<Default>rgb(250, 240, 230)</Default>
</Parameter>

<Parameter name="GREENYSTYLE">
<Description>
Фон для задач 3-го типа</Description>
<Default>rgb(240, 255, 240)</Default>
</Parameter>

<Parameter name="TYPE1WORDING">
<Default>Type in the missing concept name that matches the semantic relation and the set of related elements given.</Default>
</Parameter>

<Parameter name="TYPE2WORDING">
<Default>Select the correct type of semantic relation that matches the concept and the set of related elements given</Default>
</Parameter>

<Parameter name="TYPE3WORDING">
<Default>Type in the missing element of cognitive subgroup that makes the entire cognitive structure correct.</Default>
</Parameter>

<Property name="onChangeCustom">
<Type>%ZEN.Datatype.eventHandler</Type>
</Property>

<Property name="Num">
<Description>
Номер по счёту</Description>
<Type>%ZEN.Datatype.integer</Type>
</Property>

<Property name="CSId">
<Description>
ID задачи CS (не CP) лежащей в БД</Description>
<Type>%ZEN.Datatype.integer</Type>
<Required>1</Required>
</Property>

<Property name="Info">
<Description>
ID объекта класса IW с информацией о решении задачи (ответ студента, проверена ли пр.)</Description>
<Type>%ZEN.Datatype.integer</Type>
<Required>1</Required>
</Property>

<Property name="IfDone">
<Description>
Решена ли эта задача уже?
Есть ли смысл подгружать данные из IW?</Description>
<Type>%ZEN.Datatype.boolean</Type>
<InitialExpression>0</InitialExpression>
</Property>

<Property name="IfEvaluated">
<Description>
Указывает была ли эта задача уже проверена? (1 - уже оценена)</Description>
<Type>%ZEN.Datatype.boolean</Type>
<InitialExpression>0</InitialExpression>
</Property>
</Class>


<Class name="Web.Components.Editable">
<Description>
For creating cognitive prototypes</Description>
<Super>%ZEN.Component.composite,%ZEN.Component.control</Super>
<TimeChanged>63054,56335.207512</TimeChanged>
<TimeCreated>62812,36276.890283</TimeCreated>

<Parameter name="NAMESPACE">
<Default>http://www.intersystems.com/Web.Components</Default>
</Parameter>

<Parameter name="START">
<Description>
Начальное значение количества элементов когнитивной группы</Description>
<Default>5</Default>
</Parameter>

<Property name="ListOfFields">
<Description>
Список всех номеров элементов когнитивной группы.
Значение элемента списка есть номер приставки для названия текстового поля.</Description>
<Type>%String</Type>
<Collection>list</Collection>
</Property>

<Property name="Counter">
<Description>
Счётчик (только увеличивается)</Description>
<Type>%Integer</Type>
<InitialExpression>..#START</InitialExpression>
</Property>

<XData name="Style">
<Description>
Это XML область для этого компонента.
Этот блок Style содержит определение CSS стиля компонента.</Description>
<Data><![CDATA[
<style type="text/css">
</style>
]]></Data>
</XData>

<XData name="Contents">
<Description>
Элементы этого сложного компонента.</Description>
<XMLNamespace>http://www.intersystems.com/zen</XMLNamespace>
<Data><![CDATA[
<composite>
<vgroup id="Cholder" label="Linked cognitives" disabled="false">
</vgroup>
<button align="right" enclosingClass="bAdd"
caption="Add" 
onclick="zenThis.composite.AddField();"
/>
</composite>
]]></Data>
</XData>

<Method name="%OnAfterCreateComposite">
<Description>
Выводим на экран начальный список полей</Description>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
  s InitialList=$LB(1,2,3,4,5)
  d ..ListOfFields.InsertList(InitialList)
  s group =..%GetChildById("Cholder")
	f i=1:1:..#START
	  {
	    //Создаём горизонтальные группы, потом будем удалять группы
	    d ..AddHGroup(i,group)
	  }
  Quit $$$OK
]]></Implementation>
</Method>

<Method name="AddHGroup">
<Description>
Добавляет одну группу в конец контейнера</Description>
<FormalSpec>position:%Integer,container:%ZEN.Component.vgroup</FormalSpec>
<Private>1</Private>
<Implementation><![CDATA[
  s hGroup = ##class(%ZEN.Component.hgroup).%New()
  s hGroup.id="hg"_position
  d container.%AddChild(hGroup)
  s tComp = ##class(%ZEN.Component.text).%New()
  s tComp.id="Lex"_position
  s tComp.disabled=0
  s tComp.dragEnabled=0
  s tComp.dropEnabled=1
  s tComp.size="35"
  d hGroup.%AddChild(tComp)
  s hID=##class(%ZEN.Component.hidden).%New()
  s hID.id="LexID"_position
  d hGroup.%AddChild(hID)
  s bDelete = ##class(%ZEN.Component.button).%New()
  s bDelete.caption="Del"
  s bDelete.enclosingClass="bAdd"
  s bDelete.onclick="zenThis.composite.DeleteText("_position_");"
  d hGroup.%AddChild(bDelete)
  q
]]></Implementation>
</Method>

<Method name="DeleteText">
<Description>
Удаляет поле (со всей оболочкой) из текущей позиции
deleteNum - это номер (по счёту, не позиция в списке!) который нужно удалить
Позицию в списке для удаления определяем по номеру элемента</Description>
<FormalSpec>deleteNum:%Integer</FormalSpec>
<ZenMethod>1</ZenMethod>
<Implementation><![CDATA[
  // Удаляем с экрана
  s group=..%GetChildById("Cholder")
  s deleteAim=..%GetChildById("hg"_deleteNum)
  d group.%RemoveChild(deleteAim)
  // Удаляем из текущего списка (предварительно найдя удаляемый элемент в списке)
  s deleteAt=..ListOfFields.Find(deleteNum)
  d ..ListOfFields.RemoveAt(deleteAt)
  q
]]></Implementation>
</Method>

<Method name="AddField">
<Description>
Добавляет поле (со всей оболочкой) в конец контейнера</Description>
<ZenMethod>1</ZenMethod>
<Implementation><![CDATA[
  s ..Counter=..Counter+1
  s group =..%GetChildById("Cholder")
  d ..AddHGroup(..Counter,group)
  d ..ListOfFields.Insert(..Counter)
  q
]]></Implementation>
</Method>
</Class>


<Class name="Web.Components.EditableNew">
<Description>
For creating cognitive prototypes</Description>
<Super>%ZEN.Component.composite,%ZEN.Component.control</Super>
<TimeChanged>63055,55362.130758</TimeChanged>
<TimeCreated>62812,36276.890283</TimeCreated>

<Parameter name="NAMESPACE">
<Default>http://www.intersystems.com/Web.Components</Default>
</Parameter>

<Parameter name="START">
<Description>
Начальное значение количества элементов когнитивной группы</Description>
<Default>5</Default>
</Parameter>

<Property name="Current">
<Description>
Значение количества элементов когнитивной группы</Description>
<Type>%ZEN.Datatype.integer</Type>
</Property>

<Property name="ListOfRels">
<Description>
Список элементов когнитивной группы для вставки в поля</Description>
<Type>User.CPRelationships</Type>
<Collection>list</Collection>
</Property>

<Property name="ListOfFields">
<Description>
Список всех номеров элементов когнитивной группы.
Значение элемента списка есть номер приставки для названия текстового поля.</Description>
<Type>%String</Type>
<Collection>list</Collection>
<Private>1</Private>
</Property>

<Property name="Counter">
<Description>
Счётчик (только увеличивается)</Description>
<Type>%Integer</Type>
<Private>1</Private>
</Property>

<XData name="Style">
<Description>
Это XML область для этого компонента.
Этот блок Style содержит определение CSS стиля компонента.</Description>
<Data><![CDATA[
<style type="text/css">
</style>
]]></Data>
</XData>

<XData name="Contents">
<Description>
Элементы этого сложного компонента.</Description>
<XMLNamespace>http://www.intersystems.com/zen</XMLNamespace>
<Data><![CDATA[
<composite>
<vgroup id="Cholder" label="Linked cognitives" disabled="false">
</vgroup>
<button align="right" enclosingClass="bAdd"
caption="Add" 
onclick="zenThis.composite.Add();"
/>
</composite>
]]></Data>
</XData>

<Method name="%OnAfterCreateComposite">
<Description>
Выводим на экран начальный список полей</Description>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
  if ..Current {s iniValue=..Current} else {s iniValue=..#START}
  s ..Counter=iniValue
  d ..FillIniList(iniValue)
  d ..SetView(iniValue)
  Quit $$$OK
]]></Implementation>
</Method>

<Method name="SetView">
<FormalSpec>n:%Integer</FormalSpec>
<Private>1</Private>
<Implementation><![CDATA[
  s group =..%GetChildById("Cholder")
	f i=1:1:n {
	   if ..ListOfRels.Count()'=0 {
	     d ..AddHGroup(i,group,1)
	   }
	   else {
		 d ..AddHGroup(i,group)
	   }
	}
]]></Implementation>
</Method>

<Method name="FillIniList">
<FormalSpec>n:%Integer</FormalSpec>
<Private>1</Private>
<Implementation><![CDATA[
   d ..ListOfFields.Clear()
   f i=1:1:n {
	 d ..ListOfFields.Insert(i)
   }
]]></Implementation>
</Method>

<Method name="AddHGroup">
<Description>
Добавляет одну группу в конец контейнера</Description>
<FormalSpec>position:%Integer,container:%ZEN.Component.vgroup,var:%Boolean=0</FormalSpec>
<Private>1</Private>
<Implementation><![CDATA[
  s hGroup = ##class(%ZEN.Component.hgroup).%New()
  s hGroup.id="hg"_position
  d container.%AddChild(hGroup)
  s tComp = ##class(%ZEN.Component.text).%New()
  s tComp.id="Lex"_position
  if var=1 s tComp.value=..ListOfRels.GetAt(position).Name
  //s tComp.disabled=1
  s tComp.readOnly=1
  s tComp.dragEnabled=0
  s tComp.dropEnabled=1
  s tComp.size="35"
  d hGroup.%AddChild(tComp)
  s hID=##class(%ZEN.Component.hidden).%New()
  s hID.id="LexID"_position
  if var=1 s hID.value=..ListOfRels.GetAt(position).%Id()
  d hGroup.%AddChild(hID)
  s bDelete = ##class(%ZEN.Component.button).%New()
  s bDelete.caption="Del"
  s bDelete.enclosingClass="bAdd"
  s bDelete.onclick="zenThis.composite.Delete("_position_");"
  d hGroup.%AddChild(bDelete)
  q
]]></Implementation>
</Method>

<Method name="Delete">
<Description>
Удаляет поле (со всей оболочкой) из текущей позиции
deleteNum - это номер (по счёту, не позиция в списке!) который нужно удалить
Позицию в списке для удаления определяем по номеру элемента</Description>
<FormalSpec>deleteNum:%Integer</FormalSpec>
<ZenMethod>1</ZenMethod>
<Implementation><![CDATA[
  // Удаляем с экрана
  s group=..%GetChildById("Cholder")
  s deleteAim=..%GetChildById("hg"_deleteNum)
  d group.%RemoveChild(deleteAim)
  // Удаляем из текущего списка (предварительно найдя удаляемый элемент в списке)
  s deleteAt=..ListOfFields.Find(deleteNum)
  d ..ListOfFields.RemoveAt(deleteAt)
  s ..Current=..Current-1
  q
]]></Implementation>
</Method>

<Method name="Add">
<Description>
Добавляет поле (со всей оболочкой) в конец контейнера</Description>
<ZenMethod>1</ZenMethod>
<Implementation><![CDATA[
  // Текущее кол-во элементов
  s ..Current=..Current+1
  // Счётчик
  s ..Counter=..Counter+1
  s group =..%GetChildById("Cholder")
  d ..AddHGroup(..Counter,group)
  d ..ListOfFields.Insert(..Counter)
  q
]]></Implementation>
</Method>

<Method name="SetCurrent">
<Description>
Установить определённое значение количества элементов
1) Удалить все
2) Установить сколько-то</Description>
<FormalSpec>n:%Integer</FormalSpec>
<Implementation><![CDATA[
  // Удаляем все ..Current
  d ..%GetChildById("Cholder").%RemoveChildren()
  // Устанавливаем n
  s ..Current=n, ..Counter=n
  d ..FillIniList(n), ..SetView(n)
]]></Implementation>
</Method>

<Method name="GetList">
<Description>
Преобразовывает список индексов полей в список значений ID, которые находятся в полях с заданным индексом</Description>
<ReturnType>%Library.ListOfDataTypes</ReturnType>
<ZenMethod>1</ZenMethod>
<Implementation><![CDATA[
  s listDim=..ListOfFields.Count()
  s listOfRels=##class(%Library.ListOfDataTypes).%New()
   f x=1:1:listDim
    {
	  s index=..ListOfFields.GetAt(x)
	  s value=..%GetChildById("LexID"_index).value
	  d listOfRels.Insert(value)
    }
  q listOfRels
]]></Implementation>
</Method>
</Class>


<Class name="Web.Components.Evaluable">
<Description>
For Student's independent work</Description>
<Super>Web.Components.Basic</Super>
<TimeChanged>63043,49171.684146</TimeChanged>
<TimeCreated>63039,43022.786558</TimeCreated>

<Parameter name="NAMESPACE">
<Description>
This is the XML namespace for this component.</Description>
<Default>http://www.intersystems.com/Web.Components</Default>
</Parameter>

<XData name="Style">
<Description>
This Style block contains component-specific CSS style definitions.</Description>
<Data><![CDATA[
<style type="text/css">

/*оформление легенд*/

legend {
    font-weight: bold;
    color:white;
    }
.studentsFieldE {
    font-style: italic;
}
.legendTrue fieldSet legend{
    background: #00FF7F;
}
.legendFalse fieldSet legend {
    background: #FF3030;
}
.legendPostponed fieldSet legend {
    background: #8B8B83;
}

/*Оформление формулировок */

.problemSettings {
	font-weight: bold;
	font-family: arial;
	font-style: italic;
}
</style>
]]></Data>
</XData>

<XData name="Contents">
<Description>
Contents of this composite component.</Description>
<XMLNamespace>http://www.intersystems.com/zen</XMLNamespace>
<Data><![CDATA[
<composite>
<label id="ProblemSetting" value="" controlClass="problemSettings"/>
<spacer height="5px"/>
<hidden id="IW" name="IW" value="#(%composite.Info)#"/>
<hgroup cellVAlign="top">
<fieldSet id="Container" name="Container" legend="Status: not checked." enclosingClass="">
 <hgroup id="CPGroup" name="CPGroup" valign="middle" align="center" cellAlign="center" cellVAlign="middle">
  <hgroup cellVAlign="top">
  <text id="Concept" name="Concept" label="Concept" disabled="true" size="35"/>
  <dataCombo id="Link" name="Link" label="Link" disabled="true" 
  sql="SELECT ID,Name FROM Semantics ORDER BY Name"
  sqlLookup="SELECT Name FROM Semantics WHERE ID=?" 
  dropdownHeight="100"
  />
  </hgroup>
  <!-- Контейнер когнитивной группы -->
  <vgroup id="Relations" name="Relations" disabled="false"
  />
 </hgroup>
</fieldSet>

<!-- Аппендикс для оценки)) -->

<fieldSet id="MarkingArea" name="MarkingArea" legend="Mark" align="left">
<radioSet id="rsMark" name="rsMark" displayList="100%, 0%, Postponed" valueList="1,0,-1" layout="vertical" value="-1" onchange="zenThis.composite.changeLegend(zenThis.value);"/>
</fieldSet>
</hgroup>
<spacer height="5px"/>
</composite>
]]></Data>
</XData>

<Method name="%OnAfterCreateComposite">
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	// Открываем задачу
	// Получаем CP, на основе которого эта задача спроектирована, и расставляем его свойства по шаблону
	s existCS=##class(User.CS).%OpenId(..CSId)
	   if $IsObject(existCS)
	     {
		   //Генерируем поля для элементов когнитивной группы и наполняем шаблон КП логическим содержимым
	       d ..FillUp(existCS.CP)
	       // Превращаем эталонный КП в задачу, путём прятания полей в соответствии с типом задачи
	       // и замена этого содержимого на то, что вписал студент
	       s mcs=..MakeCaseStudy(existCS)
	         if $$$ISERR(mcs) {
		         q $$$ERROR($$$GeneralError,"Failure when creating a case study")
	         }
	       // Делаем область для оценки Disabled в случае если студента ещё вообще ничего не сохранял (не работал над задачами)
	       if ..IfDone=0 s ..%GetChildById("MarkingArea").disabled=1
	     }
	   else
	     {
		   q $$$ERROR($$$GeneralError,"Failure when opening an existing CS")
	     }

  Quit $$$OK
]]></Implementation>
</Method>

<Method name="FillUp">
<Description>
Наполняет шаблон логическим содержимым из БД</Description>
<FormalSpec>existCP:User.CP</FormalSpec>
<Private>1</Private>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
   s ..%GetChildById("Concept").value=existCP.Concept.Name
   s ..%GetChildById("Link").value=existCP.Link.%Id()
   // Заполняем поля для элементов когнитивной группы
   s group = ..%GetChildById("Relations")
	 f i=1:1:existCP.Relations.Count()
	   {
	     s tComp = ##class(%ZEN.Component.text).%New()
	     s tComp.id="Relation"_i
	     s tComp.disabled=1
	     s tComp.size="35"
	     //Показываем заполненные поля с правильными ответами
	     s tComp.value=existCP.Relations.GetAt(i).Name
	     d group.%AddChild(tComp)
	   }
	q $$$OK
]]></Implementation>
</Method>

<Method name="MakeCaseStudy">
<Description>
Скрывает содержимое полей в соответствие с данными о задаче
Копирует в эти поля ответ студента, свойство Hint - содержит верный ответ из ЭМ
Устанавливает разный цвет фона для задач разного типа</Description>
<FormalSpec>existCS:User.CS</FormalSpec>
<Private>1</Private>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
  s info=##class(User.IW).%OpenId(..Info)
  if '$IsObject(info) {
	 q $$$ERROR()   
  }
  If existCS.TypeOfCS=1
	{
	  d ..Shape(1,..Num_") "_..#TYPE1WORDING,"Concept",..#BLUESTYLE,existCS.CP.Concept.Name,info)
	}
  ElseIf existCS.TypeOfCS=2
	{
	  d ..Shape(2,..Num_") "_..#TYPE2WORDING,"Link",..#REDDISHSTYLE,existCS.CP.Link.Name,info)
	}
  Else
	{
	  d ..Shape(3,..Num_") "_..#TYPE3WORDING,"Relation"_existCS.SNOfHSubG,..#GREENYSTYLE,existCS.CP.Relations.GetAt(existCS.SNOfHSubG).Name,info)
	}
	q $$$OK
]]></Implementation>
</Method>

<Method name="Shape">
<Description>
Создаёт задачу и придаёт ей вид</Description>
<FormalSpec>type:%String,wording,field:%String,style:%String,hint:%String,iw:User.IW</FormalSpec>
<Private>1</Private>
<Implementation><![CDATA[
  //Дать формулировку задаче
  d ..ProblemSetting(wording)
  // Фон (в зависимости от типа задачи)
  d ..SetStyle(style)
   // Стираем значение заданного поля из задачи
  d ..SetEmpty(field)
  // Оформление поля в котором содержится ответ студента
  d ..StyleClass(field,"studentsFieldE")
  // Показать подсказку для преподавателя в свойстве Hint
  d ..SetHint(field,hint)
  // Если задача была решена студентом - показываем преподавателю прошлую работу студента над задачей, если эта задача была уже решена студентом
  if iw.IfDone=1 d ..ShowFeedback(field, iw.Feedback)
  // Если ранее работа не была оценена - пытаемся автоматически оценить эту задачу.
  // В противном случае показываем результаты оценки, которая была произведена  ранее
  if ..IfEvaluated=0 {d ..ToEvaluate(iw.Feedback, hint)} else {d ..ShowResults(iw.CSstatus,iw.Mark)}
  q
]]></Implementation>
</Method>

<Method name="ShowFeedback">
<Description>
Показывает ответы студента и оценку если работа уже была оценена
------------- Дописать!--------------------</Description>
<FormalSpec>field:%String,feedback:%String</FormalSpec>
<Private>1</Private>
<Implementation><![CDATA[  s ..%GetChildById(field).value=feedback
]]></Implementation>
</Method>

<Method name="ShowResults">
<Description>
Показывает результаты предыдущей оценки этой задачи преподавателем</Description>
<FormalSpec>status:%Boolean,mark:%Boolean</FormalSpec>
<Private>1</Private>
<Implementation><![CDATA[
  if status=0 // Отложена
   {
	 s ..%GetChildById("rsMark").value=-1
     // Устанавливаем легенду
     d ..SetLegendSmart(-1)
   }
  else // Оценена позитивно или негативно
   {
	 s ..%GetChildById("rsMark").value=mark
     // Устанавливаем легенду
     d ..SetLegendSmart(mark)  
   }
]]></Implementation>
</Method>

<Method name="ProblemSetting">
<Description>
Формулирует задачу в текстовом виде</Description>
<FormalSpec>typeWording:%String</FormalSpec>
<Private>1</Private>
<Implementation><![CDATA[	s ..%GetChildById("ProblemSetting").value=typeWording
]]></Implementation>
</Method>

<Method name="SetHint">
<Description>
Показывает подсказку ниже поля с ответом студента</Description>
<FormalSpec>nameIs:%String,stringHint:%String</FormalSpec>
<Private>1</Private>
<Implementation><![CDATA[    s ..%GetChildById(nameIs).hint=stringHint
]]></Implementation>
</Method>

<Method name="SetEmpty">
<Description>
Делает поле пустым</Description>
<FormalSpec>nameIs:%String</FormalSpec>
<Private>1</Private>
<Implementation><![CDATA[	s ..%GetChildById(nameIs).value=""
]]></Implementation>
</Method>

<Method name="SetStyle">
<Description>
Устанавливает фон</Description>
<FormalSpec>colourIs:%String</FormalSpec>
<Private>1</Private>
<Implementation><![CDATA[	s ..groupStyle="background:"_colourIs
]]></Implementation>
</Method>

<Method name="StyleClass">
<Description>
Устанавливает стиль текста для поля, в которое студент вводит свой ответ</Description>
<FormalSpec>nameIs:%String,cssClassName:%String</FormalSpec>
<Private>1</Private>
<Implementation><![CDATA[	 s ..%GetChildById(nameIs).controlClass=cssClassName
]]></Implementation>
</Method>

<Method name="ToEvaluate">
<Description>
Автоматизируем проверку
Сравнивает эталонное и введённое студентом значения
В случае полного совпадения - меням:
 1) Заголовок легенды на "Status: 100%" + салатовым цветом обрамление
 2) RadioSet - 100%
 3) Title в поле для ответа студента "Right!"</Description>
<FormalSpec>etalon:%String,student:%String</FormalSpec>
<Private>1</Private>
<Implementation><![CDATA[
  if etalon=student
	{
	  s ..%GetChildById("rsMark").value=1
	  d ..SetLegendSmart(1)
	}
  else
	{
	  s ..%GetChildById("rsMark").value=-1
	  d ..SetLegendSmart(-1)
	}
  q
]]></Implementation>
</Method>

<Method name="SetLegend">
<Description>
Устанавливает значение легенды (общего контейнера задачи)</Description>
<FormalSpec>status,style</FormalSpec>
<Private>1</Private>
<Implementation><![CDATA[
  // Меняем статус легенды
  s ..%GetChildById("Container").legend=status
  // Меняем цвет обрамления легенды
  s ..%GetChildById("Container").enclosingClass=style
]]></Implementation>
</Method>

<Method name="SetLegendSmart">
<FormalSpec>type:%Integer</FormalSpec>
<Private>1</Private>
<Implementation><![CDATA[
  if type=1
   {
	 d ..SetLegend("Status: 100%","legendTrue")
   }
  elseIf type=0
   {
	 d ..SetLegend("Status: 0%","legendFalse")
   }
  else
   {
	 d ..SetLegend("Status: Postponed","legendPostponed") 
   }
]]></Implementation>
</Method>

<Method name="changeLegend">
<Description>
Изменяет значение легенды (100%/0%/Postponed) а также цвет фона
Выполняется при ручной оценке задачи преподавателем (изменение значения радиокнопки)</Description>
<FormalSpec>radio</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
  var status;
  var cssClass;
  var legend;
  if (radio==1)
    {
	  status='Status: 100%';
	  cssClass="legendTrue";
	}
  else if (radio==0)
	{
	  status='Status: 0%';
	  cssClass="legendFalse";
	}
  else // radio=-1
    {
	  status='Status: Postponed';
	  cssClass="legendPostponed";
    }
  legend=zenThis.composite.getChildById('Container');
  legend.setProperty('legend',status);
  legend.setProperty('enclosingClass',cssClass);
  return;
]]></Implementation>
</Method>
</Class>


<Class name="Web.Components.Simple">
<Description>
For Student's independent work</Description>
<Super>Web.Components.Basic</Super>
<TimeChanged>63081,60119.755209</TimeChanged>
<TimeCreated>63012,52282.491526</TimeCreated>

<Parameter name="NAMESPACE">
<Description>
This is the XML namespace for this component.</Description>
<Default>http://www.intersystems.com/Web.Components</Default>
</Parameter>

<XData name="Style">
<Description>
This Style block contains component-specific CSS style definitions.</Description>
<Data><![CDATA[
<style type="text/css">
/*оформление легенды - полужирный*/

legend {
    font-weight: bold;
    color:white;
    background: grey;
}

.legendTrue fieldSet legend{
    background: #00FF7F;
}
.legendFalse fieldSet legend {
    background: #FF3030;
}
.legendPostponed fieldSet legend {
    background: #8B8B83;
}
/*Оформление полей для ввода ответа студентом*/

.studentsField {
    /*font-weight: bold;*/
    font-style: italic;
    background: white;
    border: 2px solid blue;	
}
/*Оформление формулировок */

.problemSettings {
	font-weight: bold;
	font-family: arial;
	font-style: italic;
}
</style>
]]></Data>
</XData>

<XData name="Contents">
<Description>
Contents of this composite component.</Description>
<XMLNamespace>http://www.intersystems.com/zen</XMLNamespace>
<Data><![CDATA[
<composite>
<label id="ProblemSetting" value="" controlClass="problemSettings"/>
<spacer height="5px"/>
<hidden id="IW" name="IW" value="#(%composite.Info)#"/>
<fieldSet id="Container" name="Container" legend="Uncompleted" onclick="">
 <hgroup id="CPGroup" name="CPGroup" valign="middle" align="center" cellAlign="center" cellVAlign="middle">
  <text id="Concept" name="Concept" label="Concept" disabled="true" size="35" onchange="zenThis.composite.changeLegend(zenThis);"/>
  <dataCombo id="Link" name="Link" label="Link" disabled="true" 
  sql="SELECT ID,Name FROM Semantics ORDER BY Name"
  sqlLookup="SELECT Name FROM Semantics WHERE ID=?" 
  dropdownHeight="100" onchange="zenThis.composite.changeLegend(zenThis);"
  />
  <!-- Контейнер когнитивной группы -->
  <vgroup id="Relations" name="Relations" label="" disabled="false"
  />
 </hgroup>
</fieldSet>
<spacer height="5px"/>
</composite>
]]></Data>
</XData>

<Method name="%OnAfterCreateComposite">
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
  // Открываем задачу
  // Получаем CP, на основе которого эта задача спроектирована, и расставляем его свойства по шаблону
  s existCS=##class(User.CS).%OpenId(..CSId)
	if $IsObject(existCS)
	  {
		//Генерируем поля для элементов когнитивной группы и наполняем шаблон КП логическим содержимым
	    d ..FillUp(existCS.CP)
	    // Превращаем эталонный КП в задачу, путём прятания полей в соответствии с типом задачи
	    d ..MakeCaseStudy(existCS)
	  }
	else
	  {
		q $$$ERROR($$$GeneralError,"Failure when opening an existing CS")
	  }
  Quit $$$OK
]]></Implementation>
</Method>

<Method name="FillUp">
<Description>
Наполняет шаблон логическим содержимым из БД</Description>
<FormalSpec>existCP:User.CP</FormalSpec>
<Private>1</Private>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
   s ..%GetChildById("Concept").value=existCP.Concept.Name
   s ..%GetChildById("Link").value=existCP.Link.%Id()
   // Заполняем поля для элементов когнитивной группы
   s group = ..%GetChildById("Relations")
	 f i=1:1:existCP.Relations.Count()
	   {
	     s tComp = ##class(%ZEN.Component.text).%New()
	     s tComp.id="Relation"_i
	     s tComp.disabled=1
	     s tComp.size="35"
	     s tComp.onchange="zenThis.composite.changeLegend(zenThis);"
	     //Показываем студенту заполненные поля с правильными ответами
	     s tComp.value=existCP.Relations.GetAt(i).Name
	     d group.%AddChild(tComp)
	   }
	q $$$OK
]]></Implementation>
</Method>

<Method name="MakeCaseStudy">
<Description>
Скрывает содержимое полей в соответствие с данными о задаче
Поля со скрытыми значениями служат для приёма ответа студента
Устанавливает разный цвет фона для задач одного типа</Description>
<FormalSpec>existCS:User.CS</FormalSpec>
<Private>1</Private>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
  If existCS.TypeOfCS=1
	{
		d ..Shape(1,..Num_") "_..#TYPE1WORDING,"Concept",..#BLUESTYLE,$L(existCS.CP.Concept.Name))
	}
  ElseIf existCS.TypeOfCS=2
	{
		d ..Shape(2,..Num_") "_..#TYPE2WORDING,"Link",..#REDDISHSTYLE,"")
	}
  Else
	{
		d ..Shape(3,..Num_") "_..#TYPE3WORDING,"Relation"_existCS.SNOfHSubG,..#GREENYSTYLE,$L(existCS.CP.Relations.GetAt(existCS.SNOfHSubG).Name))
	}
  q $$$OK
]]></Implementation>
</Method>

<Method name="Shape">
<Description>
Создаёт задачу и придаёт ей вид</Description>
<FormalSpec>type:%String,wording,field:%String,style:%String,hint:%Integer</FormalSpec>
<Private>1</Private>
<Implementation><![CDATA[
  // Стираем значение заданного поля из задачи
  d ..SetEmpty(field)
  // Разрешаем студенту вводить его ответ, если задача ещё не проверена преподавателем!
  if ..IfEvaluated=0 d ..UnsetDisabled(field)
  // Дать формулировку задаче
  d ..ProblemSetting(wording)
  // Показать подсказку (для задач I и III типа)
  if type'=2 d ..SetHint(field,hint)
  // Фон (в зависимости от типа задачи)
  d ..SetStyle(style)
  // Оформление поля для ввода ответа
  d ..StyleOfSFields(field)
  // Показываем студенту его прошлую работу над задачей, если он открывает эту тему (набор задач включая эту) не в первый раз
  if ..IfDone=1 {
	 s iw=##class(User.IW).%OpenId(..Info)
     d ..ShowInfo(field, iw.IfDone, iw.CSstatus, iw.Feedback, iw.Mark, iw.Comment)
  }
  q
]]></Implementation>
</Method>

<Method name="ProblemSetting">
<Description>
Формулирует задачу в текстовом виде</Description>
<FormalSpec>typeWording:%String</FormalSpec>
<Private>1</Private>
<Implementation><![CDATA[  s ..%GetChildById("ProblemSetting").value=typeWording
]]></Implementation>
</Method>

<Method name="SetHint">
<Description>
Показывает подсказку в виде количества символов в ответе</Description>
<FormalSpec>nameIs:%String,stringLength:%Integer</FormalSpec>
<Private>1</Private>
<Implementation><![CDATA[  s ..%GetChildById(nameIs).title="Here should be "_stringLength_" letters."
]]></Implementation>
</Method>

<Method name="ShowInfo">
<Description>
Показывает сохранённые ранее ответы
done - Сохранялся ли уже какой-л. ответ студентом ранее
status - Проверена или не проверена эта задача преподавателем
feedback - Собственно ответ студента
mark - Зачтена или нет эта задача?
comment - Комментарий преподавателя по поводу этой задачи</Description>
<FormalSpec>field,done,status,feedback,mark,comment</FormalSpec>
<Private>1</Private>
<Implementation><![CDATA[
  if done=1
	{
	// Установить значение легенды в шапке задачи
	s ..%GetChildById("Container").legend="Completed"
	// Установить значение ответа студента
	s ..%GetChildById(field).value=feedback
	  if status=1
	    {
		  // Задача проверена преподавателем и оценена
		  if mark=1
		    {
			  //Зачтено
			  d ..SetLegendSmart(1)
			  //s grade="Passed"
		    }
		  else
		    {
			  //Не зачтено
			  d ..SetLegendSmart(0)
			  s grade="Not passed"
		    }
		  //s ..%GetChildById("Container").legend="Checked: "_grade
	    
	    
	    }
	}
]]></Implementation>
</Method>

<Method name="SetOnChange">
<Description>
Устанавливает реакцию на события</Description>
<FormalSpec>nameIs:%String</FormalSpec>
<Private>1</Private>
<Implementation><![CDATA[  s ..%GetChildById(nameIs).onblur="zenThis.composite.changeLegend();"
]]></Implementation>
</Method>

<Method name="SetEmpty">
<Description>
Делает поле пустым</Description>
<FormalSpec>nameIs:%String</FormalSpec>
<Private>1</Private>
<Implementation><![CDATA[  s ..%GetChildById(nameIs).value=""
]]></Implementation>
</Method>

<Method name="UnsetDisabled">
<Description>
Разрешает поле для редактирования</Description>
<FormalSpec>nameIs:%String</FormalSpec>
<Private>1</Private>
<Implementation><![CDATA[  s ..%GetChildById(nameIs).disabled="false"
]]></Implementation>
</Method>

<Method name="SetStyle">
<Description>
Устанавливает фон</Description>
<FormalSpec>colourIs:%String</FormalSpec>
<Private>1</Private>
<Implementation><![CDATA[  s ..groupStyle="background:"_colourIs
]]></Implementation>
</Method>

<Method name="StyleOfSFields">
<Description>
Устанавливает стиль текста для поля, в которое студент вводит свой ответ</Description>
<FormalSpec>nameIs:%String</FormalSpec>
<Private>1</Private>
<Implementation><![CDATA[  s ..%GetChildById(nameIs).controlClass="studentsField"
]]></Implementation>
</Method>

<Method name="SetLegend">
<Description>
Устанавливает значение легенды (общего контейнера задачи)</Description>
<FormalSpec>status,style</FormalSpec>
<Private>1</Private>
<Implementation><![CDATA[
  // Меняем статус легенды
  s ..%GetChildById("Container").legend=status
  // Меняем цвет обрамления легенды
  s ..%GetChildById("Container").enclosingClass=style
]]></Implementation>
</Method>

<Method name="SetLegendSmart">
<FormalSpec>type:%Integer</FormalSpec>
<Private>1</Private>
<Implementation><![CDATA[
  if type=1
   {
	 d ..SetLegend("Passed","legendTrue")
   }
  elseIf type=0
   {
	 d ..SetLegend("Not passed","legendFalse")
   }
  else
   {
	 d ..SetLegend("Not checked","legendPostponed") 
   }
]]></Implementation>
</Method>

<Method name="changeLegend">
<Description>
Изменяет значение легенды (Uncompleted/Completed)</Description>
<FormalSpec>zenThisIs</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
  if (zenThisIs.value.length>0)
    {
	  zenThis.composite.getChildById('Container').setProperty('legend','Completed'); 
	}
  else
	{
	  zenThis.composite.getChildById('Container').setProperty('legend','Uncompleted');
	}
  if ('' != zenThis.composite.onChangeCustom)
	{ 
      zenInvokeCallbackMethod(zenThis.composite.onChangeCustom,zenThis.composite,'onChangeCustom'); 
    }
  else
    { 
      alert("Cancel Callback Not Set") 
    }
  return;
]]></Implementation>
</Method>

<Method name="GetInfo">
<ZenMethod>1</ZenMethod>
<Implementation><![CDATA[  &js<alert('IfDone='+'#(..IfDone)#'+'IW='+'#(..Info)#');>
]]></Implementation>
</Method>
</Class>


<Class name="Web.Curriculum">
<Description>
Created using the page template: Default</Description>
<Super>%ZEN.Component.page</Super>
<TimeChanged>63081,58273.221115</TimeChanged>
<TimeCreated>63012,50322.509764</TimeCreated>

<Parameter name="APPLICATION">
<Description>
Class name of application this page belongs to.</Description>
<Default>Web.Pages</Default>
</Parameter>

<Parameter name="PAGENAME">
<Description>
Displayed name of this page.</Description>
<Default>Curriculum</Default>
</Parameter>

<Parameter name="DOMAIN">
<Description>
Domain used for localization.</Description>
</Parameter>

<XData name="Style">
<Description>
This Style block contains page-specific CSS style definitions.</Description>
<Data><![CDATA[
<style type="text/css">
</style>
]]></Data>
</XData>

<XData name="Contents">
<Description>
This XML block defines the contents of this page.</Description>
<XMLNamespace>http://www.intersystems.com/zen</XMLNamespace>
<Data><![CDATA[
<page xmlns="http://www.intersystems.com/zen" title="Curriculum">
<html enclosingClass="title">Student's personal curriculum</html>
<!-- Шапка страницы -->
 <hgroup width="100%">
    <hgroup align="left">
    <image src="\CSP\user\edit.png" onclick="zenPage.gotoPage('Web.RegistrationMVC.cls?st='+'#(%session.LearnerId)#');" title="Edit" align="left"/>
    <hgroup><label value="Hello, "/><label id="lSt" name="lSt"/></hgroup>
    </hgroup>
 <hgroup align="right"><label value="Last visit: "/><label id="LastVisit" name="LastVisit"/><spacer height="5px"/><image src="\CSP\user\exit.png" onclick="zenPage.confirmLeaving();" title="Exit" align="right"/>
  </hgroup>
 </hgroup>
   
<tablePane 
tableName="Curriculum"
id="tpCurr"
maxRows="100000"
headerLayout="filtersOnTop" 
fixedHeaders="true" 
bodyHeight="20em"
pageSize="20" 
showQuery="false"
useSnapshot="1"
showZebra="true"
showRowSelector="true"
valueColumn="ID" 
useKeys="false"
caption="Here you can select a theme you can work with. Please, make your choice."
nowrap="false" 
align="left" 
width="100%"
multiSelect="false" 
dragEnabled="true" 
dropEnabled="true"
onmultiselect=""
ondblclick="alert(zenThis.value);"
>
<!-- Hidden columns -->

<column  colName="ID" hidden="true" width=""/>

<column  hidden="true"
        id="idSt"
        colName="Student"
        />
<column  hidden="true"
        id="idHide"
        colName="ifHide"
        />
<!-- End --> 

<column  title="Theme"
        id="idContext"
        header="Theme"
        style="text-align:left;" 
        width="400px"
        colName="Context"
        OnDrawCell="MakeContext"
        />

<column  header="Presence" title="Whether or not an unique sequence of CSs has been succefully generated for this theme" 
        colName="Presence"
        colExpression="CASE WHEN Presence=1 THEN 'Yes' ELSE 'Not' END" 
        cellTitle="Presence"
        style="text-align: center;"
        />
        
<column  header="Performance" 
        title="How much have you done?"      
        style="text-align: center ;" 
        width=""
        colName="Performance"
        OnDrawCell="MakePerformance"
         />
         
<column  header="Date of performance" 
        title="When?"      
        style="text-align: center ;" 
        width="100px"
        colName="DateOfPerform"
        colExpression="CASE WHEN DateOfPerform IS NULL THEN 'No date' ELSE DateOfPerform END"
         />
         
<column  header="Status" title="Has it been checked?"      
        style="text-align: center ;" 
        colName="Status"
        colExpression="CASE Status WHEN 1 THEN 'Yes' ELSE 'Not' END"
        cellTitle="'Not' means that the work has not been checked yet"
         />
<column  header="Date of checking" title="When?"      
        style="text-align: center ;" 
        width=""
        colName="DateOfChecking"
        colExpression="CASE WHEN DateOfChecking IS NULL THEN 'No date' ELSE DateOfChecking END"
         />
<column  header="Teacher" title="Who has checked?"      
        style="text-align: center ;" 
        width=""
        colName="Teacher"
        OnDrawCell="MakeTeacher"
         />
<column  header="Result" title="Your result"      
        style="text-align: center ;" 
        width=""
        colName="Result"
        OnDrawCell="MakeResult"
         />
 <column header="Mark" title="Your mark"      
        style="text-align: center ;" 
        width=""
        colName="Mark"
         />

 <column link="javascript:zenPage.GoToIw('#(%query.Student)#','#(%query.Context)#' );"
        header="GoTo"
        cellTitle="Independent work" 
        linkCaption="Start"
        linkConfirm="Do you wish to start/change your independent work?"
        style="text-align: center ;"
         />

<condition id="cColour"
        colName="Status"
        predicate="EQ"
        value="Yes"
         rowStyle="background: plum;"/>
         
<condition id="cColour2"
        colName="Mark"
        predicate="EQ"
        value="Unsatisfactory (2)"
         cellStyle="background: red;"/>         
</tablePane>
<tableNavigatorBar tablePaneId="tpCurr"/>
</page>
]]></Data>
</XData>

<Method name="MakePerformance">
<FormalSpec>pTable:%ZEN.Component.tablePane,pName:%String,pSeed:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	&html<#($FNUMBER(%query("Performance"),",",2)_" %")#>
	Quit $$$OK
]]></Implementation>
</Method>

<Method name="MakeResult">
<FormalSpec>pTable:%ZEN.Component.tablePane,pName:%String,pSeed:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	&html<#($FNUMBER(%query("Result"),",",2)_" %")#>
	Quit $$$OK
]]></Implementation>
</Method>

<Method name="MakeContext">
<FormalSpec>pTable:%ZEN.Component.tablePane,pName:%String,pSeed:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    s con=%query("Context")
    s myContext=##class(User.Theme).%OpenId(con)
    s myOutput= myContext.Subject.Department.Name_"->"_myContext.Subject.Subject.Name_"->"_myContext.Name
	&html<#(myOutput)#>
	Quit $$$OK
]]></Implementation>
</Method>

<Method name="MakeTeacher">
<FormalSpec>pTable:%ZEN.Component.tablePane,pName:%String,pSeed:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    s teach=%query("Teacher")
    if teach=""
    {
	  &html<No teachers>
    }
    else
    {
	  s teachers=##class(User.Teacher).%OpenId(teach)
	  &html<#(teachers.PSurname)#>
    }
   Quit $$$OK
]]></Implementation>
</Method>

<Method name="goto">
<Description>
Незашифрованная передача параметров на страницу (тут не используется!)</Description>
<FormalSpec>gSt,gTh</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
  var page = "Web.IndependentWork.cls?st=" + gSt+"&con="+gTh;
  this.gotoPage(page);
  return;
]]></Implementation>
</Method>

<Method name="GoToIw">
<Description>
Зашифрованная передача параметров на страницу (использовать вместо метода goto())</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>gSt:%Integer,gTh:%Integer</FormalSpec>
<ZenMethod>1</ZenMethod>
<Implementation><![CDATA[
  set query("st")=gSt
  set query("con")=gTh
  &js<zenPage.gotoPage(#(..QuoteJS(..Link("Web.IndependentWork.cls",.query)))#);>
]]></Implementation>
</Method>

<Method name="%OnPreHTTP">
<Description>
Смотрим если для данного студента сессия существует (т.е. от вошёл в систему)
тогда показываем ему таблицу с его проделанной и предстоящей работой и 
предлагаем ему выбрать дальнейшее действие:
1) Выбрать новую СРС для выполнения;
2) или отредактировать старую СРС или же
3) просмотреть предыдущие уже проверенные СРС и проделать работу над ошибками.
   (наверное без права редактировать уже ничего после проверки преподавателем)
В противном случае отправляем его на страницу авторизации.
Имеем следующие сессионные переменные:
%session.Data("LearnerId")- ID студента и пр.</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Boolean</ReturnType>
<ServerOnly>1</ServerOnly>
<Implementation><![CDATA[
   if ($Get(%session.Data("LearnerId")) = "")
     {
       s %response.Redirect="Web.Verification.cls"
      }
  q 1
]]></Implementation>
</Method>

<Method name="%OnAfterCreatePage">
<Description>
Устанавливаем значения имени студента и признака активности темы в фильтр таблицы и информации о нём в шапку страницы.</Description>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 // Считываем значения сессионной переменной
  s learner=$Get(%session.Data("LearnerId"))
  s student=##class(User.Person).%OpenId(learner)	 
  d ..%SetValueById("lSt",student.PFullName)
  d ..%SetValueById("LastVisit",student.LastVisit) 
  // Устанавливаем значение фильтров в шапку таблицы
  // Фильтр по конкретному студенту по его ID
  s ..%GetComponentById("idSt").filterValue=%session.Data("LearnerId")
  // Фильтр только по активным темам для данного студента
  s ..%GetComponentById("idHide").filterValue=1
  q $$$OK
]]></Implementation>
</Method>

<Method name="KillSession">
<ZenMethod>1</ZenMethod>
<Implementation><![CDATA[
	// Обновить дату последнего визита
    d ..LastVisitRenew()
    s %session.EndSession=1
	&js<location.reload();>
	q
]]></Implementation>
</Method>

<Method name="LastVisitRenew">
<Description>
Обновляет дату последнего посещения сайта</Description>
<FormalSpec>st:%Integer=$Get(%session.Data("LearnerId"))</FormalSpec>
<Private>1</Private>
<Implementation><![CDATA[
  s learner=##class(User.Learner).%OpenId(st)
  s learner.LastVisit=$zdt($H,3)
  d learner.%Save()
]]></Implementation>
</Method>

<Method name="confirmLeaving">
<Description>
Подтверждение покидания страницы</Description>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
  if (confirm("Выйти?")) {
    this.KillSession();
  } 
  else {
  return;
  }
]]></Implementation>
</Method>
</Class>


<Class name="Web.CurriculumTeacher">
<Description>
Created using the page template: Default</Description>
<Super>%ZEN.Component.page</Super>
<TimeChanged>63081,61673.951108</TimeChanged>
<TimeCreated>63035,38071.944418</TimeCreated>

<Parameter name="APPLICATION">
<Description>
Class name of application this page belongs to.</Description>
<Default>Web.Pages</Default>
</Parameter>

<Parameter name="PAGENAME">
<Description>
Displayed name of this page.</Description>
<Default>Curriculum (teacher)</Default>
</Parameter>

<Parameter name="DOMAIN">
<Description>
Domain used for localization.</Description>
</Parameter>

<XData name="Style">
<Description>
This Style block contains page-specific CSS style definitions.</Description>
<Data><![CDATA[
<style type="text/css">
</style>
]]></Data>
</XData>

<XData name="Contents">
<Description>
This XML block defines the contents of this page.</Description>
<XMLNamespace>http://www.intersystems.com/zen</XMLNamespace>
<Data><![CDATA[
<page xmlns="http://www.intersystems.com/zen" title="Curriculum">
<html enclosingClass="title">Students' personal curricula</html>
<menu layout="horizontal" width="100%" align="left">
<menuItem caption="Menu" onclick="zenPage.gotoPage('Web.Menu.cls');" title="Go to menu."/>
<menuSeparator/>
<label id="idTeacher" value="" width="20%"/>
<spacer width="100%"/>
<menuSeparator/>
<menuItem caption="Exit" onclick="zenPage.Exit();" title="Leave the page. You will need to log in to get here again."/>
</menu>
<tablePane 
tableName="Curriculum"
id="tpCurr"
maxRows="100000"
headerLayout="filtersOnTop" 
fixedHeaders="true" 
bodyHeight="20em"
pageSize="20" 
showQuery="false"
useSnapshot="1"
showZebra="true"
showRowSelector="true"
valueColumn="ID" 
useKeys="false"
caption="Here you can select a theme you can work with. Please, make your choice."
nowrap="false" 
align="left" 
width="100%"
multiSelect="false" 
dragEnabled="true" 
dropEnabled="true"
onmultiselect=""
onrefresh="zenPage.saveCookie();"
>

<column colName="ID" hidden="true"/>

<column id="idSt" hidden="true"
       colName="Student"
        />
        
<column id="idDepartment"
       colName="Context->Subject->Department->Name As Depart"
       filterType="query"
       filterQuery="select Name from DepartmentNew"
        />
        
<column id="idSubject"
       colName="Context->Subject->Subject->Name As Subject"
       filterType="query"
       filterQuery="select Name from Subject"
       width="80px"
       style="text-align:center;"
        />
        
<column id="idTheme"
       colName="Context->Name As Theme"
       filterType="text"
       filterOp="["
       width="150px"
        />        
      
<column id="idCont"
       colName="Context"
       hidden="true"
        /> 
               
<column id="idSpec"
       colName="Student->TypeOfSt_Spec As Spec"
       filterType="enum"
       filterEnum="ТПКС,Фарм,Мед,Пед,Стомат"
       filterOp="=" 
       filterEnumDisplay="ТПКС,Фарм,Мед,Пед,Стом"
       width="45px"
       style="text-align:center;"
       title="Мед-медицинский; Пед - педиатрический; Стомат - стоматологический"
        />        
        
<column id="idType"
       colName="Student->TypeOfSt_TypeOfEducation As Type"
       filterType="enum"
       filterEnum="Дневное,Заочное"
       filterOp="=" 
       filterEnumDisplay="Д,З"
       width="50px"
       style="text-align:center;"
        />
        
<column id="idYear"
       colName="Student->TypeOfSt_YearOfStudy As Year"
       filterType="enum"
       filterEnum="1 курс,2 курс,3 курс,4 курс,5 курс,6 курс"
       filterOp="=" 
       filterEnumDisplay="1,2,3,4,5,6"
       width="45px"
       style="text-align:center;"
        /> 
               
<column id="idClass"
       colName="Student->TypeOfSt_Class As Class"
       filterType="enum"
       filterEnum="1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25"
       filterOp="=" 
       filterEnumDisplay="1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25"
       width="35px"
       style="text-align:center;"
        />  
              
<column id="idSts" hidden="false"
       colName="Student->PName as FIO"
       OnDrawCell="MakeFIO"
       style="text-align:left;"
       filterType="text"
       filterOp="%STARTSWITH"
        />
               
<column id="idHide"
       header="A?" title="If the context is availiable for a student?"
       colName="ifHide"
       style="text-align:center;"
       hidden="true"
        />
       
<column id="idPres" header="Pres." 
       colName="Presence" 
       title="If a personal set of CSs was successfully generated for a student."
       hidden="true"
        />
        
<column  header="Perform."
        title="How much of independent work has been done by the student ?"      
        style="text-align: center ;" 
        width="70px"
        colName="Performance"
        OnDrawCell="MakePerformance"
         />
         
<column  header="Date of performance" 
        title="When?"      
        style="text-align: center ;" 
        width="130px"
        colName="DateOfPerform"
        colExpression="CASE WHEN DateOfPerform IS NULL THEN 'No date' ELSE DateOfPerform END"
        filterType="datetime" 
        filterOp="BETWEEN"
         />
         
<!-- Ошибка Intersystems -->         
<column  header="Status" title="Has it been checked?"      
        style="text-align: center ;" 
        width="50px"
        colName="Status"
        filterType="enum"
        filterEnum="1,0"
        filterOp="=" 
        filterEnumDisplay="Yes,Not"
        colExpression="CASE WHEN Status=1 THEN 'Yes' ELSE 'Not' END"
         />
         
<column  header="Date of checking" title="When?"      
        style="text-align: center ;" 
        width="130px"
        colName="DateOfChecking"
        colExpression="CASE WHEN DateOfChecking IS NULL THEN 'No date' ELSE DateOfChecking END"
        filterType="date" filterOp="BETWEEN"
         />
         
<column  header="Teacher" title="Who has checked?"      
        style="text-align: center ;" 
        width=""
        colName="Teacher"
        colExpression="CASE WHEN Teacher IS NULL THEN 'No teachers' ELSE Teacher->PSurname END"
        filterType="query"
        filterQuery="select PSurname from Teacher"
         />
         
<column  header="Result" title="Your result"      
        style="text-align: center ;" 
        width="50px"
        colName="Result"
         />
 <column header="Mark" title="Your mark"      
        style="text-align: center ;" 
        width="80px"
        colName="Mark"
         />

 <column header="GoTo"
        cellTitle="Student's work" 
        width="35px"
        style="text-align:center;"
        OnDrawCell="GoToIw"
         />
         
<condition id="cColour"
        colName="Status"
        predicate="EQ"
        value="Yes"
         rowStyle="background: plum;"/>
</tablePane>
<tableNavigatorBar tablePaneId="tpCurr"/>
</page>
]]></Data>
</XData>

<Method name="MakeFIO">
<ClassMethod>1</ClassMethod>
<FormalSpec>pTable:%ZEN.Component.tablePane,pName:%String,pSeed:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 s st=%query("Student")
 s student=##class(User.Learner).%OpenId(st)
  if $IsObject(student) {
   &html<#(student.PName_", "_$EXTRACT(student.PSurname,1,1)_".")#>
  }
 q $$$OK
]]></Implementation>
</Method>

<Method name="MakePerformance">
<FormalSpec>pTable:%ZEN.Component.tablePane,pName:%String,pSeed:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	&html<<p>#($FNUMBER(%query("Performance"),",",2)_" %")#</p>>
	Quit $$$OK
]]></Implementation>
</Method>

<Method name="GoToIw">
<Description>
Зашифрованная передача параметров на страницу</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pTable:%ZEN.Component.tablePane,pName:%String,pSeed:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
  &html<<a href="Web.SupervisingWork.cls?st=#(%query("Student"))#&con=#(%query("Context"))#">Show</a>>
  q $$$OK
]]></Implementation>
</Method>

<Method name="saveCookie">
<Description>
Сохраняет значения фильтров из предыдущих сенсов в куках.</Description>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
  zenPage.setCookie('Depart',zen('idDepartment').getProperty('filterValue'));
  zenPage.setCookie('Subject',zen('idSubject').getProperty('filterValue'));
  zenPage.setCookie('Theme',zen('idTheme').getProperty('filterValue'));
  zenPage.setCookie('Spec',zen('idSpec').getProperty('filterValue'));
  zenPage.setCookie('Type',zen('idType').getProperty('filterValue'));
  zenPage.setCookie('Year',zen('idYear').getProperty('filterValue'));
  zenPage.setCookie('Class',zen('idClass').getProperty('filterValue'));
]]></Implementation>
</Method>

<Method name="setCookie">
<FormalSpec>name,value</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[   document.cookie = name+"="+value;
]]></Implementation>
</Method>

<Method name="getCookie">
<Description>
Извлекает куки - ничего не писал - копипаст из исходников.</Description>
<FormalSpec>name</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
  var cookie = " " + document.cookie;
  var search = " " + name + "=";
  var setStr = null;
  var offset = 0;
  var end = 0;
	if (cookie.length > 0) {
	  offset = cookie.indexOf(search);
		if (offset != -1) {
		  offset += search.length;
		  end = cookie.indexOf(";", offset)
			if (end == -1) {
				end = cookie.length;
			}
			setStr = unescape(cookie.substring(offset, end));
		}
	}
  return(setStr);
]]></Implementation>
</Method>

<Method name="setFilter">
<FormalSpec>colName,cookieName</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
  var value = zenPage.getCookie(cookieName);
  if (value!=null) {
        zen(colName).setProperty('filterValue',value);
  }
]]></Implementation>
</Method>

<Method name="onloadHandler">
<Description>
This client event, if present, is fired when the page is loaded.</Description>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
  zenPage.setFilter('idDepartment','Depart');
  zenPage.setFilter('idSubject','Subject');
  zenPage.setFilter('idTheme','Theme');
  zenPage.setFilter('idSpec','Spec');
  zenPage.setFilter('idType','Type');
  zenPage.setFilter('idYear','Year');
  zenPage.setFilter('idClass','Class');
  var table = zen('tpCurr');
  table.applyFilters();
]]></Implementation>
</Method>

<Method name="Exit">
<Description>
Выход из системы</Description>
<ZenMethod>1</ZenMethod>
<Implementation><![CDATA[
  k %session.Data("TeacherId")
  k %session.Data("Context")
  // перезагрузить страницу
  &js<zenPage.gotoPage('Web.Verification.cls');>
]]></Implementation>
</Method>

<Method name="%OnPreHTTP">
<ClassMethod>1</ClassMethod>
<ReturnType>%Boolean</ReturnType>
<ServerOnly>1</ServerOnly>
<Implementation><![CDATA[
   if ($Get(%session.Data("TeacherId")) = "")
     {
       s %response.Redirect="Web.Verification.cls"
      }
  q 1
]]></Implementation>
</Method>

<Method name="%OnAfterCreatePage">
<Description>
Устанавливаем значения имени студента и признака активности темы в фильтр таблицы и информации о нём в шапку страницы.</Description>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 // Считываем значения сессионной переменной
  s teacher=$Get(%session.Data("TeacherId"))
  s supervisor=##class(User.Person).%OpenId(teacher)	 
  d ..%SetValueById("lSt",supervisor.PFullName)
  d ..%SetValueById("LastVisit",supervisor.LastVisit) 
  // Устанавливаем значение фильтров в шапку таблицы
  // Фильтры по группе студентов и по изучаемым темам
  //s ..%GetComponentById("idSt").filterValue=%session.Data("LearnerId")
  // Фильтр только по активным темам
  s ..%GetComponentById("idHide").filterValue=1
  // Фильтр только по тем темам, для которых уже был сформирован персональный набор КП-ов
  s ..%GetComponentById("idPres").filterValue=1
 
  q $$$OK
]]></Implementation>
</Method>
</Class>


<Class name="Web.EditSubject">
<Description>
Устанавливаем новый конекст</Description>
<Super>%ZEN.Component.page</Super>
<TimeChanged>63048,50094.424218</TimeChanged>
<TimeCreated>62941,58071.835153</TimeCreated>

<Parameter name="APPLICATION">
<Description>
Имя приложения, которому принадлежит эта страница.</Description>
<Default>Web.Pages</Default>
</Parameter>

<Parameter name="PAGENAME">
<Description>
Отображаемое имя для нового приложения.</Description>
<Default>Contexts</Default>
</Parameter>

<Parameter name="DOMAIN">
<Description>
Домен, используемый для локализации.</Description>
</Parameter>

<Property name="Subject">
<Type>%ZEN.Datatype.string</Type>
<Parameter name="ZENURL" value="sub"/>
</Property>

<XData name="Style">
<Description>
Этот блок Style содержит определение CSS стиля страницы.</Description>
<Data><![CDATA[
<style type="text/css">
.comboboxTextButton {
	background:rgb(245, 245, 245);
	border: none;
	color:SlateGrey;
	padding:0px;
	font-size: 13px;
}
</style>
]]></Data>
</XData>

<XData name="Contents">
<Description>
Этот XML блок описывает содержимое этой страницы.</Description>
<XMLNamespace>http://www.intersystems.com/zen</XMLNamespace>
<Data><![CDATA[
<page xmlns="http://www.intersystems.com/zen" title="New context">
<html enclosingClass="title">Editing of subjects</html>
<vgroup align="center" width="20%">
<dataController id="source" modelClass="User.Subject" modelId="#(%page.Subject)#" alertOnError="true"/>
<form id="fCon" name="fCon" controllerId="source">
<fieldSet legend="Create a new context.">
<text label="ID:" id="id" name="id" 
	dataBinding="%id" size="5" hidden="true"/>
<!-- Кафедра (не разрешаем пользователю самостоятельно добавлять кафедру (администратор)) -->

<hgroup cellVAlign="even">
  <dataCombo id="idDep" name="idDep"
   dataBinding="Department" 
   label="Department*" 
   comboType="button" buttonCaption="Lookup" 
   size="35"
   dropdownHeight="100px" 
   dropdownWidth="230px"
   sql="SELECT ID, Name FROM DepartmentNew ORDER BY Name"
   sqlLookup="SELECT Name FROM DepartmentNew WHERE ID=?"
  />
</hgroup>

<!-- Предмет (не разрешаем пользователю самостоятельно добавлять предметы (администратор))-->

<hgroup cellVAlign="even">
  <dataCombo id="idSub" name="idSub"
   dataBinding="Subject"
   comboType="button" buttonCaption="Lookup" 
   label="Subject*"
   size="35"
   dropdownHeight="100px" 
   dropdownWidth="230px"
   sql="SELECT ID, Name FROM Subject ORDER BY Name"
   sqlLookup="SELECT Name FROM Subject WHERE ID=?"
  />
</hgroup>

</fieldSet>

<!-- Контингент студентов -->

<fieldSet id="idCon" legend="Contingent*:" hint="* - required fields" title="Who is this context for? (A contingent of students)">
  <select id="Sp" name="Sp" label="Speciality:" dataBinding="TypeOfSt.Spec" displayList="ТПКС,Фарм,Мед,Пед,Стомат,Лаб. диаг.,ТПКС+Фарм,Мед+Пед+Стомат" valueList="ТПКС,Фарм,Мед,Пед,Стомат,Лаб. диаг.,ТПКС;Фарм,Мед;Пед;Стомат"/>
  <spacer height="5px"/>
  <select id="TE" name="TE" label="Type of Education:" dataBinding="TypeOfSt.TypeOfEducation" displayList="*,Дневное,Заочное" valueList="*,Дневное,Заочное"/>
  <spacer height="5px"/>
  <select id="YS" name="YS" label="Year of study" dataBinding="TypeOfSt.YearOfStudy" displayList="1st,2nd,3d,4th,5th,6th" valueList="1 курс,2 курс,3 курс,4 курс,5 курс,6 курс"/>
  <spacer height="5px"/>
  <text id="Cl" name="Cl"  label="Class:" size="35" 
  dataBinding="TypeOfSt.Class" value="*" onkeypress="zenPage.saveOnEnter();"
  hint="2,4,6,8,10 is OK or just *"
  />
</fieldSet>


<hgroup align="right">
 <button align="right" caption="Save" onclick="zenPage.checkValues();"/>
 <button id="bCl" name="bCl"
 align="right"
 caption="Cancel"
 onclick="zenPage.gotoPage('Web.Theme.cls');"
 />
 </hgroup>
 </form>
 </vgroup>
 
</page>
]]></Data>
</XData>

<Method name="saveForm">
<Description>
SaveForm</Description>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
  var form = zenPage.getComponentById('fCon');
  var rs=form.save();
  //alert(rs);
	if (rs!='') {
	   form.reset();
	   document.location.href ="Web.Theme.cls";
	}
]]></Implementation>
</Method>

<Method name="saveOnEnter">
<Description>
Сохраняем данные формы по нажатию на Enter находясь в контроле формы</Description>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
  if (zenEvent.keyCode == zenENTER) {
    this.checkValues();
  }
]]></Implementation>
</Method>

<Method name="checkValues">
<Description>
Проверка всех полей ввода </Description>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
  var getD =zenPage.getComponentById("idDep").getValue();
  var getS =zenPage.getComponentById("idSub").getValue();
  if (getD==''||getS==''||this.сheckContingent()=='')
      { 
       alert('Invalid values!');
       return;  
      }
  this.saveForm(); 
  return;
]]></Implementation>
</Method>

<Method name="сheckContingent">
<Description>
Проверка ввода контингента студентов</Description>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[  return 'OK';
]]></Implementation>
</Method>
</Class>


<Class name="Web.EditTheme">
<Description>
Устанавливаем новый конекст</Description>
<Super>%ZEN.Component.page</Super>
<TimeChanged>63049,44219.777639</TimeChanged>
<TimeCreated>62941,58071.835153</TimeCreated>

<Parameter name="APPLICATION">
<Description>
Имя приложения, которому принадлежит эта страница.</Description>
<Default>Web.Pages</Default>
</Parameter>

<Parameter name="PAGENAME">
<Description>
Отображаемое имя для нового приложения.</Description>
<Default>Themes</Default>
</Parameter>

<Parameter name="DOMAIN">
<Description>
Домен, используемый для локализации.</Description>
</Parameter>

<Property name="Subject">
<Type>%ZEN.Datatype.string</Type>
<Required>1</Required>
<Parameter name="ZENURL" value="sub"/>
</Property>

<Property name="Theme">
<Type>%ZEN.Datatype.string</Type>
<Parameter name="ZENURL" value="th"/>
</Property>

<XData name="Style">
<Description>
Этот блок Style содержит определение CSS стиля страницы.</Description>
<Data><![CDATA[
<style type="text/css">
.comboboxTextButton {
	background:rgb(245, 245, 245);
	border: none;
	color:SlateGrey;
	padding:0px;
	font-size: 13px;
}
</style>
]]></Data>
</XData>

<XData name="Contents">
<Description>
Этот XML блок описывает содержимое этой страницы.</Description>
<XMLNamespace>http://www.intersystems.com/zen</XMLNamespace>
<Data><![CDATA[
<page xmlns="http://www.intersystems.com/zen" title="New context">
<html enclosingClass="title">Editing of themes</html>
<vgroup align="center" width="20%">
<dataController id="source" modelClass="User.Theme" modelId="#(%page.Theme)#" alertOnError="true"/>
<form id="fTh" name="fTh" controllerId="source">
<fieldSet legend="Current context is:" disabled="true">
<text label="ID:" id="id" name="id" 
	dataBinding="%id" size="5" hidden="true"/>

<!-- Предмет (не разрешаем пользователю самостоятельно добавлять предметы (администратор))-->

<hgroup cellVAlign="even">
  <dataCombo id="idSub" name="idSub" disabled="false"
   dataBinding="Subject"
   comboType="button"
   buttonCaption="Lookup" 
   dropdownHeight="100px" 
   dropdownWidth="230px"
   sql="SELECT ID, Subject->Name FROM SubjectNew"
   sqlLookup="SELECT Subject->Name FROM SubjectNew WHERE ID=?"
   />
</hgroup>

</fieldSet>

<!-- Контингент студентов -->

<fieldSet id="idCon" legend="Contingent:" title="Who is this context for? (A contingent of students)" disabled="true">
  <text id="Sp" name="Sp" label="Speciality:" />
  <spacer height="5px"/>
  <text id="TE" name="TE" label="Type of Education:" />
  <spacer height="5px"/>
  <text id="YS" name="YS" label="Year of study" />
  <spacer height="5px"/>
  <text id="Cl" name="Cl"  label="Class:"
  />
</fieldSet>

<fieldSet id="idHead" legend="Please, edit the existing theme.">
<vgroup id="vgNewTheme" name="vgNewTheme" hidden="false">
 <textarea id="taTheme" name="taTheme" label="Theme" dataBinding="Name" onkeypress="zenPage.saveOnEnter();"/>
 <text id="tQ" name="tQ" label="Quantity" dataBinding="QuantitityOf" hint="* - all of the CPs will take part in student's IW"/>
 <radioSet id="rbIf" name="rbIf" disabled="true" valueList="1,0" displayList="Yes, Not" label="Completed?" dataBinding="IfAvailable" title="Тема уже готова к копированию в учебные планы каких-либо студентов?"/>
 <text id="tAuth" name="tAuth" label="Teacher" disabled="true"/>
 <radioSet id="rsCurr" name="rsCurr" valueList="1,0" displayList="Yes, Not" label="Set as the current?" title=""/>
</vgroup>
</fieldSet>
<hgroup align="right">
 <button align="right" caption="Save" onclick="zenPage.checkValues();"/>
 <button id="bCl" name="bCl"
 align="right"
 caption="Cancel"
 onclick="zenPage.gotoPage('Web.Theme.cls');"
 />
<label id="errNameIs" name="errNameIs"/>
 </hgroup>
 </form>
 </vgroup>
 
</page>
]]></Data>
</XData>

<Method name="saveForm">
<Description>
SaveForm</Description>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
  var form = zenPage.getComponentById('fTh');
  var rs=form.save();
  //alert(rs);
	if (rs!='') {
	   form.reset();
	   document.location.href ="Web.Theme.cls";
	}
]]></Implementation>
</Method>

<Method name="saveOnEnter">
<Description>
Сохраняем данные формы по нажатию на Enter находясь в контроле формы</Description>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
  if (zenEvent.keyCode == zenENTER) {
    this.checkValues();
  }
]]></Implementation>
</Method>

<Method name="checkValues">
<Description>
Проверка всех полей ввода </Description>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
  var getT =zenPage.getComponentById("taTheme").getValue();
  if (getT=='')
      { 
       alert('Invalid values!');
       return;  
      }
  this.saveForm(); 
  return;
]]></Implementation>
</Method>

<Method name="%OnAfterCreatePage">
<Description><![CDATA[
This callback is called after the server-side page 
object and all of its children are created.<br/>
Subclasses can override this to add, remove, or modify 
items within the page object model, or to provide values
for controls.]]></Description>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	s %session.Data("Teacher")=301
	// 
	if ..Theme'="" { // th - передан - редактируем тему
	  s sub=##class(User.Theme).%OpenId(..Theme).Subject
	  s auth=##class(User.Theme).%OpenId(..Theme).Author
	}
	else { // sub - передан - создаём новую тему
	  s sub=##class(User.Subject).%OpenId(..Subject)
	  s auth=##class(User.Teacher).%OpenId($Get(%session.Data("Teacher")))
	  // Установить заголов легенды Create!
	  s ..%GetComponentById("idHead").legend="Please, create a new theme."
	}
	d ..SetContingent(sub)
	d ..%SetValueById("tAuth",auth.PFullName)
  Quit $$$OK
]]></Implementation>
</Method>

<Method name="SetContingent">
<FormalSpec>sub:User.Subject</FormalSpec>
<Private>1</Private>
<Implementation><![CDATA[
  if $IsObject(sub) {
	d ..%SetValueById("Sp",sub.TypeOfSt.Spec)
	d ..%SetValueById("TE",sub.TypeOfSt.TypeOfEducation)
    d ..%SetValueById("YS",sub.TypeOfSt.YearOfStudy)
	d ..%SetValueById("Cl",sub.TypeOfSt.Class)
  }
]]></Implementation>
</Method>
</Class>


<Class name="Web.IndependentWork">
<Description>
Отображает набор заранее определённых задач конкретного студента по конкретной теме</Description>
<Super>%ZEN.Component.page</Super>
<TimeChanged>63081,60520.579287</TimeChanged>
<TimeCreated>63034,49849.843893</TimeCreated>

<Parameter name="APPLICATION">
<Description>
Class name of application this page belongs to.</Description>
<Default>Web.Pages</Default>
</Parameter>

<Parameter name="PAGENAME">
<Description>
Displayed name of this page.</Description>
<Default>IndepenentWork</Default>
</Parameter>

<Parameter name="DOMAIN">
<Description>
Domain used for localization.</Description>
</Parameter>

<Parameter name="PRIVATE">
<Default>1</Default>
</Parameter>

<Parameter name="ENCODED">
<Default>2</Default>
</Parameter>

<Property name="Student">
<Description>
Студент, чей персональный набор задач показан на этой странице</Description>
<Type>%ZEN.Datatype.integer</Type>
<InitialExpression>93</InitialExpression>
<Required>1</Required>
<Parameter name="ZENURL" value="st"/>
</Property>

<Property name="Context">
<Description>
Контекст, по которому представлен набор задач</Description>
<Type>%ZEN.Datatype.integer</Type>
<InitialExpression>59</InitialExpression>
<Required>1</Required>
<Parameter name="ZENURL" value="con"/>
</Property>

<Property name="ListOfFields">
<Description>
Список полей, в которых находится ответ студента</Description>
<Type>%String</Type>
<Internal>1</Internal>
<Collection>list</Collection>
</Property>

<XData name="Style">
<Description>
This Style block contains page-specific CSS style definitions.</Description>
<Data><![CDATA[
<style type="text/css">
</style>
]]></Data>
</XData>

<XData name="Contents">
<Description>
This XML block defines the contents of this page.</Description>
<XMLNamespace>http://www.intersystems.com/zen</XMLNamespace>
<Data><![CDATA[
<page xmlns="http://www.intersystems.com/zen"
 xmlns:Web.Components="http://www.intersystems.com/Web.Components"
 title="Indepenent work">
 
 <html enclosingClass="title">Learner's independent work</html>
 
<!-- The current learner panel -->

   <hgroup width="100%">
    <hgroup align="left">
    <image src="\CSP\user\info-edited.png" onclick="zenPage.getInfo();" title="Information" align="left"/>
    <label value="Hello, learner Mr. "/>
    <label id="lUser"/>
    </hgroup>
    <!--<timer label="Note down the time" ontimeout="zenPage.timeout(zenThis);" timeout="100000" />-->
    <hgroup align="right"><label value="Exit: "/><spacer height="5px"/><image src="\CSP\user\exit.png" onclick="zenPage.confirmLeaving();" title="Exit" align="left"/>
</hgroup>
   </hgroup>
   
<!--If the student is identified we're gonna show him/her a set of case studies like that  -->

   <vgroup align="center" hidden="false">
       <!-- Шапка для темы -->
     <hgroup enclosingClass="headerdarkSt" cellVAlign="top">
      <label value="Theme: " controlClass="title2"/>
      <spacer width="10px"/>
      <label id="cTheme" controlClass="title2"/>
      </hgroup>
      
   <!-- Шапка для протокола работы/оценки -->
     <hgroup enclosingClass="headerdark2St" cellVAlign="top">
       
       <!-- Инфо о студенте и его работе -->
       <hgroup cellVAlign="top" align="left">
        <vgroup>
         <!-- заголовок для студента -->
         <hgroup cellVAlign="top">
          <label value="Learner: " controlClass="title3bold"/>
          <spacer width="5px"/>
           <fieldSet legend="About" width="200px">
             <label id="lSt" controlClass="title3"/>
          </fieldSet>
         </hgroup>
         <!-- заголовок для данных о работе студента -->
         <hgroup>
         
          <vgroup>
           <label value="Total: " controlClass="title3bold" title="Всего задач в СРС"/>
           <spacer height="5px"/>
           <label value="Done: " controlClass="title3bold" title="Выполнено задач на данный момент"/>
           <spacer height="5px"/>
           <label value="Date: " controlClass="title3bold" title="Дата последней работы (сохранения) над темой"/>
          </vgroup>
          <spacer width="30px"/>
          <vgroup>
           <label id="lTotal" controlClass="title3"/>
           <spacer height="5px"/>
           <hgroup><label id="lDone" controlClass="title3"/><label value="%" controlClass="title3"/></hgroup>
           <spacer height="5px"/>
           <label id="LastWork" controlClass="title3"/>
          </vgroup>
         
         </hgroup>
         
         </vgroup>
         
       </hgroup>
       
       <spacer width="75px"/>
       <!-- Инфо о преподавателе и его оценки -->
       <hgroup cellVAlign="top" align="right">
        <vgroup>
       <!-- заголовок для преподавателя -->
          <hgroup cellVAlign="top">
          <label value="Teacher: " controlClass="title3bold"/>
          <spacer width="10px"/>
           <fieldSet legend="About" width="200px">
             <label id="lTeach" controlClass="title3" value="Undefined"/>
             <spacer height="5px"/>
             <label id="Dep" controlClass="title3" value=""/>
          </fieldSet>
         </hgroup>
       <!-- заголовок для данных проверочной работе преподавателя -->
       <hgroup>
         <vgroup>
           <label value="Result: " controlClass="title3bold" title="Процент верных ответов"/>
           <spacer height="5px"/>
           <label value="Mark: " controlClass="title3bold" title="Оценка"/>
           <spacer height="5px"/>
           <label value="Date: " controlClass="title3bold" title="Дата проверки"/>
         </vgroup>
         <spacer width="35px"/>
         <vgroup>
          <label id="Res" controlClass="title3" value="Undefined"/>
          <spacer height="5px"/>
          <label id="Mark" controlClass="title3" value="Undefined"/>
          <spacer height="5px"/>
          <label id="DateOfChecking" controlClass="title3" value="Undefined"/>
         </vgroup>
         </hgroup>
         </vgroup>
       </hgroup>
     </hgroup>
    <spacer height="10px"/>
      <vgroup id="ContainerOfCSs" name="ContainerOfCS" align="center">
      </vgroup>
    <hgroup>
     <button caption="Save" title="Save all your answers into our database." onclick="zenPage.confirmSaving();" hint="(Later you will be able to edit your work if need be)"/>
     <button caption="Exit" hidden="true" onclick="alert('Now we are gonna delete all the session variables and quit without saving!');"/>
    </hgroup>
   </vgroup>
</page>
]]></Data>
</XData>

<Method name="%OnAfterCreatePage">
<Description>
Отображает персональный набор задач для этого студента по этой теме</Description>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[

    // Проверить существует ли уже сгенерированный персональный набор по данной теме для этого студента или же нужно генерировать
    // Открываем фрагмент учебного плана текущего студента
    s curr=##class(User.Curriculum).StConOpen(..Student,..Context)
      if '$IsObject(curr)
        {
	      q $$$ERROR($$$GeneralError,"Unexpected error, such the student and the context is absent from the Curriculum: "_..Student_" "_..Context)
        }
      else
        {
	      // Установить заголовок контекста, студента и преподавателя
          d ..SetContext(curr)
          d ..SetStudent(curr)
          //d ..SetTeacher(curr)
	      // Нужно ли показывать сохранённые результаты?
	      s perform=0
	      s checking=0
	      // Сгенерирован ли персональный набор задач?
	      if curr.Presence=1
	        {// Уже существует персональный набор задач по данной теме для данного студента
		      // Проверена ли эта работа?
		      if curr.Status=1 {
			     // Уже проверена
			     s checking=1,perform=1
			     d ..SetTeacher(curr)
		      }
	          elseif curr.Performance>0 { 
	             // Студент уже что то сохранял
	             s perform=1
	          }
	          s list=curr.OrderOfView 
	        }
	      else
	        {// Не существует, создаём...
		       s list=##class(User.CS).Generator(curr)
	        }
         // Отображаем задачи на странице (perform=0 - ответов быть не может, perform=1 - могут быть ответы)
         d ..DisplayIW(list,perform,checking)
         }
   q $$$OK
]]></Implementation>
</Method>

<Method name="SetContext">
<Description>
Установить заголовок контекста</Description>
<FormalSpec>curr:User.Curriculum</FormalSpec>
<Private>1</Private>
<Implementation><![CDATA[
   d ..%SetValueById("cTheme",curr.Context.Name)
   q
]]></Implementation>
</Method>

<Method name="SetStudent">
<Description>
Установить имя студента</Description>
<FormalSpec>curr:User.Curriculum</FormalSpec>
<Private>1</Private>
<Implementation><![CDATA[
   d ..%SetValueById("lSt",curr.Student.PFullName), ..%SetValueById("lUser",curr.Student.PFullName)
   d ..%SetValueById("lTotal",curr.OrderOfView.Count())
   d ..%SetValueById("lDone",$FNUMBER(curr.Performance,",",2))
   if 'curr.DateOfPerform {
	  s myDate="Never"
   }
   else {
	  s myDate=curr.DateOfPerform
   }
   d ..%SetValueById("LastWork",myDate)
   q
]]></Implementation>
</Method>

<Method name="SetTeacher">
<Description>
Установить имя преподавателя и информацию о проверке если работа была уже проверена</Description>
<FormalSpec>curr:User.Curriculum</FormalSpec>
<Private>1</Private>
<Implementation><![CDATA[
   d ..%SetValueById("lTeach",curr.Teacher.PFullName)
   d ..%SetValueById("Dep",curr.Teacher.TDepartment.Name)
   d ..%SetValueById("Res",$FNUMBER(curr.Result,",",2)_"%")
   d ..%SetValueById("Mark",curr.Mark)
   d ..%SetValueById("DateOfChecking",curr.DateOfChecking)
   q
]]></Implementation>
</Method>

<Method name="DisplayIW">
<Description>
Вывод на страницу всех CSs из списка
В списке IDs всех задач, которые требуется вывести на экран
Вызов отличается в случае если список сформирован в первый раз (доп. инфо. (ответ студента) отсутствуют)
Если список уже имелся - возможно есть доп. инфо. о задаче (ответ студента)
ifPerformed - пытался ли уже студент сохранять какие-то ответы вообще - не факт что именно для этой задачи?
ifChecked - проверил ли уже преподаватель работу этого студента над этой темой?</Description>
<FormalSpec>list:%Library.ListOfDataTypes,ifPerformed:%Boolean=0,ifChecked:%Boolean=0</FormalSpec>
<Private>1</Private>
<Implementation><![CDATA[
   s group = ..%GetComponentById("ContainerOfCSs")
   if $IsObject(list) {
    f i=1:1:list.Count()
     {
	   //Добавляем новый шаблон
	   s tComp = ##class(Web.Components.Simple).%New()
	   s tComp.id="CS"_i
	   s tComp.Num=i
	   s tComp.CSId=list.GetAt(i)
	   s tComp.onChangeCustom="zenPage.calculatePercentage()"
	   // Заносим поле в список
	   d ..CopyIntoList(tComp.CSId,i)
	   // Ищем и сохраняем объект IW в свойство композита (будет лежать в скрытом поле над каждым композитом) для получения более подробной информации
	   s tComp.Info=..GetIW(list.GetAt(i))
	     if ifPerformed=1
	      {
		    // Указать, что студент уже работал (по крайней мере сохранил какой-то ответ) над этой задачей
		    s iw=##class(User.IW).%OpenId(..GetIW(list.GetAt(i)))
		      if iw.IfDone=1 s tComp.IfDone=1
	      }
	     // Указать что уже проверено!
	     if ifChecked=1 s tComp.IfEvaluated=1
	   d group.%AddChild(tComp)
     }
   }
   q
]]></Implementation>
</Method>

<Method name="GetIW">
<Description>
Принимает ID a Case Study
Возвращает ID объекта IW, содержащий доп. инфо. о работе студента над этой задачей</Description>
<FormalSpec>CS:%Integer,*targetIW:%Integer</FormalSpec>
<Private>1</Private>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
   #import User
   s st=..Student,con=..Context
   &sql(select TOP 1 IWork->ID Into :targetIW from SQLUser.CS where IWork->Student=:st and IWork->Context=:con and ID=:CS)
   if SQLCODE<0 q $$$ERROR($$$GeneralError,"Failure when executing the embeded SQL query")  
   q targetIW
]]></Implementation>
</Method>

<Method name="CopyIntoList">
<Description>
Сохранение списка полей, в которые студент будет вписывать свои ответы
myCS - ID задачи, j - номер шаблона по порядку вывода</Description>
<FormalSpec>myCS:%Integer,j:%Integer</FormalSpec>
<ZenMethod>1</ZenMethod>
<Implementation><![CDATA[
   s existCS=##class(User.CS).%OpenId(myCS)
   s myType=existCS.TypeOfCS
	 if myType=1
	    {
		  s fieldName="CS"_j_".Concept"
	    }
	 elseIf myType=2
	    {
		  s fieldName="CS"_j_".Link"
	    }
	 else
	    {
		  s nth=existCS.SNOfHSubG
		  s fieldName="CS"_j_".Relation"_nth
	    }
   d ..ListOfFields.Insert(fieldName)
   q
]]></Implementation>
</Method>

<Method name="confirmSaving">
<Description>
Подтверждение сохранения результатов СРС</Description>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
  if (confirm("Сохранить результаты?")) {
    this.SaveAnswers();
  } 
  else {
  return;
  }
]]></Implementation>
</Method>

<Method name="confirmLeaving">
<Description>
Подтверждение покидания страницы</Description>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
  if (confirm("Выйти?")) {
    zenPage.gotoPage("Web.Curriculum.cls");
  } 
  else {
  return;
  }
]]></Implementation>
</Method>

<Method name="SaveAnswers">
<Description>
Сохранение ответов студента в БД</Description>
<ReturnType>%Status</ReturnType>
<ZenMethod>1</ZenMethod>
<Implementation><![CDATA[
	s myListLength=..ListOfFields.Count()
	for i=1:1:myListLength
	{
	  s ith=..ListOfFields.GetAt(i)
	  s fb=..%GetValueById(ith)

	     // Открываем объект IW, лежит в скрытом поле над каждым шаблоном
	     s iwName="CS"_i_".IW"
	     s iw=..%GetValueById(iwName)
	     s iwObj=##class(User.IW).%OpenId(iw)
	     if fb'="" {s iwObj.IfDone=1} else {s iwObj.IfDone=0}
	     s iwObj.Feedback=fb
	     d iwObj.%Save()		   

	 }
    // Открываем фрагмент учебного плана текущего студента
    s curr=##class(User.Curriculum).StConOpen(..Student,..Context)
	// Сохраняем дату последней работы над этой темой
	s curr.DateOfPerform=$zdt($H,3)
	// Сохраняем процентное соотношение выполненных задач
	s myPercentage=..%GetValueById("lDone")
	s curr.Performance=$Double(myPercentage)
	s rs=curr.%Save()
	 if $$$ISERR(rs) q $$$ERROR($$$GeneralError,"Can't save the curriculum")
	&js<zenPage.gotoPage(#(..QuoteJS(..Link("Web.Curriculum.cls")))#);>
   q $$$OK
]]></Implementation>
</Method>

<Method name="calculatePercentage">
<Description>
На клиенте подсчитывает процент решённых задач по текущей теме в режиме он-лайн</Description>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
  var i=1;
  var mycounter=0;
  while (this.getComponentById('CS'+i+'.Container'))
   {
     y=this.getComponentById('CS'+i+'.Container').getProperty('legend')
     if (y=='Completed') mycounter=mycounter+1;
     i=i+1
   }
  var percentage=mycounter/(i-1)*100;
  var mylabel=percentage.toFixed(2); //+'('+mycounter+' out of '+i+') case studies.';
  this.getComponentById('lDone').setProperty('value',mylabel);
  return mylabel;
]]></Implementation>
</Method>

<Method name="getInfo">
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	alert(this.calculatePercentage());
	return;
]]></Implementation>
</Method>
</Class>


<Class name="Web.Menu">
<Description>
Created using the page template: Default</Description>
<Super>%ZEN.Component.page</Super>
<TimeChanged>63072,57507.888235</TimeChanged>
<TimeCreated>63072,48620.452379</TimeCreated>

<Parameter name="APPLICATION">
<Description>
Class name of application this page belongs to.</Description>
<Default>Web.Pages</Default>
</Parameter>

<Parameter name="PAGENAME">
<Description>
Displayed name of this page.</Description>
<Default>Menu</Default>
</Parameter>

<Parameter name="DOMAIN">
<Description>
Domain used for localization.</Description>
</Parameter>

<XData name="Style">
<Description>
This Style block contains page-specific CSS style definitions.</Description>
<Data><![CDATA[
<style type="text/css">

.radioSetSpan, legend{
  /*padding-top: 15px;
  margin-top: 15px;*/
  font-size: 1.1em;
}
</style>
]]></Data>
</XData>

<XData name="Contents">
<Description>
This XML block defines the contents of this page.</Description>
<XMLNamespace>http://www.intersystems.com/zen</XMLNamespace>
<Data><![CDATA[
<page xmlns="http://www.intersystems.com/zen" title="Menu">
<html enclosingClass="title">Menu</html>
<fieldSet id="" legend="Pages" align="center" width="30%">

<radioSet id="myc"
 title="Make your choice:"
 displayList="Design the etalon model from last session,Create a new context,Manage existing contexts,Check student's independent work,Edit profile,Exit"
 valueList="Web.Wizard.cls,Web.EditSubject.cls,Web.Theme.cls,Web.CurriculumTeacher.cls,Web.RegistrationMVC.cls,Close"
 titleList="Web.Wizard.cls,Web.EditSubject.cls,Web.Theme.cls,Web.CurriculumTeacher.cls,Web.RegistrationMVC.cls,Close"
 value="Web.Wizard.cls"
 layout="vertical"
 onchange="zenPage.Exit(zenThis.value);"
  />
<button caption="Go>>" onclick="zenPage.gotoPage(zen('myc').getValue())"/>
</fieldSet>
</page>
]]></Data>
</XData>

<Method name="Exit">
<FormalSpec>ifExit:%String</FormalSpec>
<ZenMethod>1</ZenMethod>
<Implementation><![CDATA[
  if ifExit="Close" {
    k %session.Data("TeacherId")
    k %session.Data("Context")
    // перезагрузить страницу
    &js<zenPage.gotoPage('Web.Verification.cls');>
  }
  q
]]></Implementation>
</Method>
</Class>


<Class name="Web.Pages">
<Description>
Web.Pages</Description>
<Super>%ZEN.application</Super>
<TimeChanged>63026,49655.700339</TimeChanged>
<TimeCreated>63012,50337.006169</TimeCreated>

<Parameter name="APPLICATIONNAME">
<Description>
This is the name of this application.</Description>
</Parameter>

<Parameter name="HOMEPAGE">
<Description>
This is the URL of the main starting page of this application.</Description>
</Parameter>

<Parameter name="CSSINCLUDES">
<Default>MyCSS.css</Default>
</Parameter>

<XData name="Style">
<Description>
This Style block contains application-wide CSS style definitions.</Description>
<Data><![CDATA[
<style type="text/css">

</style>
]]></Data>
</XData>
</Class>


<Class name="Web.RegistrationMVC">
<Description>
Created using the page template: Default</Description>
<Super>%ZEN.Component.page</Super>
<TimeChanged>63074,51568.572398</TimeChanged>
<TimeCreated>63025,42047.308665</TimeCreated>

<Parameter name="APPLICATION">
<Description>
Имя приложения, которому принадлежит эта страница.</Description>
<Default>Web.Pages</Default>
</Parameter>

<Parameter name="PAGENAME">
<Description>
Отображаемое имя для нового приложения.</Description>
<Default>Registration</Default>
</Parameter>

<Property name="Student">
<Type>%ZEN.Datatype.string</Type>
<Parameter name="ZENURL" value="st"/>
</Property>

<Parameter name="DOMAIN">
<Description>
Домен, используемый для локализации.</Description>
</Parameter>

<XData name="Style">
<Description>
Этот блок Style содержит определение CSS стиля страницы.</Description>
<Data><![CDATA[
<style type="text/css">
</style>
]]></Data>
</XData>

<XData name="Contents">
<Description>
Этот XML блок описывает содержимое этой страницы.</Description>
<XMLNamespace>http://www.intersystems.com/zen</XMLNamespace>
<Data><![CDATA[
<page xmlns="http://www.intersystems.com/zen" title="Registration">
<html enclosingClass="title">Please, fill in the following form.</html>
<dataController id="source" modelClass="User.Learner" modelId="#(%page.Student)#" alertOnError="true"/>
<form id="MyForm" autoValidate="true" layout="vertical" controllerId="source" align="center">

<text label="ID:" id="id" name="id" 
	dataBinding="%id" size="5" hidden="true"/>

<text label="Login:" id="Log" name="Log" 
	labelClass="required" required="true" size="25" 
	dataBinding="PLogin"/>

<password label="Password:" id="Pass" name="Pass" size="25" 
	dataBinding="PPassword" title="Password must be at least 8 characters."/>

<text label="Name:" id="N" name="N" size="25"
	dataBinding="PName"/>

<text label="Surname:" id="SN" name="SN" size="25" 
	dataBinding="PSurname"/>

<text label="E-mail:" id="EM" name="EM" size="25"
	dataBinding="PEmail" title="E-mail must be at gmail! It is reqired!"/>
	
<fieldSet legend="Personal Info:">

<select id="Sp" name="Sp" label="Speciality:" dataBinding="TypeOfSt.Spec" displayList="ТПКС,Фарм,Мед,Пед,Стомат,Лаб. диаг." valueList="ТПКС,Фарм,Мед,Пед,Стомат,Лаб. диаг."/>
<spacer height="5px"/>
<radioSet id="TE" name="TE" label="Type of Education:" dataBinding="TypeOfSt.TypeOfEducation" displayList="Дневное,Заочное" valueList="Дневное,Заочное"/>
<spacer height="5px"/>
<select id="YS" name="YS" label="Year of study" dataBinding="TypeOfSt.YearOfStudy" displayList="1st,2nd,3d,4th,5th,6th" valueList="1 курс,2 курс,3 курс,4 курс,5 курс,6 курс"/>
<spacer height="5px"/>
<select id="Cl" name="Cl"  label="Class:" 
	dataBinding="TypeOfSt.Class" displayList="1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25" valueList="1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25" onkeypress="zenPage.saveOnEnter();"/>
</fieldSet>

<spacer height="20"/>
<hgroup>
<button id="button" name="button" caption="Save" onclick="zenPage.saveForm();" title="Confirm"/>
<button caption="Check password" onclick="zenPage.checkPass();" hidden="true"/>
</hgroup>
</form>
</page>
]]></Data>
</XData>

<Method name="saveForm">
<Description>
SaveForm</Description>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	var pass=this.checkPass();
	if (pass!='false') {
	  var form = zenPage.getComponentById('MyForm');
	  var rs=form.save();
	  //alert(rs);
	  if (rs!='') {
	    form.reset();
	    document.location.href ="Web.Curriculum.cls";
	  }
	}
]]></Implementation>
</Method>

<Method name="saveOnEnter">
<Description>
Сохраняем данные формы по нажатию на Enter находясь в контроле формы</Description>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
    if (zenEvent.keyCode == zenENTER) {
        this.saveForm();
    }
]]></Implementation>
</Method>

<Method name="checkPass">
<Description>
Проверка длины пароля</Description>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
   var pfield=zenPage.getComponentById('Pass').value;
   if (pfield.length<6) {alert('Incorrect password'); return 'false';}
   return 'true';
]]></Implementation>
</Method>
</Class>


<Class name="Web.SupervisingWork">
<Description>
Проверочная работа преподавателя</Description>
<Super>%ZEN.Component.page</Super>
<TimeChanged>63081,61665.93622</TimeChanged>
<TimeCreated>63041,37555.707058</TimeCreated>

<Parameter name="APPLICATION">
<Description>
Class name of application this page belongs to.</Description>
<Default>Web.Pages</Default>
</Parameter>

<Parameter name="PAGENAME">
<Description>
Displayed name of this page.</Description>
<Default>SupervisingWork</Default>
</Parameter>

<Parameter name="DOMAIN">
<Description>
Domain used for localization.</Description>
</Parameter>

<UDLText name="T">
<Content><![CDATA[
// Parameter PRIVATE = 1;

]]></Content>
</UDLText>

<UDLText name="T">
<Content><![CDATA[
// Parameter ENCODED = 2;

]]></Content>
</UDLText>

<Property name="Student">
<Description>
Студент, чей персональный набор задач показан на этой странице</Description>
<Type>%ZEN.Datatype.integer</Type>
<Required>1</Required>
<Parameter name="ZENURL" value="st"/>
</Property>

<Property name="Context">
<Description>
Контекст, по которому представлен набор задач</Description>
<Type>%ZEN.Datatype.integer</Type>
<Required>1</Required>
<Parameter name="ZENURL" value="con"/>
</Property>

<XData name="Style">
<Description>
This Style block contains page-specific CSS style definitions.</Description>
<Data><![CDATA[
<style type="text/css">

</style>
]]></Data>
</XData>

<XData name="Contents">
<Description>
This XML block defines the contents of this page.</Description>
<XMLNamespace>http://www.intersystems.com/zen</XMLNamespace>
<Data><![CDATA[
<page xmlns="http://www.intersystems.com/zen"
 xmlns:Web.Components="http://www.intersystems.com/Web.Components"
 title="Supervising work">
 
 <html enclosingClass="title">Teacher's supervising work</html>
 
<!-- The current teacher's panel -->

   <hgroup width="100%">
    <hgroup align="left">
    <image src="\CSP\user\info-edited.png" onclick="zenPage.getInfo();" title="Information" align="left"/>
    <label  value="Hello, teacher Mr. "/>
    <label id="lTeacher"/>
    </hgroup>
    <hgroup align="right"><label value="Exit: "/><spacer height="5px"/><image src="\CSP\user\exit.png" title="Exit" align="left" onclick="zenPage.gotoPage('Web.CurriculumTeacher.cls')"/>
</hgroup>
   </hgroup>
   
   <vgroup align="center" width="800px">
   <!-- Шапка для темы -->
     <hgroup enclosingClass="headerdark" cellVAlign="top">
      <label value="Theme: " controlClass="title2"/>
      <spacer width="10px"/>
      <label id="cTheme" controlClass="title2"/>
      </hgroup>
      
   <!-- Шапка для протокола оценки -->
     <hgroup enclosingClass="headerdark2" cellVAlign="top" width="800px">
       
       <!-- Инфо о студенте и его работе -->
       <hgroup cellVAlign="top" align="left">
        <vgroup>
         <!-- заголовок для студента -->
         <hgroup cellVAlign="top">
          <label value="Learner: " controlClass="title3bold"/>
          <spacer width="25px"/>
           <fieldSet legend="About" width="300px">
             <label id="lSt" controlClass="title3"/>
             <spacer height="5px"/>
             <label id="Class" controlClass="title3"/>
          </fieldSet>
         </hgroup>
         <!-- заголовок для данных о работе студента -->
         <hgroup>
         
          <vgroup>
           <label value="Performance: " controlClass="title3bold" title="Процент выполнения СРС"/>
           <spacer height="5px"/>
           <label value="Date: " controlClass="title3bold" title="Дата выполнения СРС"/>
          </vgroup>
          <vgroup>
           <label id="Perf" controlClass="title3"/>
           <spacer height="5px"/>
           <label id="DateOfPerf" controlClass="title3"/>
          </vgroup>
         
         </hgroup>
         
         </vgroup>
         
       </hgroup>
       
       <spacer width="5px"/>
       
       <!-- Инфо о преподавателе и его оценки -->
       <hgroup cellVAlign="top" align="right">
        <vgroup>
       <!-- заголовок для преподавателя -->
          <hgroup cellVAlign="top">
          <label value="Teacher: " controlClass="title3bold"/>
          <spacer width="10px"/>
           <fieldSet legend="About" width="300px">
             <label id="lTeach" controlClass="title3"/>
             <spacer height="5px"/>
             <label id="Dep" controlClass="title3"/>
          </fieldSet>
         </hgroup>
       <!-- заголовок для данных проверочной работе преподавателя -->
       <hgroup>
         <vgroup>
           <label value="Result: " controlClass="title3bold" title="Процент верных ответов"/>
           <spacer height="5px"/>
           <label value="Mark: " controlClass="title3bold" title="Оценка"/>
           <spacer height="5px"/>
           <label value="Date: " controlClass="title3bold" title="Дата проверки"/>
         </vgroup>
         <spacer width="35px"/>
         <vgroup>
          <label id="Res" controlClass="title3" />
          <spacer height="5px"/>
          <label id="Mark" controlClass="title3" />
          <spacer height="5px"/>
          <label id="DateOfChecking" controlClass="title3" />
         </vgroup>
         </hgroup>
         </vgroup>
       </hgroup>
     </hgroup>
      
    <spacer height="10px"/>
      <vgroup id="ContainerOfCSs" name="ContainerOfCS" align="center">
      </vgroup>
    <hgroup>
     <button caption="Save" title="Save all your answers into our database." onclick="zenPage.confirmSaving();" hint="(Later you will be able to edit your work if need be)"/>
     <button caption="Exit" hidden="true" onclick="alert('Now we are gonna delete all the session variables and quit without saving!');"/>
    </hgroup>
   </vgroup>
</page>
]]></Data>
</XData>

<Method name="%OnAfterCreatePage">
<Description>
Отображает решённую СРС в виде персонального набора задач для текущего студента по данной теме</Description>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    // Проверить эта работа уже проверялась ранее или нет? 
    // Открываем фрагмент учебного плана текущего студента
    s curr=##class(User.Curriculum).StConOpen(..Student,..Context)
      if '$IsObject(curr)
        {
	      q $$$ERROR($$$GeneralError,"Unexpected error, such the student and the context is absent from the Curriculum: "_..Student_" "_..Context)
        }
      else
        {
	       // Установить заголовок контекста и студента и преподавателя (если работа уже проверена)
           d ..SetContext()
           d ..SetStudent(curr)
           d ..SetTeacher(curr)
	      // Студент уже работал над этой темой? Сохранял какие-л. результаты?)
	      if curr.Performance'=0 {
		      s perform=1
		     // Преподаватель уже проверял эту тему? 
	         if curr.Status=1 {s checking=1 d ..ShowInfo(curr)} else { s checking=0 }
		  }
		  else {
			 // Показать что ничего ещё не было сохранено
			 s perform=0, checking=0
		  }
           // Важно! Темы, для которых не существует OrderOfView (не сгенерировано) профильтрованы заранее!!!
          if curr.OrderOfView'=""
            {
	          s list=curr.OrderOfView
	        }
          else
            {
	          q $$$ERROR($$$GeneralError,"Unexpected error, can't decide the order of displaying the set of CSs")  
            }
           // Отображаем задачи на странице (checking=0 - ещё не проверялась, checking=1 - уже проверялась)
           d ..DisplaySW(list,perform,checking)
         }
   q $$$OK
]]></Implementation>
</Method>

<Method name="SetContext">
<Description>
Установить заголовок контекста</Description>
<Private>1</Private>
<Implementation><![CDATA[
   s context=##class(User.Theme).%OpenId(..Context)
   if $IsObject(context) {
     //d ..%SetValueById("cDep",context.Subject.Department.Name)
     //d ..%SetValueById("cSub",context.Subject.Subject.Name)
     d ..%SetValueById("cTheme",context.Name)
   }
   q
]]></Implementation>
</Method>

<Method name="SetTeacher">
<Description>
Установить имя преподавателя и данные о проверке (если уже проверялась)</Description>
<FormalSpec>curr:User.Curriculum</FormalSpec>
<Private>1</Private>
<Implementation><![CDATA[
   // Если работа уже была проверена - показать данные проверки
   // Иначе - указать что не проверено
   if curr.Status=1
    {
	  s tName=curr.Teacher.PFullName
	  s tDep=curr.Teacher.TDepartment.Name
	  s tRes=curr.Result
	  s tMark=curr.Mark
	  s tDat=curr.DateOfChecking
    }
   else
    {
	  s tName="Undefined", tDep="", tRes="Undefined", tMark="Undefined", tDat="Undefined"
    }
   d ..%SetValueById("lTeach",tName)
   d ..%SetValueById("Dep",tDep)
   d ..%SetValueById("Res",tRes)
   d ..%SetValueById("Mark",tMark)
   d ..%SetValueById("DateOfChecking",tDat)
   // устанавливаем шапку текущего (авторизованного) преподавателя
   d ..%SetValueById("lTeacher",##class(User.Teacher).%OpenId($Get(%session.Data("TeacherId"))).PFullName)
   q
]]></Implementation>
</Method>

<Method name="SetStudent">
<Description>
Установить имя студента и его реквизиты</Description>
<FormalSpec>curr:User.Curriculum</FormalSpec>
<Private>1</Private>
<Implementation><![CDATA[
   s student=##class(User.Learner).%OpenId(..Student)
   if $IsObject(student) {
     d ..%SetValueById("lSt",student.PFullName)
     s str="Группа № "_student.TypeOfSt.Class_"/"_student.TypeOfSt.YearOfStudy_"/"_student.TypeOfSt.Spec_"/"_student.TypeOfSt.TypeOfEducation
     d ..%SetValueById("Class",str)
     // Дата последней работы над темой
     d ..%SetValueById("Perf",$FNUMBER(curr.Performance,",",2)_" %")
     // Процент выполнения задач в теме
     d ..%SetValueById("DateOfPerf",curr.DateOfPerform)
   }
   q
]]></Implementation>
</Method>

<Method name="ShowInfo">
<Description>
Показать сохранённые данные предыдущей проверке</Description>
<FormalSpec>curr:User.Curriculum</FormalSpec>
<Private>1</Private>
<Implementation><![CDATA[
   if $IsObject(curr) {
     d ..%SetValueById("Teacher",curr.Teacher.PFullName)
     d ..%SetValueById("DateOfCheck",curr.DateOfChecking)
     d ..%SetValueById("Res",$FNUMBER(curr.Result,",",2)_" %")
     d ..%SetValueById("Mark",curr.Mark)
   }
   q
]]></Implementation>
</Method>

<Method name="DisplaySW">
<Description>
Вывод на страницу всех CSs из списка
В списке IDs всех задач, которые требуется вывести на экран
Вызов отличается в случае преподаватель уже проверял когда-то эту работу
ifPerformed - выполнил ли студент эту работу? Что-то сохранял?
ifChecked - проверял ли уже преподаватель работу этого студента над этой темой?</Description>
<FormalSpec>list:%Library.ListOfDataTypes,ifPerformed:%Boolean=1,ifChecked:%Boolean=0</FormalSpec>
<Private>1</Private>
<Implementation><![CDATA[
   s group = ..%GetComponentById("ContainerOfCSs")
   f i=1:1:list.Count()
     {
	   //Добавляем новый шаблон
	   s tComp = ##class(Web.Components.Evaluable).%New()
	   s tComp.id="CS"_i
	   s tComp.Num=i
	   s tComp.CSId=list.GetAt(i)
	   s tComp.onChangeCustom="alert('Evaluated');"
	   // Ищем и сохраняем объект IW в свойство композита (будет лежать в скрытом поле над каждым композитом) для получения более подробной информации
	   // Поднять данные о работе студента над этой задачей (даже пустой объект!)
	   s tComp.Info=..GetIW(list.GetAt(i))
	     if ifPerformed=0 {
		     // Делаем область для оценки Disabled (Нечего ещё оценивать)!
		     s tComp.IfDone=0
		 }
		 else {
			 s tComp.IfDone=1
		 }
	     if ifChecked=1 {
		    // Указать, что преподаватель уже проверил эту работу (а значит он проверил каждую из задач, входящих в эту СРС)
		    s tComp.IfEvaluated=1
	     }
	     else {
		    s tComp.IfEvaluated=0 
	     }
	   d group.%AddChild(tComp)
     }
   q
]]></Implementation>
</Method>

<Method name="GetIW">
<Description>
Принимает ID a Case Study
Возвращает ID объекта IW, содержащий доп. инфо. о работе студента над этой задачей</Description>
<FormalSpec>CS:%Integer,*targetIW:%Integer</FormalSpec>
<Private>1</Private>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
   #import User
   s st=..Student,con=..Context
   &sql(select TOP 1 IWork->ID Into :targetIW from SQLUser.CS where IWork->Student=:st and IWork->Context=:con and ID=:CS)
   if SQLCODE<0 q $$$ERROR($$$GeneralError,"Failure when executing the embeded SQL query")  
   q targetIW
]]></Implementation>
</Method>

<Method name="SaveResults">
<Description>
Сохранение результата проверки СРС студента в БД</Description>
<ReturnType>%Status</ReturnType>
<ZenMethod>1</ZenMethod>
<Implementation><![CDATA[
 // Счётчик полей
 s i=1
 // Счётчик верных ответов
 s r=0
 // проход по всем полям для оценки
 while (..%GetComponentById("CS"_i_".rsMark")) //s i=0, $I(i)
   {
	 s rs=..%GetValueById("CS"_i_".rsMark")
	  // Открываем объект IW, лежит в скрытом поле над каждым шаблоном
	  s iwName="CS"_i_".IW"
	  s iw=..%GetValueById(iwName)
	  s iwObj=##class(User.IW).%OpenId(iw)
	  if rs=-1 {s iwObj.CSstatus=0} else {s iwObj.CSstatus=1}
	  if (rs=1)||(rs=0) s iwObj.Mark=rs
	  d iwObj.%Save()
	  if rs=1 s r=r+1
	  s i=i+1 
   }
    // Вычисляем процент верных ответов
    s percentage=r/(i-1)*100
    // Открываем фрагмент учебного плана текущего студента и вносим туда изменения
    s curr=##class(User.Curriculum).StConOpen(..Student,..Context)
    // Меняем статус на "Проверено"
    s curr.Status=1
    s curr.Result=$Double(percentage)
	// Сохраняем дату проверки темы
	s curr.DateOfChecking=$zdt($H,3)
	// Сохраняем кем проверено
	s curr.Teacher=##class(User.Teacher).%OpenId($Get(%session.Data("TeacherId")))
	s rs=curr.%Save()
	 if $$$ISERR(rs) q $$$ERROR($$$GeneralError,"Can't save the curriculum")
	 	&js<zenPage.gotoPage(#(..QuoteJS(..Link("Web.CurriculumTeacher.cls")))#);>
   q $$$OK
]]></Implementation>
</Method>

<Method name="calculatePercentage">
<Description>
На клиенте подсчитывает процент решённых задач по текущей теме в режиме он-лайн</Description>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
  var i=1;
  var mycounter=0;
  while (this.getComponentById('CS'+i+'.Container'))
   {
     y=this.getComponentById('CS'+i+'.Container').getProperty('legend')
     if (y=='Completed') mycounter=mycounter+1;
     i=i+1
   }
  var percentage=mycounter/i*100;
  var mylabel=percentage.toFixed(2)+'%'+'('+mycounter+' out of '+i+') case studies.';
  this.getComponentById('Percentage').setProperty('value',mylabel);
  return mylabel;
]]></Implementation>
</Method>

<Method name="getInfo">
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	alert(this.calculatePercentage());
	return;
]]></Implementation>
</Method>

<Method name="confirmSaving">
<Description>
Подтверждение сохранения результатов СРС</Description>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
  if (confirm("Сохранить результаты?")) {
    this.SaveResults();
  } 
  else {
  return;
  }
]]></Implementation>
</Method>
</Class>


<Class name="Web.TeacherProfile">
<Description>
Created using the page template: Default</Description>
<Super>%ZEN.Component.page</Super>
<TimeChanged>63072,51169.060387</TimeChanged>
<TimeCreated>63072,51169.060387</TimeCreated>

<Parameter name="APPLICATION">
<Description>
Class name of application this page belongs to.</Description>
<Default>Web.Pages</Default>
</Parameter>

<Parameter name="PAGENAME">
<Description>
Displayed name of this page.</Description>
<Default>Teacher Profile</Default>
</Parameter>

<Parameter name="DOMAIN">
<Description>
Domain used for localization.</Description>
</Parameter>

<XData name="Style">
<Description>
This Style block contains page-specific CSS style definitions.</Description>
<Data><![CDATA[
<style type="text/css">
</style>
]]></Data>
</XData>

<XData name="Contents">
<Description>
This XML block defines the contents of this page.</Description>
<XMLNamespace>http://www.intersystems.com/zen</XMLNamespace>
<Data><![CDATA[
<page xmlns="http://www.intersystems.com/zen" title="Profile">
<html enclosingClass="title">Profile. (To be done...)</html>

</page>
]]></Data>
</XData>
</Class>


<Class name="Web.Tests.CPMVC">
<Description>
Created using the page template: Default</Description>
<Super>%ZEN.Component.page</Super>
<TimeChanged>63053,53013.993378</TimeChanged>
<TimeCreated>63053,47341.030417</TimeCreated>

<Parameter name="APPLICATION">
<Description>
Class name of application this page belongs to.</Description>
<Default>Web.Pages</Default>
</Parameter>

<Parameter name="PAGENAME">
<Description>
Displayed name of this page.</Description>
</Parameter>

<Parameter name="DOMAIN">
<Description>
Domain used for localization.</Description>
</Parameter>

<XData name="Style">
<Description>
This Style block contains page-specific CSS style definitions.</Description>
<Data><![CDATA[
<style type="text/css">
</style>
]]></Data>
</XData>

<XData name="Contents">
<Description>
This XML block defines the contents of this page.</Description>
<XMLNamespace>http://www.intersystems.com/zen</XMLNamespace>
<Data><![CDATA[
<page xmlns="http://www.intersystems.com/zen" xmlns:Web.Components="http://www.intersystems.com/Web.Components"
>
<dataController id="source" modelClass="User.CPTest" modelId="1" alertOnError="true"/>
<form id="fCon" name="fCon" controllerId="source">
<fieldSet legend="CP">
<text label="ID:" id="id" name="id" 
	dataBinding="%id" size="5" hidden="false"/>
<hgroup>
<text id="Conc" name="Conc" label="Concept" size="35" 
  dataBinding="Concept"
  />
  <dataCombo id="Link" name="Link"
   dataBinding="Link" 
   label="Link" 
   comboType="button" buttonCaption="Lookup" 
   size="25"
   dropdownHeight="100px" 
   dropdownWidth="230px"
   sql="SELECT ID, Name FROM Semantics ORDER BY Name"
   sqlLookup="SELECT Name FROM Semantics WHERE ID=?"
  />
<textarea id="CSub" name="CSub" dataBinding="Relations"/>
</hgroup>
</fieldSet>


 </form>
</page>
]]></Data>
</XData>
</Class>


<Class name="Web.Tests.TComponent">
<Description>
Created using the page template: Default</Description>
<Super>%ZEN.Component.page</Super>
<TimeChanged>63055,39569.101153</TimeChanged>
<TimeCreated>63020,31906.28995</TimeCreated>

<Parameter name="APPLICATION">
<Description>
Имя приложения, которому принадлежит эта страница.</Description>
<Default>Web.Pages</Default>
</Parameter>

<Parameter name="PAGENAME">
<Description>
Отображаемое имя для нового приложения.</Description>
</Parameter>

<Parameter name="DOMAIN">
<Description>
Домен, используемый для локализации.</Description>
</Parameter>

<XData name="Style">
<Description>
Этот блок Style содержит определение CSS стиля страницы.</Description>
<Data><![CDATA[
<style type="text/css">
</style>
]]></Data>
</XData>

<XData name="Contents">
<Description>
Этот XML блок описывает содержимое этой страницы.</Description>
<XMLNamespace>http://www.intersystems.com/zen</XMLNamespace>
<Data><![CDATA[
<page xmlns="http://www.intersystems.com/zen" title="Tests" dragAndDrop="true" xmlns:Web.Components="http://www.intersystems.com/Web.Components">
<vgroup id="Holder">
<Web.Components:EditableNew id="S1" name="S1" Current="3"/>
</vgroup>
<button caption="Remove" onclick="zenPage.RemoveChange();"/>
<button caption="Add" onclick="zenPage.AddChange();"/>
<button caption="jsChange" onclick="zenPage.jsChange();"/>
<button caption="Refresh" onclick="zenPage.getV();"/>

</page>
]]></Data>
</XData>

<Method name="RemoveChange">
<ZenMethod>1</ZenMethod>
<Implementation><![CDATA[
  //s ..%GetComponentById("S1").Current=10
  //&js<alert('#(x)#');>
  //d ..%GetComponentById("S1").SetCurrent(10)
  d ..%GetComponentById("Holder").%RemoveChild(..%GetComponentById("S1"))
]]></Implementation>
</Method>

<Method name="AddChange">
<ZenMethod>1</ZenMethod>
<Implementation><![CDATA[
  //s ..%GetComponentById("S1").Current=10
  //&js<alert('#(x)#');>
  //d ..%GetComponentById("S1").SetCurrent(10)
  s child=##class(Web.Components.EditableNew).%New()
  s child.id="S1"
  s child.Current=10
  d ..%GetComponentById("Holder").%AddChild(child)
]]></Implementation>
</Method>

<Method name="jsChange">
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
  //s ..%GetComponentById("S1.sCurr").onclick=""
  //s ..%GetComponentById("S1").Current=3
  zenPage.getComponentById('S1').setProperty('Current',10) //Current=5
  zenPage.getComponentById('S1').refreshContents()
]]></Implementation>
</Method>

<Method name="getV">
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
   //for (var i = 1; i <= 10; i++)  {
      //alert(zenPage.getComponentById('S1.Lex'+i).getProperty('id'));
      element = zenPage.getComponentById('S1.Cholder');

  if (element)
  {
    alert('Есть!');
  }
  else
  {
    alert('Объекта нет!');
  }
   //}
]]></Implementation>
</Method>
</Class>


<Class name="Web.Tests.TTemplate">
<Description>
Created using the page template: Default</Description>
<Super>Web.WebTemplate</Super>
<TimeChanged>63022,52973.662396</TimeChanged>
<TimeCreated>63022,49796.906515</TimeCreated>

<Parameter name="APPLICATION">
<Description>
Class name of application this page belongs to.</Description>
<Default>Web.Pages</Default>
</Parameter>

<Parameter name="PAGENAME">
<Description>
Displayed name of this page.</Description>
</Parameter>

<Parameter name="DOMAIN">
<Description>
Domain used for localization.</Description>
</Parameter>

<XData name="Style">
<Description>
This Style block contains page-specific CSS style definitions.</Description>
<Data><![CDATA[
<style type="text/css">
</style>
]]></Data>
</XData>

<XData name="testPane">
<Data><![CDATA[
<pane align="center">
<vgroup align="center">
<label value="Hello!"/>
</vgroup>
</pane>
]]></Data>
</XData>
</Class>


<Class name="Web.Theme">
<Description>
Таблица существующих контекстов.
Установка текущего контекста.</Description>
<Super>%ZEN.Component.page</Super>
<TimeChanged>63081,49798.66766</TimeChanged>
<TimeCreated>62858,46470.797221</TimeCreated>

<Parameter name="APPLICATION">
<Description>
Имя приложения, которому принадлежит эта страница.</Description>
<Default>Web.Pages</Default>
</Parameter>

<Parameter name="PAGENAME">
<Description>
Отображаемое имя для нового приложения.</Description>
<Default>Theme</Default>
</Parameter>

<Parameter name="DOMAIN">
<Description>
Домен, используемый для локализации.</Description>
</Parameter>

<XData name="Style">
<Description>
Этот блок Style содержит определение CSS стиля страницы.</Description>
<Data><![CDATA[
<style type="text/css">
.comboboxTextButton {
	background:rgb(245, 245, 245);
	border: none;
	color:SlateGrey;
	padding:0px;
	font-size: 13px;
}
</style>
]]></Data>
</XData>

<XData name="Contents">
<Description>
Этот XML блок описывает содержимое этой страницы.</Description>
<XMLNamespace>http://www.intersystems.com/zen</XMLNamespace>
<Data><![CDATA[
<page xmlns="http://www.intersystems.com/zen"
 title="Contexts" width="100%">
<html enclosingClass="title">Context manager</html>
<hgroup cellVAlign="top" width="100%">
<vgroup width="50%">
<tablePane 
tableName="SubjectNew"
id="tpContext"
maxRows="100000"
headerLayout="filtersOnTop" 
fixedHeaders="true"
pageSize="10" 
showQuery="false"
useSnapshot="1"
showZebra="true"
showRowSelector="true" rowSelect="true"
valueColumn="ID" 
useKeys="false"
caption="Please, select a context at first."
nowrap="false" 
align="left"
width="100%"
ondblclick="zenPage.saveCookie(zenThis.getProperty('currPage'),zenThis.getProperty('selectedIndex'),zenThis.getProperty('value'));"
>
<column id="idContext" colName="ID" hidden="true" width=""/>

<column id="idSbj"
       colName="Subject->Name as Subjects"
       header="Subject"
       filterType="query"
       filterQuery="select Name from Subject"
        />
        
<column id="idDep"
       colName="Department"
       colExpression="Department->Name"
       header="Department"
       filterType="query"
       filterQuery="select Name from DepartmentNew"
        />

<column id="idSpec"
       colName="TypeOfSt_Spec"
       header="Spec"
       filterType="text"
       filterOp="["
        />

<column id="idType"
       colName="TypeOfSt_TypeOfEducation"
       header="Type"
       filterType="enum"
       filterEnum="*,Дневное,Заочное"
       filterOp="=" 
       filterEnumDisplay="*,Дневное,Заочное"
        />
        
<column id="idYear"
       colName="TypeOfSt_YearOfStudy"
       header="Year"
       filterType="enum"
       filterEnum="1 курс,2 курс,3 курс,4 курс,5 курс,6 курс"
       filterOp="=" 
       filterEnumDisplay="1,2,3,4,5,6"
        />
        
<column id="idClass"
       colName="TypeOfSt_Class"
       header="Class"
       filterType="enum"
       filterEnum="*,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15"
       filterOp="=" 
       filterEnumDisplay="*,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15"
        />
       
<column OnDrawCell="Calculation" header="Themes"
        width="" cellTitle="How many themes does the context contain?"      
        style="text-align: center;"
        /> 
        
<column OnDrawCell="MakeEdit" header="Edit"
        />

<condition id="cColour"
        colName="ID"
        predicate="EQ"
        value=""
         rowStyle="background: plum;"/>
         
</tablePane>
<hgroup>
<button caption="New context" onclick="document.location.href ='Web.EditSubject.cls';"/>
<button caption="Test" onclick="zenPage.getCookie('PageContext');" hidden="true"/>
</hgroup>
<tableNavigatorBar showPageSize="true" tablePaneId="tpContext" maxButtons="10"/>

</vgroup>
<vgroup width="100%">
<tablePane
tableName="ThemeNew" 
id="tpTheme"
maxRows="100000"
headerLayout="filtersOnTop" 
fixedHeaders="true"
pageSize="10" 
showQuery="false"
useSnapshot="1"
showZebra="true"
showRowSelector="true"
valueColumn="ID" 
useKeys="false"
caption="Here you can select the current theme."
nowrap="false" 
align="left" width="100%"
multiSelect="false" 
dragEnabled="true" 
dropEnabled="true"
onmultiselect=""
ondblclick="alert(zenThis.value);"
>
<column id="idTheme" colName="ID" hidden="true" width=""/>

<column id="idName"
       colName="Name as Theme"
       header="Theme"
       filterType="text"
       filterOp="%STARTSWITH"
        />
        
<column hidden="true"
       id="idSubj2"
       colName="Subject"
        />

<column id="idAuthor"
       colName="Author-&gt;PFullName as Teacher"
       header="Teacher"
       filterType="query"
       filterQuery="select distinct PFullName from Teacher"
        />
        
<column id="idQuant"
       colName="QuantitityOf"
       header="Quantitity"
       style="text-align:center;"
        />
        
<column id="idDone"
       colName="IfDone"
       header="Completed?"
       style="text-align:center;"
       title="Have been all the CP of the theme and all the CS flowing from them created?"
       colExpression="CASE WHEN IfDone=1 THEN 'Yes' ELSE 'Not' END"
        />
                
<column id="idAv"
       colName="IfAvailable"
       header="Available?"
       style="text-align:center;"
       title="Is the theme ready to be available for students?"
       colExpression="CASE WHEN IfAvailable=1 THEN 'Yes' ELSE 'Not' END"
        />

<column OnDrawCell="Calculation2" header="CPs"
        width="" cellTitle="How many CPs does the theme contain?"      
        style="text-align: center;"
        />
<column OnDrawCell="CalculateStudents" header="Students"
        width="" cellTitle="How many students do study the theme?"      
        style="text-align: center;"
        />
<column OnDrawCell="MakeCurrent" header="Set"
        width="" cellTitle="Set as the current context"      
        style="text-align: center;"
        />  
<column OnDrawCell="MakeEdit2" header="Edit"
/>   
         
<condition id="cColour2"
        colName="ID"
        predicate="EQ"
        value="#(%session.Context)#"
         rowStyle="background: plum;"/>
</tablePane>
<hgroup>
<button caption="New theme" onclick="zenPage.newTheme();" title="Jump onto a page where you can a add new theme."/>
<button caption="Reset" onclick="zenPage.KillSession();" title="Уничтожить сессионные переменные и перезагрузить страницу."/>
</hgroup>
<tableNavigatorBar showPageSize="true" tablePaneId="tpTheme" maxButtons="10"/>
</vgroup>
</hgroup>
</page>
]]></Data>
</XData>

<Method name="saveCookie">
<Description>
Занести текущее значение страницы и выделенной строки в куки</Description>
<FormalSpec>page,row,value</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
   zenPage.setCookie('PageContext',page);
   zenPage.setCookie('Row',row);
   // Обновляем фильтра связанной таблицы
   zenPage.setTheme(value);
]]></Implementation>
</Method>

<Method name="setCookie">
<FormalSpec>name,value</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
   // Храним 30 дней с момента их установки
   var date = new Date;
   date.setDate( date.getDate() + 30 );
   document.cookie = name+'='+value+'; expires='+date;
]]></Implementation>
</Method>

<Method name="getCookie">
<Description>
Извлекает куки - ничего не писал - копипаст из исходников.</Description>
<FormalSpec>name</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
  var cookie = " " + document.cookie;
  var search = " " + name + "=";
  var setStr = null;
  var offset = 0;
  var end = 0;
	if (cookie.length > 0) {
	  offset = cookie.indexOf(search);
		if (offset != -1) {
		  offset += search.length;
		  end = cookie.indexOf(";", offset)
			if (end == -1) {
				end = cookie.length;
			}
			setStr = unescape(cookie.substring(offset, end));
		}
	}
  //alert(setStr);
  return(setStr);
]]></Implementation>
</Method>

<Method name="getRows">
<FormalSpec>page,row</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
  var table=zen('tpContext');
  table.setProperty('currPage',page);
  // table.setProperty('selectedIndex',row);
  // Иначе не выделяет строку!
  var action = new Function("zen('tpContext').setProperty('selectedIndex','"+row+"' );"); 
    zenSetDeferredAction(action,200);
]]></Implementation>
</Method>

<Method name="onloadHandler">
<Description>
This client event, if present, is fired when the page is loaded.</Description>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
   // Получаем значние Row из куки
   var page=zenPage.getCookie('PageContext');
   var row=zenPage.getCookie('Row');
   if (page!=null&&row!=null) {
	  zenPage.getRows(page,row);
      // Меняем фильтр в связанной таблице Theme и обновляем таблицу Theme
      zenPage.setTheme(zen('tpContext').getRowData(row).ID);
      // Дальше проделать тоже с таблицей Theme для выделение запомненного в куках row
   }
]]></Implementation>
</Method>

<Method name="Calculation">
<Description>
Рассчитываем текущее число тем в предмете</Description>
<FormalSpec>pTable:%ZEN.Component.tablePane,pName:%String,pSeed:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
  #import User
  s subj=%query("ID")
  &sql(select Count(ID) as n into:n from ThemeNew where Subject=:subj)
  &html<#(n)#>
 Quit $$$OK
]]></Implementation>
</Method>

<Method name="Calculation2">
<Description>
Рассчитываем текущее число КП в данной теме</Description>
<FormalSpec>pTable:%ZEN.Component.tablePane,pName:%String,pSeed:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
  #import User
  s th=%query("ID")
  &sql(select Count(RM->ID) Into :n from CP where RM->Context=:th)
  &html<#(n)#>
 Quit $$$OK
]]></Implementation>
</Method>

<Method name="CalculateStudents">
<FormalSpec>pTable:%ZEN.Component.tablePane,pName:%String,pSeed:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
  #import User
  s th=%query("ID")
  &sql(select Count(Student) Into :n from Curriculum where Context=:th)
  &html<#(n)#>
 Quit $$$OK
]]></Implementation>
</Method>

<Method name="Edit">
<ClassMethod>1</ClassMethod>
<FormalSpec>gSubj:%Integer</FormalSpec>
<ZenMethod>1</ZenMethod>
<Implementation><![CDATA[
  s query("sub")=gSubj
  &js<zenPage.gotoPage(#(..QuoteJS(..Link("Web.EditSubject.cls",.query)))#);>
]]></Implementation>
</Method>

<Method name="EditTheme">
<ClassMethod>1</ClassMethod>
<FormalSpec>gSubj:%Integer</FormalSpec>
<ZenMethod>1</ZenMethod>
<Implementation><![CDATA[
  s query("sub")=gSubj
  &js<zenPage.gotoPage(#(..QuoteJS(..Link("Web.EditTheme.cls",.query)))#);>
]]></Implementation>
</Method>

<Method name="MakeEdit">
<ClassMethod>1</ClassMethod>
<FormalSpec>pTable:%ZEN.Component.tablePane,pName:%String,pSeed:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 &html<<a href="javascript:zenPage.editing('#(%query("ID"))#');"><img src="/CSP/user/edit.png" border="0" alt="Edit"></a>>
 q $$$OK
]]></Implementation>
</Method>

<Method name="MakeEdit2">
<ClassMethod>1</ClassMethod>
<FormalSpec>pTable:%ZEN.Component.tablePane,pName:%String,pSeed:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 &html<<a href="javascript:zenPage.editing2('#(%query("ID"))#');"><img src="/CSP/user/edit.png" border="0" alt="Edit"></a>>
 q $$$OK
]]></Implementation>
</Method>

<Method name="editing">
<FormalSpec>idSub</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
  if (confirm('Edit?')) 
	{
      zenPage.gotoPage('Web.EditSubject.cls?sub='+idSub);
	}
  return;
]]></Implementation>
</Method>

<Method name="editing2">
<FormalSpec>idTh</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
  if (confirm('Edit?')) 
	{
      zenPage.gotoPage('Web.EditTheme.cls?th='+idTh);
	}
  return;
]]></Implementation>
</Method>

<Method name="MakeCurrent">
<FormalSpec>pTable:%ZEN.Component.tablePane,pName:%String,pSeed:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	 if $Get(%session.Data("Context"))
	  {
	   if %query("ID")=%session.Data("Context")
	    { // Является установленным как текущий по умолчанию
	     // Ссылка на страницу редактирования эталонной модели
	     &html<<a href="Web.Wizard.cls" title="Edit the Etalon Model">Start</a>>
	    }
	   else
	    {
	     // Не является установленным как текущий по умолчанию
	     // Кнопка (ссылка) для установки как текущий.
	     &html<<input type="button" caption="Set" value="Set" onclick="zenPage.SetAsCurrent('#(%query("ID"))#');">>
	    }
	  }
	 else
	  {  // Сессия закрыта. Кнопка (ссылка) для установки как текущий.
		 &html<<input type="button" caption="Set" value="Set" onclick="zenPage.SetAsCurrent('#(%query("ID"))#');">>
	  }
 Quit $$$OK
]]></Implementation>
</Method>

<Method name="SetAsCurrent">
<Description>
Установка текущего контекста</Description>
<FormalSpec>id:%Integer</FormalSpec>
<ZenMethod>1</ZenMethod>
<Implementation><![CDATA[
  s %session.Data("Context")=id
  s %session.AppTimeout = 0
  // Сохранить текущий контекст как последний с которым работал данный преподаватель
  s teacher=..GetObject("User.Teacher","TeacherId"), theme=..GetObject("User.Theme","Context")
  d teacher.ChangeCurrentTheme(theme)
  // Обновляем таблицу и по требованию переходим на страницу создания эталонной модели
   &js<
      if (confirm("Would you like to redirect to the page to edit the etalon model in this context?"))
        {// Переходим на страницу создания эталонной модели
	      document.location.href ="Web.Wizard.cls";  
        }
      else
        {
	      zenPage.getComponentById('tpTheme').refreshContents();
	      alert("We've set a new context as current");  
        }
	  >
   q $$$OK
]]></Implementation>
</Method>

<Method name="GetObject">
<ClassMethod>1</ClassMethod>
<FormalSpec>classname:%String,sessionVar:%String</FormalSpec>
<ReturnType>%Persistent</ReturnType>
<Implementation><![CDATA[  q $CLASSMETHOD(classname, "%OpenId",$Get(%session.Data(sessionVar)))
]]></Implementation>
</Method>

<Method name="setTheme">
<Description>
Update table to new filter value </Description>
<FormalSpec>value</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
   var table = zen('tpTheme'); 
   var column = zen('idSubj2'); 
   // update filter value and re-execute query 
   column.setProperty('filterValue',value); 
   // 'true' means do not change current page for table 
   table.executeQuery(true);
]]></Implementation>
</Method>

<Method name="getInfo">
<Description>
Update table to new filter value </Description>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
  var tp=zen('idSubj2')
  alert('Filter value= '+tp.getProperty('filterValue'));
]]></Implementation>
</Method>

<Method name="newTheme">
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
  var sub=zenPage.getComponentById('idSubj2').getProperty('filterValue')
  if (sub!='') {
    zenPage.gotoPage('Web.EditTheme.cls?sub='+sub);
  }
  else {
	alert('Choose the subject at first by doubleclicking on a right table row!');
  }
]]></Implementation>
</Method>

<Method name="KillSession">
<Description>
Очищает значение текущего контекста</Description>
<ZenMethod>1</ZenMethod>
<Implementation><![CDATA[
  //s %session.EndSession=1
  k %session.Data("Context")
  &js<location.reload();>
  q
]]></Implementation>
</Method>

<Method name="%OnAfterCreatePage">
<Description>
Установка текущего контекста
%session.Data("Context") - ID of Theme
Контекст может быть прикреплён к текущему преподавателю!</Description>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
  //s %session.Data("TeacherId")=301
  // Установить значения текущего контекста (если определено для преподавателя!)
  // Проверить был ли уже установлен текущий контекст
    /*if ($Get(%session.Data("Context"))'="")
     {
       // Установить селектор на том значении, который есть текущим контекстом
       s th=##class(User.Theme).%OpenId($Get(%session.Data("Context")))
       if $IsObject(th) {
	       s sub=th.Subject.%Id()
	       // Устанавливаем фильтр в таблице тем
	       s ..%GetComponentById("idSubj2").filterValue=sub
	       // Делаем selected значение предмета, к которому относится данная тема
	       s ..%GetComponentById("tpContext").value=sub
	       // Фильтр по кафедре откуда преподаватель
	       //s ..%GetComponentById("idDep").filterValue="Каф. мед. и фарм. инф."
       }
     }*/
  Quit $$$OK
]]></Implementation>
</Method>
</Class>


<Class name="Web.Verification">
<Description>
Created using the page template: Default</Description>
<Super>%ZEN.Component.page</Super>
<TimeChanged>63072,57403.45479</TimeChanged>
<TimeCreated>62812,35959.916531</TimeCreated>

<Parameter name="APPLICATION">
<Description>
Имя приложения, которому принадлежит эта страница.</Description>
<Default>Web.Pages</Default>
</Parameter>

<Parameter name="PAGENAME">
<Description>
Отображаемое имя для нового приложения.</Description>
<Default>Verification</Default>
</Parameter>

<Parameter name="DOMAIN">
<Description>
Домен, используемый для локализации.</Description>
</Parameter>

<XData name="Style">
<Description>
Этот блок Style содержит определение CSS стиля страницы.</Description>
<Data><![CDATA[
<style type="text/css">
.author {
	border: 1px solid rgb(192,192,192);
	margin: 0px;
	padding: 0px;
}
</style>
]]></Data>
</XData>

<XData name="Contents">
<Description>
Этот XML блок описывает содержимое этой страницы.</Description>
<XMLNamespace>http://www.intersystems.com/zen</XMLNamespace>
<Data><![CDATA[
<page xmlns="http://www.intersystems.com/zen" title="Verification">
<html enclosingClass="title">Please, enter the system.</html>
<!--First off, we should show the registration form to any user. -->

<vgroup align="center" cellStyle="" groupClass="author">
<form id="loginForm">
<hgroup align="right"><label value="Login"/><text id="tLogin" name="tLogin"/></hgroup>
<hgroup align="right"><label value="Password"/><password id="tPassword" name="tPassword" onkeypress="zenPage.enterOnEnter();"/></hgroup>
<label id="tError" name="tError" align="right"/>
<button align="right" caption="Enter" onclick="zenPage.CheckValue();"/>
</form>
</vgroup>
<link align="center" href="Web.RegistrationMVC.cls" aux="" caption="Registration"/>	
</page>
]]></Data>
</XData>

<Method name="UserVerification">
<Description>
Проверка существования пользователя в базе данных пользователей (таблицы студентов и преподавателей)
Кто пришёл студент или преподаватель.
1)если студент - тогда открываем ему модель студента с данными о его работах - Curriculum.cls
2)если преподаватель - открываем ему страницу для управления СРС его студентов - CurriculumTeacher.cls</Description>
<FormalSpec>login:%String,pass:%String</FormalSpec>
<ZenMethod>1</ZenMethod>
<Implementation><![CDATA[
	s ifPersonExist=##class(User.Person).IfExist(login)
	// Проверяем существует ли такой пользователь
	if ifPersonExist=1
	  {
	    s myId=##class(User.Person).GetPerson(login)
	    s person=##class(User.Person).%OpenId(myId)
	    // проверяем верный ли пароль?
	    if person.IsPasswordCorrect(pass)=1 
	      {
		    s personType=person.%ClassName()
	          if personType="Learner"
	            {
		          s %session.Data("LearnerId")=myId
		          s timeAllocated=3600
		          &js<document.location.href ="Web.Curriculum.cls";>
	            }
	          else //personType="Teacher"
	            {
		          s %session.Data("TeacherId")=myId
		          // Если какую то эталонную модель разрабатывал в прошлый сеанс - продолжить с него
		          if person.CurrentTheme {
			         s %session.Data("Context")=person.CurrentTheme.%Id()
		          }
                  // Меню работы преподавателя
			      &js<document.location.href ="Web.Menu.cls";>
		          s timeAllocated=10000
	            }
	        s %session.AppTimeout = timeAllocated
		  }
		else
		  {
			 &js<alert('Wrong password.');>
		  }

	  }
	else
	  {
		// Не существует
		&js<alert('Such the user does not exist yet. Try again.');
		    document.location.href ="Web.Verification.cls";>
	  }
]]></Implementation>
</Method>

<Method name="CheckValue">
<Description>
Проверка всех полей ввода </Description>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
  var getL =zenPage.getComponentById("tLogin").getValue();
  var getP =zenPage.getComponentById("tPassword").getValue();
  if (getL==''||getP=='')
      { 
       alert('Invalid values!');
       return 0;  
      }
  this.UserVerification(getL,getP); 
  return 1;
]]></Implementation>
</Method>

<Method name="enterOnEnter">
<Description>
Сохраняем данные формы по нажатию на Enter находясь в контроле формы</Description>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
    if (zenEvent.keyCode == zenENTER) {
        this.CheckValue();
    }
]]></Implementation>
</Method>
</Class>


<Class name="Web.WebTemplate">
<Description>
Created using the page template: Default</Description>
<Abstract>1</Abstract>
<Super>%ZEN.Component.page</Super>
<TimeChanged>63022,52548.564218</TimeChanged>
<TimeCreated>63022,48219.617231</TimeCreated>

<Parameter name="APPLICATION">
<Description>
Class name of application this page belongs to.</Description>
<Default>Web.Pages</Default>
</Parameter>

<Parameter name="PAGENAME">
<Description>
Displayed name of this page.</Description>
</Parameter>

<Parameter name="DOMAIN">
<Description>
Domain used for localization.</Description>
</Parameter>

<XData name="Style">
<Description>
This Style block contains page-specific CSS style definitions.</Description>
<Data><![CDATA[
<style type="text/css">
</style>
]]></Data>
</XData>

<XData name="Contents">
<Description>
This XML block defines the contents of this page.</Description>
<XMLNamespace>http://www.intersystems.com/zen</XMLNamespace>
<Data><![CDATA[
<page xmlns="http://www.intersystems.com/zen" xmlns:Web.Components="http://www.intersystems.com/Web.Components"
 title="Teaching System">

<pane paneName="iwPane"/>
<pane paneName="testPane"/>
<!-- MySign -->

<hgroup cellVAlign="bottom" align="right">
<vgroup>
<label value="Developed at ZSMU, designed by Popov A."/>
<label value="E-mail: popov@zsmu.zp.ua"/>
</vgroup>
</hgroup>



</page>
]]></Data>
</XData>
</Class>


<Class name="Web.Wizard">
<Description>
This page helps you to create a new set of CP-based case studies</Description>
<Super>%ZEN.Component.page</Super>
<TimeChanged>63081,55820.229281</TimeChanged>
<TimeCreated>62812,35525.466231</TimeCreated>

<Parameter name="APPLICATION">
<Default>Web.Pages</Default>
</Parameter>

<Parameter name="PAGENAME">
<Description>
Имя приложения, которому принадлежит эта страница.
Отображаемое имя для нового приложения.</Description>
<Default>Wizard</Default>
</Parameter>

<Parameter name="DOMAIN">
<Description>
Домен, используемый для локализации.</Description>
</Parameter>

<XData name="Style">
<Description>
Этот блок Style содержит определение CSS стиля страницы.</Description>
<Data><![CDATA[
<style type="text/css">

 #table { 
    border: 2px solid #ccc;
    height:900px;
   }
 #frame { 
    border: 2px solid #ccc;
    padding: 1px;
    height:900px;
   }
  .bAdd input {
	background:rgb(245, 245, 245);
	border: none;
	color:SlateGrey;
	padding:1px;
	padding-top:3px;
	padding-bottom:3px;
	font-size: 13px;
	margin-right: 10px;
    }
  .bMove input {
	background:rgb(245, 245, 245);
	border: none;
	color:SlateGrey;
	padding:2px;
	padding-left:5px;
	padding-right:5px;
	font-size: 13px;
	margin: 1px;
    }
   #tNewLexeme {
	    margin: 0px;
    }
</style>
]]></Data>
</XData>

<XData name="Contents">
<Description>
Этот XML блок описывает содержимое этой страницы.</Description>
<XMLNamespace>http://www.intersystems.com/zen</XMLNamespace>
<Data><![CDATA[
<page title="Wizard" xmlns="http://www.intersystems.com/zen" 
xmlns:Web.Components="http://www.intersystems.com/Web.Components"
dragAndDrop="true">
<html enclosingClass="title">Editor</html>
<vgroup>
<menu layout="horizontal" width="100%" align="left">
<menuItem caption="Contexts" onclick="zenPage.gotoPage('Web.Theme.cls');" title="Change contexts."/>
<menuItem caption="Menu" onclick="zenPage.gotoPage('Web.Menu.cls');" title="Go to menu."/>
<menuItem caption="Edit profile" onclick="zenPage.gotoPage('Web.TeacherProfile.cls');" title="Edit your profile"/>
<menuSeparator/>
<label id="idTeacher" value="" width="20%"/>
<spacer width="100%"/>
<menuSeparator/>
<menuItem caption="Exit" onclick="zenPage.Exit();" title="Leave the application. You will need to log in to get here again."/>
<menuItem caption="Help" onclick="zenPage.Downolad();" title="Download the help file."/>
</menu>
<spacer width="5mm"/>
<hgroup cellVAlign="top" width="100%">

<!--Context -->
<vgroup containerStyle="padding-top:1px;" id="frame">
<hgroup id="hgContext" containerStyle="background:#CD950C; margin-top:2px; color: white; font-weight: bold;" align="center">
<hgroup align="left" label="">
<label value="#(%session.Department)#" controlStyle="font-size: 12px;"/>
<label value="->"/>
<label value="#(%session.Subject)#" controlStyle="font-size: 12px;"/>
<label value="->"/>
<label value="#(%session.Theme)#" controlStyle="font-size: 12px;"/>
</hgroup>
<spacer width="5px"/>
<hgroup align="right" cellAlign="right" hidden="true">
<link caption="[Change]" href="http://localhost:57772/csp/user/Web.Context.cls"/>
</hgroup>
</hgroup>
<vgroup>
<vgroup>
<!--Composite -->
<form id="fCP" name="fCP">
<fieldSet id="Composite2Editable" legend="Please, complete this pattern with concepts chosen on your left!">
<hgroup id="cpGroup" valign="middle" align="center" cellAlign="center" cellVAlign="middle">
<!-- Скрытое поле для ID редактируемого КП -->
<hidden id="hId" name="hId"/>
<text id="fsConcept"
value=""
title="Please, drag the current concept from stated below list into here."
label="Concept" showLabel="false"
disabled="false" readOnly="1" 
dragEnabled="true" dropEnabled="true" onafterdrag="alert('Forbidden!');"
size="35"
/>
<hidden id="fsConceptID" value=""/>
<dataCombo id="fsLink" name="fsLink"
size="20" dropdownHeight="20mm"
label="Link" showLabel="false" 
disabled="false" 
sql="SELECT ID,Name FROM Semantics ORDER BY Name"
sqlLookup="SELECT Name FROM Semantics WHERE ID=?"
onchange="zenPage.createListNew(zenThis.text,'dlbCSub');"
ondblclick="alert(zenThis.text);"
/>
<!--<Web.Components:Editable id="cSG" name="cSG"  />-->
<vgroup id="Holder">
<Web.Components:EditableNew id="cSG" name="cSG" dragEnabled="true" dropEnabled="true"/>
</vgroup>
</hgroup>
</fieldSet>
<hgroup align="center">
 <button id="bS1" align="right" title="Без генерации задач. У Вас будет возможность отредактировать узел."
 caption="Save"
 onclick="zenPage.SaveCP(0);"
 />
  <button id="bS2" align="right" title="Сразу будут сгенерированы задачи на основе этого КП. Без возможности редактировать узел"
 caption="Save*"
 onclick="zenPage.SaveCP(1);"
 />
 <button align="right"
 caption="Clear"
 onclick="zenPage.resetForm('fCP');" title="Очистить форму"
 />
 <button caption="Refresh" onclick="setTimeout('ZLM.initTargetNodes()',500);" title="Обновить состояние компонента когнтивной группы"/>
 </hgroup>
 </form>
</vgroup>
 <hgroup cellVAlign="top">
 <vgroup>
 
<!-- Список понятий -->
<text id="search1" label="Search" onkeyup="zenPage.searchConcept();" size="35"/>
<dataListBox id="dlbConcept"
dragEnabled="true"
label="Theme's concepts" 
listWidth="6.5cm"
listHeight="10cm"
onafterdrag="zenPage.afterDrag(zenThis,dragData);"
ondblclick="zenPage.editConcept('source',zenThis.value);"
sql = "SELECT DISTINCT TOP ? Concept->ID, Concept->Name FROM Stat WHERE Context->Subject=? and Quality='Conc' and Concept->Name %STARTSWITH ? ORDER BY Concept->Name"
>
<parameter value="10"/>
<parameter value="#(%session.SubjectId)#"/>
<parameter value=""/>
</dataListBox>

<vgroup>
<radioSet id="rsConcept"
 title="Last:"
 displayList="10,20,50,100,All"
 valueList="10,20,50,100,All" 
 value="10"
 onchange="zenPage.createList(zenThis.value,'dlbConcept');"
  />
<radioSet id="rsConcept2"
 title="Concept of::"
 displayList="Theme,Subject,Department, All"
 valueList="Theme,Subject,Department, All"
 value="Subject"
 onchange="alert('To change!');" disabled="true"
  />
</vgroup>

<button id="bNew" caption="New" hidden="true"/>
<spacer height="5mm"/>

<dataController id="source" modelClass="User.CPConcept" modelId="" alertOnError="true"/>
<form id="fConc" name="fConc" controllerId="source">
<vgroup id="hgSave" hidden="false">
<text label="ID:" id="id" name="id" 
	dataBinding="%id" size="5" hidden="true"/>
<text id="tNewConc" dataBinding="Name" size="35" title="Type in a new concept."/>
<hgroup>
<button caption="Save" 
onclick="zenPage.saveForm('fConc','dlbConcept');"
 title="Будет сохранён новый концепт."/>
</hgroup>
</vgroup>
</form>

</vgroup>
<spacer width="5cm"/>
<vgroup>
<vgroup>

<!-- Список связанных элементов -->
<text id="search2" label="Search" onkeyup="zenPage.searchOfCSs();" size="35"/>
<dataListBox id="dlbCSub"
 sql = "SELECT DISTINCT TOP ? Concept->ID, Concept->Name FROM Stat WHERE Context->Subject=? and Quality=? and Concept->Name %STARTSWITH ? ORDER BY Concept->Name"
 dragEnabled="true"
 label="Cognitive elements" 
 listWidth="6.5cm" 
 listHeight="10cm"
 onafterdrag="zenPage.afterDrag(zenThis,dragData);"
 ondblclick="zenPage.decideForm(zenThis.value);"
 disabled="false"
 >
 <parameter value="10"/>
 <parameter value="#(%session.SubjectId)#"/>
 <parameter value="Func"/>
 <parameter value=""/>
 </dataListBox>
 
 <vgroup>
<radioSet id="rsCSub" 
 title="Last:"
 displayList="10,20,50,100,All"
 valueList="10,20,50,100,100000"
 value="10"
 onchange="zenPage.createList(zenThis.value,'dlbCSub');"
  />
  <radioSet id="rsCSub2" hidden="true" 
 title="Last:"
 displayList="Func,Feat,Cond"
 valueList="Func,Feat,Cond"
 value="Func"
 onchange="zenPage.createList2(zenThis.value,'dlbCSub');"
  />
  <radioSet id="rsCSub3"
 title="CS of::"
 displayList="Theme,Subject,Department, All"
 valueList="Theme,Subject,Department, All"
 value="Subject"
 onchange="alert('To change!');" disabled="true"
  />
</vgroup>

<spacer height="5mm"/>

<!-- Состояние -->
<vgroup id="vgCond" hidden="true">
<dataController id="source1" modelClass="User.CPCondition" modelId="" alertOnError="true"/>
<form id="fCond" name="fCond" controllerId="source1">
<text label="ID:" dataBinding="%id" size="5" hidden="true"/>
<text dataBinding="Name" size="35" title="Type in a new condition."/>
<hgroup>
<button caption="Save" 
onclick="zenPage.saveForm('fCond','dlbCSub');"
 title="Будет сохранёно новое состояние."/>
</hgroup>
</form>
</vgroup>

<!-- Признак -->
<vgroup id="vgFeat" hidden="true">
<dataController id="source2" modelClass="User.CPFeature" modelId="" alertOnError="true"/>
<form id="fFeat" name="fFeat" controllerId="source2">
<text label="ID:" dataBinding="%id" size="5" hidden="true"/>
<text dataBinding="Name" size="35" title="Type in a new feature."/>
<hgroup>
<button caption="Save" 
onclick="zenPage.saveForm('fFeat','dlbCSub');"
 title="Будет сохранён новый признак."/>
</hgroup>
</form>
</vgroup>

<!-- Функция -->
<vgroup id="vgFunc" hidden="false">
<dataController id="source3" modelClass="User.CPFunction" modelId="" alertOnError="true"/>
<form id="fFunc" name="fFunc" controllerId="source3">
<text label="ID:" dataBinding="%id" size="5" hidden="true"/>
<text dataBinding="Name" size="35" title="Type in a new function."/>
<hgroup>
<button caption="Save" 
onclick="zenPage.saveForm('fFunc','dlbCSub');"
 title="Будет сохранёна новая функция."/>
</hgroup>
</form>
</vgroup>

</vgroup>
</vgroup>
</hgroup>
</vgroup>
</vgroup>
<spacer width="0mm"/>

<!--Table -->

<hgroup>
<vgroup id="table">
<tablePane 
id="MyCPs"
tableName="CP"
whereClause="RM->Context=#(%session.Context)#"
maxRows="0"
headerLayout="headersOnTop" 
fixedHeaders="false"
pageSize="10" 
showQuery="false"
useSnapshot="1"
showZebra="true"
showRowSelector="true"
valueColumn="ID" 
useKeys="false"
caption="State: Not Completed, Not available"
nowrap="false" 
align="left"
width="100%"
ondblclick="alert(zenThis.getProperty('value'));"
>

<column colName="ID" hidden="true" width=""/>

<column header="Concept"
       colName="Concept->Name"
       cellTitle="Concept"
       style="text-align: left;"
       filterType="text" 
       filterOp="%STARTSWITH"
       filterTitle="Начинается:"
        />
        
<column header="Link"
       colName="Link->Name as Link"
       cellTitle="Link"
       style="text-align: center;"
        />
        
<column header="Relations"
       colName="Relations"
       OnDrawCell="MakeChildren"
       style="text-align: left;"
       width=""
        />
        
<column header="Author"
       colName="Author->PFullName as Author"
       title="Who is the author?"      
       style="text-align: left ;" 
       filterType="query"
       filterQuery="select PSurname from Teacher"
       filterOp="["
        />
            
<column OnDrawCell="MakeEdit"
       header="Edit"
       style="text-align: center;"
        />
        
<column OnDrawCell="MakeGet"
       header="Get"
       style="text-align: center;"
         />
<column OnDrawCell="MakeExtract"
       header="Extract"
       cellTitle="Extract"
       style="text-align: center;"
        /> 
              
<column colName="IfActive"
       cellTitle="Active?"
       colExpression="CASE WHEN IfActive=1 THEN 'Yes' ELSE 'Not' END"
       style="text-align: center;"
        />  
         
</tablePane>

<spacer height="0"/>
<tableNavigatorBar tablePaneId="MyCPs" showPageSize="true" msgMaxRows="10"/>
<spacer height="30px"/>
<button caption="Complete>>" id="bC" onclick="zenPage.MakeCompleted();" title="Делает текущую тему законченной, но не доступной пока студентам."/>
<button caption="Make incompleted>>" id="bMIC" onclick="zenPage.MakeIncompleted();" hidden="true"/>
<button caption="Make available>>" id="bMA" onclick="zenPage.MakeAvailable();" hidden="true"/>
<button caption="Make unavailable>>" id="bMUA" onclick="alert('Sorry, the method is not realized.');" hidden="true"/>
</vgroup>
</hgroup>
</hgroup>
</vgroup>
</page>
]]></Data>
</XData>

<UDLText name="T">
<Content><![CDATA[/*------------------- OnDrawCell methods -----------------*/
]]></Content>
</UDLText>

<Method name="MakeExtract">
<ClassMethod>1</ClassMethod>
<FormalSpec>pTable:%ZEN.Component.tablePane,pName:%String,pSeed:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
  if %query("IfActive")="Yes"
	{
      // Извлечь
      &html<<input type="button" onclick="zenPage.Extract('#(%query("ID"))#')" value="Extract" caption="Exclude from the theme"/>>
	}
  else
	{
      // Включить
      &html<<input type="button" onclick="zenPage.Involve('#(%query("ID"))#')" value="Involve" caption="Include to the theme"/>>
	}
 q $$$OK
]]></Implementation>
</Method>

<Method name="Extract">
<FormalSpec>cpid:%Integer</FormalSpec>
<ZenMethod>1</ZenMethod>
<Implementation><![CDATA[
  s cp=##class(User.CP).%OpenId(cpid)
   if $IsObject(cp)
    {
	  s cp.IfActive=0
	  d cp.%Save()
	  &js<zenPage.refreshData('MyCPs');alert('OK');>
    }
  q
]]></Implementation>
</Method>

<Method name="Involve">
<FormalSpec>cpid:%Integer</FormalSpec>
<ZenMethod>1</ZenMethod>
<Implementation><![CDATA[
   s cp=##class(User.CP).%OpenId(cpid)
   if $IsObject(cp)
    {
	  s cp.IfActive=1
	  d cp.%Save()
	  &js<zenPage.refreshData('MyCPs');alert('OK');>
    }
  q
  q
]]></Implementation>
</Method>

<Method name="MakeEdit">
<ClassMethod>1</ClassMethod>
<FormalSpec>pTable:%ZEN.Component.tablePane,pName:%String,pSeed:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 // Проверить разрешено ли редактирование?
 // Разрешено только когда ещё не были сгенерированы учебные элементы на основе этого КП.
  s cp=##class(User.CP).%OpenId(%query("ID"))
   if $IsObject(cp)
    {
	  if cp.IfCSsExist
	    {
          &html<<a title="Редактирование невозможно">-</a>>
	    }
	  else
	    {
		  &html<<a href="javascript:zenPage.Editing('#(cp.%Id())#');">
		        <img src="/CSP/user/edit.png" border="0" alt="Edit" title="Редактировать"></a>
		       >
	    }
    }
 q $$$OK
]]></Implementation>
</Method>

<Method name="MakeGet">
<ClassMethod>1</ClassMethod>
<FormalSpec>pTable:%ZEN.Component.tablePane,pName:%String,pSeed:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 //Проверить были ли уже сгенерированы задачи на основе этого КП
 s cp=##class(User.CP).%OpenId(%query("ID"))
   if $IsObject(cp)
    {
	  if cp.IfCSsExist
	    {
		  &html<<a title="Задачи сгенерированы">+</a>>
	    }
	  else
	    {
		  &html<<a href="javascript:zenPage.CreateCaseStudies('#(cp.%Id())#');">
		        <img src="/CSP/user/extract.png" border="0" alt="Edit" title="Сгенерировать задачи"></a>
		       >
	    }
    }
 q $$$OK
]]></Implementation>
</Method>

<Method name="CreateCaseStudies">
<Description>
Создаёт комплект задач на основе данного КП</Description>
<FormalSpec>id:%Integer</FormalSpec>
<ZenMethod>1</ZenMethod>
<Implementation><![CDATA[
  s cp=##class(User.CP).%OpenId(id)
   if $IsObject(cp)
    {
	  s rg=cp.GetCS()
	    if $$$ISOK(rg)
	      {
		     &js<alert('Created!'); 
		     zenPage.refreshData('MyCPs');
		     >
	      }
	    else
	      {
		     &js<alert('Error!');>
	      } 
    }
  q
]]></Implementation>
</Method>

<Method name="MakeChildren">
<FormalSpec>pTable:%ZEN.Component.tablePane,pName:%String,pSeed:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
  s cp=##class(User.CP).%OpenId(%query("ID"))
  if $IsObject(cp) {
   s x=cp.Relations.Count()
   for i=1:1:x
	{
	  s iValue=cp.Relations.GetAt(i)
		if i=x {
		  s string=iValue.Name
		}
		else {
		  s string=iValue.Name_","
		}
	  &html<#(string)#>
	}
  }  
 Quit $$$OK
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[/*------------------- End -----------------*/
]]></Content>
</UDLText>

<UDLText name="T">
<Content><![CDATA[/*------------------------- JS-methods --------------------------*/
]]></Content>
</UDLText>

<Method name="saveForm">
<Description>
Сохранение новых понятий прямо в редакторе КП</Description>
<FormalSpec>zenform,list</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
  var form = zen(zenform);
  var rs=form.save();
	if (rs!='') {
	   form.reset();
	   // Перезагрузить список
	   zen(list).executeQuery();
	}
]]></Implementation>
</Method>

<Method name="editConcept">
<Description>
Редактировать концепт</Description>
<FormalSpec>controller,id</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
  var ctrl = zenPage.getComponentById(controller);
  ctrl.setProperty('modelId',id);
]]></Implementation>
</Method>

<Method name="refreshData">
<Description>
Обновляет данные компонента</Description>
<FormalSpec>component</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[  zen(component).executeQuery();
]]></Implementation>
</Method>

<Method name="decideForm">
<Description>
Редактирование элементов когнитивной группы</Description>
<FormalSpec>value</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
   var x=zen('rsCSub2').getValue();
   switch (x) {
     case 'Cond':
      source='source1';
      zenPage.showForm(0,1,1);
      break
     case 'Feat':
      source='source2';
      zenPage.showForm(1,0,1);
      break
     case 'Func':
      source='source3';
      zenPage.showForm(1,1,0);
      break
     default:
      return;
   }
  // Редактируем
  zenPage.editConcept(source,value);
]]></Implementation>
</Method>

<Method name="showForm">
<Description>
Делает видимой заданную форму</Description>
<FormalSpec>cond,feat,func</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
  zen('vgCond').setProperty('hidden',cond);
  zen('vgFeat').setProperty('hidden',feat);
  zen('vgFunc').setProperty('hidden',func);
]]></Implementation>
</Method>

<Method name="createList">
<Description>
Обновляет количество понятий в списках dataListBox</Description>
<FormalSpec>value,boxname</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
  var conc = zen(boxname);
  if (value=='All') value=1000000;
  conc.setProperty('parameters',1,value);
  return;
]]></Implementation>
</Method>

<Method name="createList2">
<Description>
Обновляет тип элементов когнитивной группы в списках dataListBox
Показывает форму соответсвующую типу элементов в списке</Description>
<FormalSpec>value,boxname</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
  var conc = zen(boxname);
  switch (value) {
	 case 'Cond':
	 zenPage.showForm(0,1,1);
	 break
	 case 'Feat':
	 zenPage.showForm(1,0,1);
	 break
	 case 'Func':
	 zenPage.showForm(1,1,0);
	 break
	 default:
	 return;
  }
  conc.setProperty('parameters',3,value);
  return;
]]></Implementation>
</Method>

<Method name="createListNew">
<Description>
Обновляет тип элементов когнитивной группы в списках dataListBox</Description>
<FormalSpec>text,boxname</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
  var conc = zen(boxname);
  if (text=='genus-species'|| text=='part-whole')
   {
	 // Disabled правый список
	 conc.setProperty('dragEnabled',0);
	 return;
   }
  else if (text=='object-function')
   {
	 value='Func';
   }
  else if (text=='object-feature')
   {
	 value='Feat';
   }
  else if (text=='object-condition')
   {
	 value='Cond';
   }
   else
   {
	 return;
   }
  // Enabled правый список
  conc.setProperty('dragEnabled',1);
  // Вывести соответ. список
  conc.setProperty('parameters',3,value);
  // Установить значение переключателя radioSet
  //zen('rsCSub2').setProperty('value',value)
  zenPage.createList2(value,boxname);
return;
]]></Implementation>
</Method>

<Method name="resetForm">
<Description>
Очистка формы для создания структуры КП</Description>
<FormalSpec>fName:%String</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
  ZLM.initTargetNodes();
  zen(fName).reset();
]]></Implementation>
</Method>

<Method name="afterDrag">
<Description>
Обработчик drag and drop</Description>
<FormalSpec>listBox,dragData</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
  if (dragData.targetComponent.getProperty('id')=='fsConcept')
	{
      //Copy the dragData.value into hidden field fsConceptID
      zen('fsConceptID').setProperty('value',dragData.value);
	}
  else if (dragData.targetComponent.getProperty('id').substring(0,7)=='cSG.Lex'&&dragData.targetComponent.getProperty('id').substring(0,9)!='cSG.LexID')
	{
	  //Copy the dragData.value into hidden field of one of the cSG-s
	  var idOfLex=dragData.targetComponent.getProperty('id').substring(7);
	  var tagretHiddenIs='cSG.LexID'+idOfLex;
	  zen(tagretHiddenIs).setProperty('value',dragData.value);
	}
  else
	{
	  alert('Sorry, try again!');
	}
]]></Implementation>
</Method>

<Method name="setButtons">
<Description>
Показывает/скрывает группу кнопок</Description>
<FormalSpec>first,second,third,fourth,heading</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
  zenPage.showButton('bC',first);
  zenPage.showButton('bMIC',second);
  zenPage.showButton('bMA',third);
  zenPage.showButton('bMUA',fourth);
  // Установить заголовок
  zenPage.getComponentById('MyCPs').setProperty('caption',heading)
]]></Implementation>
</Method>

<Method name="showButton">
<Description>
Показывает/скрывает копонент: hidden=0/1</Description>
<FormalSpec>bn,logic</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[  zen(bn).setProperty('hidden',logic);
]]></Implementation>
</Method>

<Method name="searchConcept">
<Description>
Реализация поиска элементов в левом списке</Description>
<FormalSpec>startswith</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[  zen('dlbConcept').setProperty('parameters',3,zen('search1').getValue());
]]></Implementation>
</Method>

<Method name="searchOfCSs">
<Description>
Реализация поиска элементов в правом списке</Description>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[  zen('dlbCSub').setProperty('parameters',4,zen('search2').getValue());
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[/*------------------------- End JS-methods --------------------------*/
]]></Content>
</UDLText>

<UDLText name="T">
<Content><![CDATA[/*------------------------- Zen methods -----------------------------*/
]]></Content>
</UDLText>

<Method name="Editing">
<Description>
Стартует набор методов для редактирования выбранного КП
Запсукать по двойному щелчку в таблице или нажатию на пиктограмму</Description>
<FormalSpec>id:%Integer</FormalSpec>
<ZenMethod>1</ZenMethod>
<Implementation><![CDATA[
  // Установить значение ID редактируемого КП
  d ..%SetValueById("hId",id)
  // Получаем объект КП
  s cp=##class(User.CP).%OpenId(id)
  s num=cp.Relations.Count()
  // Заменить динамический компонент: удалить существующий и создать новый
  d ..RefreshComposite(num,cp.Relations)
  //&js<setTimeout("ZLM.initTargetNodes();",500);>
  // Установить значение концепта и типа связи
  d ..%SetValueById("fsConceptID",cp.Concept.%Id())
  d ..%SetValueById("fsConcept",cp.Concept.Name)
  d ..%SetValueById("fsLink",cp.Link.%Id())
  // Установить значения динамического компонента
  //d ..RefillComposite(num,cp.Relations)
  q
]]></Implementation>
</Method>

<Method name="RefreshComposite">
<Description>
Устанавиливает заданное количество элементов ввода для композита</Description>
<FormalSpec>n:%Integer,rel:%Library.ListOfDataTypes</FormalSpec>
<Private>1</Private>
<Implementation><![CDATA[
  d ..%GetComponentById("Holder").%RemoveChild(..%GetComponentById("cSG"))
  s newSG=##class(Web.Components.EditableNew).%New()
  s newSG.id="cSG"
  s newSG.Current=n
  s newSG.ListOfRels=rel
  d ..%GetComponentById("Holder").%AddChild(newSG)
  q
]]></Implementation>
</Method>

<Method name="RefillComposite">
<Description>
Заполняет слоты композита значениями из БД при редактировании КП</Description>
<FormalSpec>n:%Integer,rel:%Library.ListOfDataTypes</FormalSpec>
<Private>1</Private>
<Implementation><![CDATA[
  f i=1:1:n {
	s item=rel.GetAt(i)
	  if $IsObject(item) {
		 // Вставляем это значение в очередной слот композита
		 d ..%SetValueById("cSG.LexID"_i,item.%Id())
		 d ..%SetValueById("cSG.Lex"_i,item.Name)
	  }
  }
]]></Implementation>
</Method>

<Method name="Exit">
<Description>
Выход из системы</Description>
<ZenMethod>1</ZenMethod>
<Implementation><![CDATA[
  k %session.Data("TeacherId")
  k %session.Data("Context")
  // перезагрузить страницу
  &js<zenPage.gotoPage('Web.Verification.cls');>
]]></Implementation>
</Method>

<Method name="GetFullClass">
<FormalSpec>concept:%String=1</FormalSpec>
<ReturnType>%String</ReturnType>
<ZenMethod>1</ZenMethod>
<Implementation><![CDATA[
  if concept=1 q "CPConcept"
  q ##class(User.Statistics).FullName(..GetShortClass())
]]></Implementation>
</Method>

<Method name="GetShortClass">
<FormalSpec>concept:%String=1</FormalSpec>
<ReturnType>%String</ReturnType>
<ZenMethod>1</ZenMethod>
<Implementation><![CDATA[
  if concept=1 q "Conc"
  q ..%GetValueById("rsCSub2")
]]></Implementation>
</Method>

<Method name="SaveCP">
<Description>
Сохранение нового когнитивного прототипа
ifget следует ли сразу генерировать задачи на основе вновь созданного КП</Description>
<FormalSpec>ifget:%Boolean</FormalSpec>
<ReturnType>%Status</ReturnType>
<ZenMethod>1</ZenMethod>
<Implementation><![CDATA[
  //Вызывать только после успешной валидации формы
  s conc=..%GetValueById("fsConceptID")
  s link=..%GetValueById("fsLink")
  s listOfRels=..%GetComponentById("cSG").GetList()
  s teacher=$Get(%session.Data("TeacherId"))
  s context=$Get(%session.Data("Context"))
  //Сохраняем новый КП
  s newCP=##class(User.CP).SaveCP(conc,link,listOfRels,teacher,context,ifget)
    if $$$ISERR(newCP)
      {
	    q $$$ERROR($$$GeneralError,"Can't save the CP!")
	  }
    else
      {
       //To add the CP to the current reference model at given context
       s rs=##class(User.ReferenceModel).AddEntry(newCP,context)
         if $$$ISOK(rs)
           {
	         &js<alert('The Reference Model has been successfully filled with the new CP.');
	         // Обновляем таблицу 'MyCPs'
             zenPage.refreshData('MyCPs');
             // Очищаем форму
             zenPage.resetForm('fCP')
             >
           }
         else
           {
	         &js<alert('Something has gone wrong!');>
           }
      }
  q $$$OK
]]></Implementation>
</Method>

<Method name="EditCP">
<Description>
Редактирование старого когнитивного прототипа</Description>
<ReturnType>%Status</ReturnType>
<ZenMethod>1</ZenMethod>
<Implementation><![CDATA[
  // Вызывать только после успешной валидации формы
  // To be done
  q $$$OK
]]></Implementation>
</Method>

<Method name="MakeCompleted">
<Description>
Делает тему завершённой, IfDone=1
Меняет заголовок "Completed/Incompleted"
Деактивирует кнопку для доступности темы для студентов
Активирует кнопку для отмены завершения создания темы
Активирует кнопку для установки доступности темы</Description>
<ZenMethod>1</ZenMethod>
<Implementation><![CDATA[
  // Проверить все ли КП имеют задачи?
  s ifAllowed=##class(User.CP).CheckIfAllGenerated(..GetContext().%Id())
  if ifAllowed=1 {
	s con=..GetContext()
    s con.IfDone=1
    s rs=con.%Save()
    &js<zenPage.setButtons(1,0,0,1,'Completed/Not available');>
  }
  else {
	&js<alert('Prohibited! You should generate CSs from all CP presented.');>
  }
]]></Implementation>
</Method>

<Method name="MakeIncompleted">
<ZenMethod>1</ZenMethod>
<Implementation><![CDATA[
  s con=..GetContext()
  s con.IfDone=0
  s rs=con.%Save()
  &js<zenPage.setButtons(0,1,1,1,'Not completed/Not available');>
]]></Implementation>
</Method>

<Method name="MakeAvailable">
<Description>
Делает тему доступной для студента, IfAvailable=1
Меняет заголовок "Completed\Available"
Настраивает кнопки
--------------------------------------------------
Копирует эту тему в Curriculum всех подходящих по StCategory студентов, выводит сообщение сколько учебных планов было обновлено этой темой</Description>
<ZenMethod>1</ZenMethod>
<Implementation><![CDATA[
  s con=..GetContext()
  // Копируем в учебные планы
  s rc=##class(User.Curriculum).UpdateCurriculum(..GetContext())
  if rc="Nothing" {
    &js<alert('No students!'); zenPage.setButtons(1,1,1,0,'Completed/Available');zen('bS1').setProperty('hidden',1);>
  }
  elseif $$$ISERR(rc) {
	&js<alert('Error');>
	q
  }
  else {
    &js<alert('Students: '+'#(rc)#'); zenPage.setButtons(1,1,1,0,'Completed/Available');zen('bS2').setProperty('hidden',1);>
  }
   s con.IfAvailable=1
   s rs=con.%Save()
  q
]]></Implementation>
</Method>

<Method name="ShowButtonC">
<Description>
Показывает/скрывает копонент: hidden=0/1</Description>
<FormalSpec>bn:%String,logic:%Boolean</FormalSpec>
<ZenMethod>1</ZenMethod>
<Implementation><![CDATA[  s ..%GetComponentById(bn).hidden=logic
]]></Implementation>
</Method>

<Method name="SetButtonsC">
<Description>
Показывает/скрывает группу кнопок</Description>
<FormalSpec>first,second,third,fourth,heading</FormalSpec>
<ZenMethod>1</ZenMethod>
<Implementation><![CDATA[
  d ..ShowButtonC("bC",first)
  d ..ShowButtonC("bMIC",second)
  d ..ShowButtonC("bMA",third)
  d ..ShowButtonC("bMUA",fourth)
  s ..%GetComponentById("MyCPs").caption=heading
]]></Implementation>
</Method>

<Method name="GetContext">
<Description>
Возвращает объектную ссылку на текущий контекст</Description>
<ReturnType>User.Theme</ReturnType>
<ZenMethod>1</ZenMethod>
<Implementation><![CDATA[  q ##class(User.Theme).%OpenId($Get(%session.Data("Context")))
]]></Implementation>
</Method>

<Method name="MakeTitle">
<Description>
Установить заголовки таблицы с КП-и
Not Completed/Not Available
Completed/Not Available
Completed/Available</Description>
<FormalSpec>completion:%Boolean,availability:%Boolean</FormalSpec>
<ZenMethod>1</ZenMethod>
<Implementation><![CDATA[
   if (completion=0) && (availability=0) {
	 d ..SetButtonsC(0,1,1,1,"Not completed/Not available") 
   }
   elseIf (completion=1) && (availability=0) {
	 d ..SetButtonsC(1,0,0,1,"Completed/Not available")   
   }
   else {
	 d ..SetButtonsC(1,1,1,0,"Completed/Available")
	 // Запрещаем создавать новые КП - кнопка сохранить - disabled
     s ..%GetComponentById("bS1").hidden=1
     s ..%GetComponentById("bS2").hidden=1	     
   }
]]></Implementation>
</Method>

<Method name="GetTeacher">
<FormalSpec>tr:User.Teacher</FormalSpec>
<Private>1</Private>
<Implementation><![CDATA[  q "Hello, "_tr.PSurname_" "_$Extract(tr.PName,1,1)_"."
]]></Implementation>
</Method>

<Method name="%OnAfterCreatePage">
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
  s con=%session.Data("Context")
  s context=##class(User.Theme).%OpenId(con)
    If $IsObject(context) 
      {
	    s %session.Data("Subject")=context.Subject.Subject.Name
		s %session.Data("Department")=context.Subject.Department.Name
	    s %session.Data("Theme")=context.Name
	    // Закинем Id предмета в сессию для фильтрации понятий в списках dataCombo
        s %session.Data("SubjectId")=context.Subject.%Id()
        // Настроить кнопки связанные с признаками завершения и доступности темы
        d ..MakeTitle(context.IfDone, context.IfAvailable)
	  }
  s tr=$Get(%session.Data("TeacherId"))
  s teacher=##class(User.Teacher).%OpenId(tr)
  If $IsObject(teacher) 
      {
	     d ..%SetValueById("idTeacher",..GetTeacher(teacher))
      }
  Quit $$$OK
]]></Implementation>
</Method>

<Method name="%OnPreHTTP">
<ClassMethod>1</ClassMethod>
<ReturnType>%Boolean</ReturnType>
<ServerOnly>1</ServerOnly>
<Implementation><![CDATA[
  //If the user isn't logged on, we should redirect him to the error page
  //else you show him the page
  if ($Get(%session.Data("Context")) = "")
     {
       s %response.Redirect="Web.Theme.cls"
      }
   if ($Get(%session.Data("TeacherId")) = "")
     {
       s %response.Redirect="Web.Verification.cls"
      } 
  q 1
]]></Implementation>
</Method>
</Class>
</Export>
